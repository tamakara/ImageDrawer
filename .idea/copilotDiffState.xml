<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/components/ImageCard.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ImageCard.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div&#10;    class=&quot;image-card&quot;&#10;    :class=&quot;cardClass&quot;&#10;    @click=&quot;handleClick&quot;&#10;    @touchstart=&quot;handleTouchStart&quot;&#10;    @touchend=&quot;handleTouchEnd&quot;&#10;  &gt;&#10;    &lt;!-- 图片容器 --&gt;&#10;    &lt;div class=&quot;image-container&quot;&gt;&#10;      &lt;el-image&#10;        :src=&quot;url&quot;&#10;        :alt=&quot;title&quot;&#10;        fit=&quot;cover&quot;&#10;        :loading=&quot;'lazy'&quot;&#10;        :preview-teleported=&quot;true&quot;&#10;        class=&quot;card-image&quot;&#10;        @load=&quot;handleImageLoad&quot;&#10;        @error=&quot;handleImageError&quot;&#10;      &gt;&#10;        &lt;template #placeholder&gt;&#10;          &lt;div class=&quot;image-placeholder&quot;&gt;&#10;            &lt;el-icon class=&quot;placeholder-icon&quot;&gt;&#10;              &lt;Picture /&gt;&#10;            &lt;/el-icon&gt;&#10;          &lt;/div&gt;&#10;        &lt;/template&gt;&#10;        &lt;template #error&gt;&#10;          &lt;div class=&quot;image-error&quot;&gt;&#10;            &lt;el-icon class=&quot;error-icon&quot;&gt;&#10;              &lt;Picture /&gt;&#10;            &lt;/el-icon&gt;&#10;            &lt;span class=&quot;error-text&quot;&gt;���载失败&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/template&gt;&#10;      &lt;/el-image&gt;&#10;&#10;      &lt;!-- 选择覆盖层 --&gt;&#10;      &lt;div v-if=&quot;checked&quot; class=&quot;selection-overlay&quot;&gt;&#10;        &lt;el-icon class=&quot;selection-icon&quot;&gt;&#10;          &lt;CircleCheck /&gt;&#10;        &lt;/el-icon&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 加载指示器 --&gt;&#10;      &lt;div v-if=&quot;loading&quot; class=&quot;loading-overlay&quot;&gt;&#10;        &lt;el-icon class=&quot;loading-icon is-loading&quot;&gt;&#10;          &lt;Loading /&gt;&#10;        &lt;/el-icon&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 卡片信息 --&gt;&#10;    &lt;div class=&quot;card-footer&quot;&gt;&#10;      &lt;div class=&quot;filename-container&quot;&gt;&#10;        &lt;el-tooltip&#10;          :content=&quot;title&quot;&#10;          placement=&quot;top&quot;&#10;          :disabled=&quot;!isTitleTruncated&quot;&#10;        &gt;&#10;          &lt;span class=&quot;filename&quot; ref=&quot;filenameRef&quot;&gt;{{ title }}&lt;/span&gt;&#10;        &lt;/el-tooltip&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;el-checkbox&#10;        :model-value=&quot;checked&quot;&#10;        @change=&quot;handleCheck&quot;&#10;        @click.stop&#10;        class=&quot;card-checkbox&quot;&#10;        :size=&quot;checkboxSize&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, nextTick } from 'vue'&#10;import { Picture, CircleCheck, Loading } from '@element-plus/icons-vue'&#10;import { DeviceType } from '@/utils'&#10;&#10;interface Props {&#10;  title: string&#10;  url: string&#10;  checked?: boolean&#10;  deviceType?: DeviceType&#10;}&#10;&#10;interface Emits {&#10;  (e: 'click'): void&#10;  (e: 'check', value: boolean): void&#10;}&#10;&#10;const props = withDefaults(defineProps&lt;Props&gt;(), {&#10;  checked: false,&#10;  deviceType: DeviceType.DESKTOP&#10;})&#10;&#10;const emit = defineEmits&lt;Emits&gt;()&#10;&#10;const loading = ref(false)&#10;const imageLoaded = ref(false)&#10;const imageError = ref(false)&#10;const isTouchDevice = ref(false)&#10;const touchStartTime = ref(0)&#10;const filenameRef = ref&lt;HTMLElement&gt;()&#10;const isTitleTruncated = ref(false)&#10;&#10;// 计算属性&#10;const cardClass = computed(() =&gt; ({&#10;  [`card-${props.deviceType}`]: true,&#10;  'card-checked': props.checked,&#10;  'card-loading': loading.value,&#10;  'card-touch': isTouchDevice.value&#10;}))&#10;&#10;const checkboxSize = computed(() =&gt; {&#10;  switch (props.deviceType) {&#10;    case DeviceType.MOBILE:&#10;      return 'large'&#10;    case DeviceType.TABLET:&#10;      return 'default'&#10;    default:&#10;      return 'small'&#10;  }&#10;})&#10;&#10;// 事件处理&#10;const handleClick = () =&gt; {&#10;  emit('click')&#10;}&#10;&#10;const handleCheck = (value: boolean) =&gt; {&#10;  emit('check', value)&#10;}&#10;&#10;const handleTouchStart = () =&gt; {&#10;  touchStartTime.value = Date.now()&#10;}&#10;&#10;const handleTouchEnd = () =&gt; {&#10;  const touchDuration = Date.now() - touchStartTime.value&#10;  if (touchDuration &lt; 200) {&#10;    // 短按视为点击&#10;    handleClick()&#10;  }&#10;}&#10;&#10;const handleImageLoad = () =&gt; {&#10;  loading.value = false&#10;  imageLoaded.value = true&#10;  imageError.value = false&#10;}&#10;&#10;const handleImageError = () =&gt; {&#10;  loading.value = false&#10;  imageLoaded.value = false&#10;  imageError.value = true&#10;}&#10;&#10;// 检查标题是否被截断&#10;const checkTitleTruncation = async () =&gt; {&#10;  await nextTick()&#10;  if (filenameRef.value) {&#10;    isTitleTruncated.value = filenameRef.value.scrollWidth &gt; filenameRef.value.clientWidth&#10;  }&#10;}&#10;&#10;// 生命周期&#10;onMounted(() =&gt; {&#10;  isTouchDevice.value = 'ontouchstart' in window&#10;  loading.value = true&#10;  checkTitleTruncation()&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-card {&#10;  position: relative;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  background: var(--el-bg-color);&#10;  border: 2px solid transparent;&#10;  transition: all 0.3s ease;&#10;  cursor: pointer;&#10;  user-select: none;&#10;}&#10;&#10;.image-card:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);&#10;  border-color: var(--el-color-primary-light-7);&#10;}&#10;&#10;.card-checked {&#10;  border-color: var(--el-color-primary);&#10;  box-shadow: 0 0 0 2px var(--el-color-primary-light-8);&#10;}&#10;&#10;.card-loading {&#10;  pointer-events: none;&#10;}&#10;&#10;/* 设备特定样式 */&#10;.card-mobile {&#10;  border-radius: 8px;&#10;  font-size: 12px;&#10;}&#10;&#10;.card-mobile:hover {&#10;  transform: none;&#10;}&#10;&#10;.card-tablet {&#10;  border-radius: 10px;&#10;  font-size: 13px;&#10;}&#10;&#10;.card-desktop {&#10;  border-radius: 12px;&#10;  font-size: 14px;&#10;}&#10;&#10;.card-touch {&#10;  -webkit-tap-highlight-color: transparent;&#10;}&#10;&#10;/* 图片容器 */&#10;.image-container {&#10;  position: relative;&#10;  width: 100%;&#10;  height: 220px; /* 桌面端固定高度 */&#10;  overflow: hidden;&#10;}&#10;&#10;.card-mobile .image-container {&#10;  height: 180px; /* 移动端较小高度 */&#10;}&#10;&#10;.card-tablet .image-container {&#10;  height: 200px; /* 平板端中等高度 */&#10;}&#10;&#10;.card-desktop .image-container {&#10;  height: 220px; /* 桌面端标准高度 */&#10;}&#10;&#10;.card-image {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;  transition: transform 0.3s ease;&#10;}&#10;&#10;.image-card:hover .card-image {&#10;  transform: scale(1.05);&#10;}&#10;&#10;.card-mobile:hover .card-image {&#10;  transform: none;&#10;}&#10;&#10;/* 占位符和错误状态 */&#10;.image-placeholder,&#10;.image-error {&#10;  width: 100%;&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  background: var(--el-fill-color-light);&#10;  color: var(--el-text-color-placeholder);&#10;}&#10;&#10;.placeholder-icon,&#10;.error-icon {&#10;  font-size: 32px;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.card-mobile .placeholder-icon,&#10;.card-mobile .error-icon {&#10;  font-size: 24px;&#10;  margin-bottom: 4px;&#10;}&#10;&#10;.error-text {&#10;  font-size: 12px;&#10;}&#10;&#10;/* 选择覆盖层 */&#10;.selection-overlay {&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: rgba(64, 158, 255, 0.3);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  backdrop-filter: blur(2px);&#10;}&#10;&#10;.selection-icon {&#10;  font-size: 32px;&#10;  color: var(--el-color-primary);&#10;  background: white;&#10;  border-radius: 50%;&#10;  padding: 4px;&#10;}&#10;&#10;.card-mobile .selection-icon {&#10;  font-size: 24px;&#10;  padding: 2px;&#10;}&#10;&#10;/* 加载覆盖层 */&#10;.loading-overlay {&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: rgba(255, 255, 255, 0.8);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  backdrop-filter: blur(2px);&#10;}&#10;&#10;.loading-icon {&#10;  font-size: 24px;&#10;  color: var(--el-color-primary);&#10;}&#10;&#10;/* 卡片底部 */&#10;.card-footer {&#10;  padding: 12px;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;  background: var(--el-bg-color);&#10;  border-top: 1px solid var(--el-border-color-lighter);&#10;}&#10;&#10;.card-mobile .card-footer {&#10;  padding: 8px;&#10;  gap: 6px;&#10;}&#10;&#10;.card-tablet .card-footer {&#10;  padding: 10px;&#10;  gap: 7px;&#10;}&#10;&#10;.filename-container {&#10;  flex: 1;&#10;  min-width: 0;&#10;}&#10;&#10;.filename {&#10;  display: block;&#10;  font-weight: 500;&#10;  color: var(--el-text-color-primary);&#10;  white-space: nowrap;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  line-height: 1.4;&#10;}&#10;&#10;.card-checkbox {&#10;  flex-shrink: 0;&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 480px) {&#10;  .image-card {&#10;    border-radius: 6px;&#10;  }&#10;&#10;  .card-footer {&#10;    padding: 6px;&#10;  }&#10;&#10;  .filename {&#10;    font-size: 11px;&#10;  }&#10;}&#10;&#10;@media (prefers-reduced-motion: reduce) {&#10;  .image-card,&#10;  .card-image {&#10;    transition: none;&#10;  }&#10;&#10;  .image-card:hover {&#10;    transform: none;&#10;  }&#10;&#10;  .image-card:hover .card-image {&#10;    transform: none;&#10;  }&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;  &lt;div&#13;&#10;    class=&quot;image-card&quot;&#13;&#10;    :class=&quot;cardClass&quot;&#13;&#10;    @click=&quot;handleClick&quot;&#13;&#10;    @touchstart=&quot;handleTouchStart&quot;&#13;&#10;    @touchend=&quot;handleTouchEnd&quot;&#13;&#10;  &gt;&#13;&#10;    &lt;!-- 图片容器 --&gt;&#13;&#10;    &lt;div class=&quot;image-container&quot;&gt;&#13;&#10;      &lt;el-image&#13;&#10;        :src=&quot;url&quot;&#13;&#10;        :alt=&quot;title&quot;&#13;&#10;        fit=&quot;cover&quot;&#13;&#10;        :loading=&quot;'lazy'&quot;&#13;&#10;        :preview-teleported=&quot;true&quot;&#13;&#10;        class=&quot;card-image&quot;&#13;&#10;        @load=&quot;handleImageLoad&quot;&#13;&#10;        @error=&quot;handleImageError&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;template #placeholder&gt;&#13;&#10;          &lt;div class=&quot;image-placeholder&quot;&gt;&#13;&#10;            &lt;el-icon class=&quot;placeholder-icon&quot;&gt;&#13;&#10;              &lt;Picture /&gt;&#13;&#10;            &lt;/el-icon&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/template&gt;&#13;&#10;        &lt;template #error&gt;&#13;&#10;          &lt;div class=&quot;image-error&quot;&gt;&#13;&#10;            &lt;el-icon class=&quot;error-icon&quot;&gt;&#13;&#10;              &lt;Picture /&gt;&#13;&#10;            &lt;/el-icon&gt;&#13;&#10;            &lt;span class=&quot;error-text&quot;&gt;���载失败&lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/template&gt;&#13;&#10;      &lt;/el-image&gt;&#13;&#10;&#13;&#10;      &lt;!-- 选择覆盖层 --&gt;&#13;&#10;      &lt;div v-if=&quot;checked&quot; class=&quot;selection-overlay&quot;&gt;&#13;&#10;        &lt;el-icon class=&quot;selection-icon&quot;&gt;&#13;&#10;          &lt;CircleCheck /&gt;&#13;&#10;        &lt;/el-icon&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;!-- 加载指示器 --&gt;&#13;&#10;      &lt;div v-if=&quot;loading&quot; class=&quot;loading-overlay&quot;&gt;&#13;&#10;        &lt;el-icon class=&quot;loading-icon is-loading&quot;&gt;&#13;&#10;          &lt;Loading /&gt;&#13;&#10;        &lt;/el-icon&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;!-- 卡片信息 --&gt;&#13;&#10;    &lt;div class=&quot;card-footer&quot;&gt;&#13;&#10;      &lt;div class=&quot;filename-container&quot;&gt;&#13;&#10;        &lt;el-tooltip&#13;&#10;          :content=&quot;title&quot;&#13;&#10;          placement=&quot;top&quot;&#13;&#10;          :disabled=&quot;!isTitleTruncated&quot;&#13;&#10;        &gt;&#13;&#10;          &lt;span class=&quot;filename&quot; ref=&quot;filenameRef&quot;&gt;{{ title }}&lt;/span&gt;&#13;&#10;        &lt;/el-tooltip&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;el-checkbox&#13;&#10;        :model-value=&quot;checked&quot;&#13;&#10;        @change=&quot;handleCheck&quot;&#13;&#10;        @click.stop&#13;&#10;        class=&quot;card-checkbox&quot;&#13;&#10;        :size=&quot;checkboxSize&quot;&#13;&#10;      /&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#13;&#10;import { ref, computed, onMounted, nextTick } from 'vue'&#13;&#10;import { Picture, CircleCheck, Loading } from '@element-plus/icons-vue'&#13;&#10;import { DeviceType } from '@/utils'&#13;&#10;&#13;&#10;interface Props {&#13;&#10;  title: string&#13;&#10;  url: string&#13;&#10;  checked?: boolean&#13;&#10;  deviceType?: DeviceType&#13;&#10;}&#13;&#10;&#13;&#10;interface Emits {&#13;&#10;  (e: 'click'): void&#13;&#10;  (e: 'check', value: boolean): void&#13;&#10;}&#13;&#10;&#13;&#10;const props = withDefaults(defineProps&lt;Props&gt;(), {&#13;&#10;  checked: false,&#13;&#10;  deviceType: DeviceType.DESKTOP&#13;&#10;})&#13;&#10;&#13;&#10;const emit = defineEmits&lt;Emits&gt;()&#13;&#10;&#13;&#10;const loading = ref(false)&#13;&#10;const imageLoaded = ref(false)&#13;&#10;const imageError = ref(false)&#13;&#10;const isTouchDevice = ref(false)&#13;&#10;const touchStartTime = ref(0)&#13;&#10;const filenameRef = ref&lt;HTMLElement&gt;()&#13;&#10;const isTitleTruncated = ref(false)&#13;&#10;&#13;&#10;// 计算属性&#13;&#10;const cardClass = computed(() =&gt; ({&#13;&#10;  [`card-${props.deviceType}`]: true,&#13;&#10;  'card-checked': props.checked,&#13;&#10;  'card-loading': loading.value,&#13;&#10;  'card-touch': isTouchDevice.value&#13;&#10;}))&#13;&#10;&#13;&#10;const checkboxSize = computed(() =&gt; {&#13;&#10;  switch (props.deviceType) {&#13;&#10;    case DeviceType.MOBILE:&#13;&#10;      return 'large'&#13;&#10;    case DeviceType.TABLET:&#13;&#10;      return 'default'&#13;&#10;    default:&#13;&#10;      return 'small'&#13;&#10;  }&#13;&#10;})&#13;&#10;&#13;&#10;// 事件处理&#13;&#10;const handleClick = () =&gt; {&#13;&#10;  emit('click')&#13;&#10;}&#13;&#10;&#13;&#10;const handleCheck = (value: boolean) =&gt; {&#13;&#10;  emit('check', value)&#13;&#10;}&#13;&#10;&#13;&#10;const handleTouchStart = () =&gt; {&#13;&#10;  touchStartTime.value = Date.now()&#13;&#10;}&#13;&#10;&#13;&#10;const handleTouchEnd = () =&gt; {&#13;&#10;  const touchDuration = Date.now() - touchStartTime.value&#13;&#10;  if (touchDuration &lt; 200) {&#13;&#10;    // 短按视为点击&#13;&#10;    handleClick()&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const handleImageLoad = () =&gt; {&#13;&#10;  loading.value = false&#13;&#10;  imageLoaded.value = true&#13;&#10;  imageError.value = false&#13;&#10;}&#13;&#10;&#13;&#10;const handleImageError = () =&gt; {&#13;&#10;  loading.value = false&#13;&#10;  imageLoaded.value = false&#13;&#10;  imageError.value = true&#13;&#10;}&#13;&#10;&#13;&#10;// 检查标题是否被截断&#13;&#10;const checkTitleTruncation = async () =&gt; {&#13;&#10;  await nextTick()&#13;&#10;  if (filenameRef.value) {&#13;&#10;    isTitleTruncated.value = filenameRef.value.scrollWidth &gt; filenameRef.value.clientWidth&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;// 生命周期&#13;&#10;onMounted(() =&gt; {&#13;&#10;  isTouchDevice.value = 'ontouchstart' in window&#13;&#10;  loading.value = true&#13;&#10;  checkTitleTruncation()&#13;&#10;})&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;.image-card {&#13;&#10;  position: relative;&#13;&#10;  border-radius: 12px;&#13;&#10;  overflow: hidden;&#13;&#10;  background: var(--el-bg-color);&#13;&#10;  border: 2px solid transparent;&#13;&#10;  transition: all 0.3s ease;&#13;&#10;  cursor: pointer;&#13;&#10;  user-select: none;&#13;&#10;}&#13;&#10;&#13;&#10;.image-card:hover {&#13;&#10;  transform: translateY(-2px);&#13;&#10;  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);&#13;&#10;  border-color: var(--el-color-primary-light-7);&#13;&#10;}&#13;&#10;&#13;&#10;.card-checked {&#13;&#10;  border-color: var(--el-color-primary);&#13;&#10;  box-shadow: 0 0 0 2px var(--el-color-primary-light-8);&#13;&#10;}&#13;&#10;&#13;&#10;.card-loading {&#13;&#10;  pointer-events: none;&#13;&#10;}&#13;&#10;&#13;&#10;/* 设备特定样式 */&#13;&#10;.card-mobile {&#13;&#10;  border-radius: 8px;&#13;&#10;  font-size: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-mobile:hover {&#13;&#10;  transform: none;&#13;&#10;}&#13;&#10;&#13;&#10;.card-tablet {&#13;&#10;  border-radius: 10px;&#13;&#10;  font-size: 13px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-desktop {&#13;&#10;  border-radius: 12px;&#13;&#10;  font-size: 14px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-touch {&#13;&#10;  -webkit-tap-highlight-color: transparent;&#13;&#10;}&#13;&#10;&#13;&#10;/* 图片容器 */&#13;&#10;.image-container {&#13;&#10;  position: relative;&#13;&#10;  width: 100%;&#13;&#10;  height: 280px; /* 增加桌面端高度到280px */&#13;&#10;  overflow: hidden;&#13;&#10;}&#13;&#10;&#13;&#10;/* 设备特定的图片容器高度 */&#13;&#10;.card-mobile .image-container {&#13;&#10;  height: 200px; /* 移动端高度增加到200px */&#13;&#10;}&#13;&#10;&#13;&#10;.card-tablet .image-container {&#13;&#10;  height: 240px; /* 平板端高度增加到240px */&#13;&#10;}&#13;&#10;&#13;&#10;.card-desktop .image-container {&#13;&#10;  height: 280px; /* 桌面端高度280px，显示更完整的图片 */&#13;&#10;}&#13;&#10;&#13;&#10;.card-image {&#13;&#10;  width: 100%;&#13;&#10;  height: 100%;&#13;&#10;  object-fit: cover;&#13;&#10;  transition: transform 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.image-card:hover .card-image {&#13;&#10;  transform: scale(1.05);&#13;&#10;}&#13;&#10;&#13;&#10;.card-mobile:hover .card-image {&#13;&#10;  transform: none;&#13;&#10;}&#13;&#10;&#13;&#10;/* 占位符和错误状态 */&#13;&#10;.image-placeholder,&#13;&#10;.image-error {&#13;&#10;  width: 100%;&#13;&#10;  height: 100%;&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  background: var(--el-fill-color-light);&#13;&#10;  color: var(--el-text-color-placeholder);&#13;&#10;}&#13;&#10;&#13;&#10;.placeholder-icon,&#13;&#10;.error-icon {&#13;&#10;  font-size: 32px;&#13;&#10;  margin-bottom: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-mobile .placeholder-icon,&#13;&#10;.card-mobile .error-icon {&#13;&#10;  font-size: 24px;&#13;&#10;  margin-bottom: 4px;&#13;&#10;}&#13;&#10;&#13;&#10;.error-text {&#13;&#10;  font-size: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;/* 选择覆盖层 */&#13;&#10;.selection-overlay {&#13;&#10;  position: absolute;&#13;&#10;  top: 0;&#13;&#10;  left: 0;&#13;&#10;  right: 0;&#13;&#10;  bottom: 0;&#13;&#10;  background: rgba(64, 158, 255, 0.3);&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  backdrop-filter: blur(2px);&#13;&#10;}&#13;&#10;&#13;&#10;.selection-icon {&#13;&#10;  font-size: 32px;&#13;&#10;  color: var(--el-color-primary);&#13;&#10;  background: white;&#13;&#10;  border-radius: 50%;&#13;&#10;  padding: 4px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-mobile .selection-icon {&#13;&#10;  font-size: 24px;&#13;&#10;  padding: 2px;&#13;&#10;}&#13;&#10;&#13;&#10;/* 加载覆盖层 */&#13;&#10;.loading-overlay {&#13;&#10;  position: absolute;&#13;&#10;  top: 0;&#13;&#10;  left: 0;&#13;&#10;  right: 0;&#13;&#10;  bottom: 0;&#13;&#10;  background: rgba(255, 255, 255, 0.8);&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  backdrop-filter: blur(2px);&#13;&#10;}&#13;&#10;&#13;&#10;.loading-icon {&#13;&#10;  font-size: 24px;&#13;&#10;  color: var(--el-color-primary);&#13;&#10;}&#13;&#10;&#13;&#10;/* 卡片底部 */&#13;&#10;.card-footer {&#13;&#10;  padding: 12px;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 8px;&#13;&#10;  background: var(--el-bg-color);&#13;&#10;  border-top: 1px solid var(--el-border-color-lighter);&#13;&#10;}&#13;&#10;&#13;&#10;.card-mobile .card-footer {&#13;&#10;  padding: 8px;&#13;&#10;  gap: 6px;&#13;&#10;}&#13;&#10;&#13;&#10;.card-tablet .card-footer {&#13;&#10;  padding: 10px;&#13;&#10;  gap: 7px;&#13;&#10;}&#13;&#10;&#13;&#10;.filename-container {&#13;&#10;  flex: 1;&#13;&#10;  min-width: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.filename {&#13;&#10;  display: block;&#13;&#10;  font-weight: 500;&#13;&#10;  color: var(--el-text-color-primary);&#13;&#10;  white-space: nowrap;&#13;&#10;  overflow: hidden;&#13;&#10;  text-overflow: ellipsis;&#13;&#10;  line-height: 1.4;&#13;&#10;}&#13;&#10;&#13;&#10;.card-checkbox {&#13;&#10;  flex-shrink: 0;&#13;&#10;}&#13;&#10;&#13;&#10;/* 响应式调整 */&#13;&#10;@media (max-width: 480px) {&#13;&#10;  .image-card {&#13;&#10;    border-radius: 6px;&#13;&#10;  }&#13;&#10;&#13;&#10;  .card-footer {&#13;&#10;    padding: 6px;&#13;&#10;  }&#13;&#10;&#13;&#10;  .filename {&#13;&#10;    font-size: 11px;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (prefers-reduced-motion: reduce) {&#13;&#10;  .image-card,&#13;&#10;  .card-image {&#13;&#10;    transition: none;&#13;&#10;  }&#13;&#10;&#13;&#10;  .image-card:hover {&#13;&#10;    transform: none;&#13;&#10;  }&#13;&#10;&#13;&#10;  .image-card:hover .card-image {&#13;&#10;    transform: none;&#13;&#10;  }&#13;&#10;}&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/ImageGrid.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ImageGrid.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-grid-wrapper&quot; ref=&quot;containerRef&quot;&gt;&#10;    &lt;!-- 加载状态 --&gt;&#10;    &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;loading-container&quot;&gt;&#10;      &lt;el-skeleton :rows=&quot;6&quot; animated /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 空状态 --&gt;&#10;    &lt;el-empty&#10;      v-else-if=&quot;!imageStore.loading &amp;&amp; imageStore.images.length === 0&quot;&#10;      description=&quot;暂无图片数据&quot;&#10;      class=&quot;empty-state&quot;&#10;    &gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;imageStore.query&quot;&gt;刷新&lt;/el-button&gt;&#10;    &lt;/el-empty&gt;&#10;&#10;    &lt;!-- 图片网格 --&gt;&#10;    &lt;div v-else class=&quot;image-grid&quot; :style=&quot;gridStyle&quot;&gt;&#10;      &lt;ImageCard&#10;        v-for=&quot;item in imageStore.images&quot;&#10;        :key=&quot;item.hash&quot;&#10;        :title=&quot;item.filename&quot;&#10;        :url=&quot;imageStore.getImageThumbnailUrl(item.hash)&quot;&#10;        :checked=&quot;selectedHashes.has(item.hash)&quot;&#10;        :device-type=&quot;deviceType&quot;&#10;        @click=&quot;() =&gt; openViewer(item)&quot;&#10;        @check=&quot;(val) =&gt; toggleSelect(item, val)&quot;&#10;        class=&quot;grid-item&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 图片预览器 --&gt;&#10;    &lt;ImageViewer&#10;      v-if=&quot;selectedImage&quot;&#10;      :image=&quot;selectedImage&quot;&#10;      @close=&quot;closeViewer&quot;&#10;    /&gt;&#10;&#10;    &lt;!-- 响应式工具栏 --&gt;&#10;    &lt;div v-if=&quot;imageStore.images.length &gt; 0&quot; class=&quot;floating-toolbar&quot; :class=&quot;toolbarClass&quot;&gt;&#10;      &lt;!-- 批量操作按钮 --&gt;&#10;      &lt;div class=&quot;toolbar-actions&quot;&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          :type=&quot;checkAll ? 'primary' : 'default'&quot;&#10;          @click=&quot;toggleCheckAll(!checkAll)&quot;&#10;          :icon=&quot;checkAll ? 'CircleCheck' : 'Circle'&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : (checkAll ? '取消全选' : '全选') }}&#10;        &lt;/el-button&gt;&#10;&#10;        &lt;el-button&#10;          type=&quot;primary&quot;&#10;          size=&quot;small&quot;&#10;          :disabled=&quot;selectedImages.length === 0&quot;&#10;          @click=&quot;handleBatchDownload&quot;&#10;          :icon=&quot;Download&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : '下载' }}&#10;          &lt;span v-if=&quot;selectedImages.length &gt; 0&quot; class=&quot;count-badge&quot;&gt;&#10;            {{ selectedImages.length }}&#10;          &lt;/span&gt;&#10;        &lt;/el-button&gt;&#10;&#10;        &lt;el-button&#10;          type=&quot;danger&quot;&#10;          size=&quot;small&quot;&#10;          :disabled=&quot;selectedImages.length === 0&quot;&#10;          @click=&quot;confirmBatchDelete&quot;&#10;          :icon=&quot;Delete&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : '删除' }}&#10;        &lt;/el-button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 分页器 --&gt;&#10;      &lt;div class=&quot;toolbar-pagination&quot;&gt;&#10;        &lt;el-pagination&#10;          v-model:current-page=&quot;imageStore.params.page&quot;&#10;          v-model:page-size=&quot;imageStore.params.pageSize&quot;&#10;          :size=&quot;paginationSize&quot;&#10;          :background=&quot;!isMobile&quot;&#10;          :layout=&quot;paginationLayout&quot;&#10;          :total=&quot;imageStore.totalElements&quot;&#10;          :page-sizes=&quot;pageSizeOptions&quot;&#10;          @size-change=&quot;handlePageSizeChange&quot;&#10;          @current-change=&quot;handlePageChange&quot;&#10;          :hide-on-single-page=&quot;false&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, onUnmounted } from 'vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { Download, Delete } from '@element-plus/icons-vue'&#10;import { useImageStore } from '@/stores/image'&#10;import { getDeviceType, getResponsiveColumns, debounce, DeviceType } from '@/utils'&#10;import ImageCard from './ImageCard.vue'&#10;import ImageViewer from './ImageViewer.vue'&#10;import { deleteImage, getImageFile, getImageFileZip, type Image } from '@/api'&#10;&#10;const imageStore = useImageStore()&#10;const containerRef = ref&lt;HTMLElement&gt;()&#10;const selectedImage = ref&lt;Image | null&gt;(null)&#10;const selectedHashes = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;const deviceType = ref&lt;DeviceType&gt;(getDeviceType())&#10;const columnsCount = ref(getResponsiveColumns())&#10;&#10;// 计算属性&#10;const selectedImages = computed(() =&gt;&#10;  imageStore.images.filter((img) =&gt; selectedHashes.value.has(img.hash))&#10;)&#10;&#10;const checkAll = computed({&#10;  get() {&#10;    return imageStore.images.length &gt; 0 &amp;&amp; selectedHashes.value.size === imageStore.images.length&#10;  },&#10;  set(val: boolean) {&#10;    toggleCheckAll(val)&#10;  }&#10;})&#10;&#10;const isMobile = computed(() =&gt; deviceType.value === DeviceType.MOBILE)&#10;const isTablet = computed(() =&gt; deviceType.value === DeviceType.TABLET)&#10;&#10;const gridStyle = computed(() =&gt; ({&#10;  display: 'grid',&#10;  gridTemplateColumns: `repeat(${columnsCount.value}, 1fr)`,&#10;  gap: isMobile.value ? '8px' : isTablet.value ? '12px' : '16px',&#10;  padding: isMobile.value ? '8px' : isTablet.value ? '12px' : '16px'&#10;}))&#10;&#10;const toolbarClass = computed(() =&gt; ({&#10;  'toolbar-mobile': isMobile.value,&#10;  'toolbar-tablet': isTablet.value,&#10;  'toolbar-desktop': deviceType.value === DeviceType.DESKTOP&#10;}))&#10;&#10;const paginationSize = computed(() =&gt;&#10;  isMobile.value ? 'small' : 'default'&#10;)&#10;&#10;const paginationLayout = computed(() =&gt;&#10;  isMobile.value&#10;    ? 'prev, pager, next'&#10;    : isTablet.value&#10;      ? 'total, prev, pager, next'&#10;      : 'total, sizes, prev, pager, next, jumper'&#10;)&#10;&#10;const pageSizeOptions = computed(() =&gt;&#10;  isMobile.value ? [20, 50, 100] : [20, 50, 100, 200]&#10;)&#10;&#10;// 响应式处理&#10;const handleResize = debounce(() =&gt; {&#10;  deviceType.value = getDeviceType()&#10;  columnsCount.value = getResponsiveColumns()&#10;}, 300)&#10;&#10;// 生命周期&#10;onMounted(async () =&gt; {&#10;  await imageStore.query()&#10;  window.addEventListener('resize', handleResize)&#10;})&#10;&#10;onUnmounted(() =&gt; {&#10;  window.removeEventListener('resize', handleResize)&#10;})&#10;&#10;// 图片预览&#10;const openViewer = (image: Image) =&gt; {&#10;  selectedImage.value = image&#10;}&#10;&#10;const closeViewer = () =&gt; {&#10;  selectedImage.value = null&#10;}&#10;&#10;// 选择操作&#10;function toggleCheckAll(val: boolean) {&#10;  if (val) {&#10;    selectedHashes.value = new Set(imageStore.images.map((img) =&gt; img.hash))&#10;  } else {&#10;    selectedHashes.value.clear()&#10;  }&#10;}&#10;&#10;function toggleSelect(image: Image, checked: boolean) {&#10;  if (checked) {&#10;    selectedHashes.value.add(image.hash)&#10;  } else {&#10;    selectedHashes.value.delete(image.hash)&#10;  }&#10;}&#10;&#10;// 分页操作&#10;async function handlePageChange(_page: number) {&#10;  selectedHashes.value.clear()&#10;  await imageStore.query()&#10;}&#10;&#10;async function handlePageSizeChange(_size: number) {&#10;  selectedHashes.value.clear()&#10;  imageStore.params.page = 1&#10;  await imageStore.query()&#10;}&#10;&#10;// 批量操作&#10;async function handleBatchDownload() {&#10;  const hashes = Array.from(selectedHashes.value)&#10;  if (hashes.length === 0) {&#10;    ElMessage.warning('请选择要下载的图片')&#10;    return&#10;  }&#10;&#10;  try {&#10;    const { blob, filename } = hashes.length === 1&#10;      ? await getImageFile(hashes[0])&#10;      : await getImageFileZip(hashes)&#10;&#10;    const url = window.URL.createObjectURL(blob)&#10;    const link = document.createElement('a')&#10;    link.href = url&#10;    link.download = filename&#10;    document.body.appendChild(link)&#10;    link.click()&#10;    document.body.removeChild(link)&#10;    window.URL.revokeObjectURL(url)&#10;&#10;    ElMessage.success(`已开始下载 ${hashes.length} 张图片`)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;    ElMessage.error('下载失败，请重试')&#10;  }&#10;}&#10;&#10;async function handleBatchDelete() {&#10;  const hashes = Array.from(selectedHashes.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    await Promise.all(hashes.map(hash =&gt; deleteImage(hash)))&#10;&#10;    imageStore.images = imageStore.images.filter(&#10;      (img) =&gt; !selectedHashes.value.has(img.hash)&#10;    )&#10;    selectedHashes.value.clear()&#10;&#10;    ElMessage.success(`已删�� ${hashes.length} 张图片`)&#10;&#10;    // 如果当前页没有数据了，跳转到上一页&#10;    if (imageStore.images.length === 0 &amp;&amp; imageStore.params.page &gt; 1) {&#10;      imageStore.params.page--&#10;      await imageStore.query()&#10;    }&#10;  } catch (error) {&#10;    console.error('删除失败:', error)&#10;    ElMessage.error('删除失败，请重试')&#10;  }&#10;}&#10;&#10;function confirmBatchDelete() {&#10;  const count = selectedImages.value.length&#10;  ElMessageBox.confirm(&#10;    `确定要删除这 ${count} 张图片吗？此操作不可撤销。`,&#10;    '确认删除',&#10;    {&#10;      confirmButtonText: '确定删除',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    handleBatchDelete()&#10;  }).catch(() =&gt; {&#10;    ElMessage.info('已取消删除')&#10;  })&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-grid-wrapper {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  background: var(--el-bg-color-page);&#10;}&#10;&#10;.loading-container {&#10;  padding: 20px;&#10;}&#10;&#10;.empty-state {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.image-grid {&#10;  flex: 1;&#10;  overflow-y: auto;&#10;}&#10;&#10;.grid-item {&#10;  width: 100%;&#10;}&#10;&#10;.floating-toolbar {&#10;  position: sticky;&#10;  bottom: 0;&#10;  background: var(--el-bg-color-overlay);&#10;  backdrop-filter: blur(10px);&#10;  border-top: 1px solid var(--el-border-color-light);&#10;  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);&#10;  z-index: 100;&#10;  padding: 12px 16px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;}&#10;&#10;.floating-toolbar.toolbar-mobile {&#10;  padding: 8px 12px;&#10;}&#10;&#10;.toolbar-actions {&#10;  display: flex;&#10;  gap: 8px;&#10;  justify-content: center;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.toolbar-pagination {&#10;  display: flex;&#10;  justify-content: center;&#10;}&#10;&#10;.count-badge {&#10;  background: var(--el-color-danger);&#10;  color: white;&#10;  border-radius: 10px;&#10;  padding: 2px 6px;&#10;  font-size: 12px;&#10;  margin-left: 4px;&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 768px) {&#10;  .toolbar-actions {&#10;    gap: 4px;&#10;  }&#10;&#10;  .toolbar-actions :deep(.el-button) {&#10;    flex: 1;&#10;    min-width: 60px;&#10;  }&#10;}&#10;&#10;@media (min-width: 769px) and (max-width: 1024px) {&#10;  .floating-toolbar {&#10;    flex-direction: row;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;  }&#10;&#10;  .toolbar-pagination {&#10;    justify-content: flex-end;&#10;  }&#10;}&#10;&#10;@media (min-width: 1025px) {&#10;  .floating-toolbar {&#10;    flex-direction: row;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;  }&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-grid-wrapper&quot; ref=&quot;containerRef&quot;&gt;&#10;    &lt;!-- 加载状态 --&gt;&#10;    &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;loading-container&quot;&gt;&#10;      &lt;el-skeleton :rows=&quot;6&quot; animated /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 空状态 --&gt;&#10;    &lt;el-empty&#10;      v-else-if=&quot;!imageStore.loading &amp;&amp; imageStore.images.length === 0&quot;&#10;      description=&quot;暂无图片数据&quot;&#10;      class=&quot;empty-state&quot;&#10;    &gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;imageStore.query&quot;&gt;刷新&lt;/el-button&gt;&#10;    &lt;/el-empty&gt;&#10;&#10;    &lt;!-- 图片网格 --&gt;&#10;    &lt;div v-else class=&quot;image-grid&quot; :style=&quot;gridStyle&quot;&gt;&#10;      &lt;ImageCard&#10;        v-for=&quot;item in imageStore.images&quot;&#10;        :key=&quot;item.hash&quot;&#10;        :title=&quot;item.filename&quot;&#10;        :url=&quot;imageStore.getImageThumbnailUrl(item.hash)&quot;&#10;        :checked=&quot;selectedHashes.has(item.hash)&quot;&#10;        :device-type=&quot;deviceType&quot;&#10;        @click=&quot;() =&gt; openViewer(item)&quot;&#10;        @check=&quot;(val) =&gt; toggleSelect(item, val)&quot;&#10;        class=&quot;grid-item&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 图片预览器 --&gt;&#10;    &lt;ImageViewer&#10;      v-if=&quot;selectedImage&quot;&#10;      :image=&quot;selectedImage&quot;&#10;      @close=&quot;closeViewer&quot;&#10;    /&gt;&#10;&#10;    &lt;!-- 响应式工具栏 --&gt;&#10;    &lt;div v-if=&quot;imageStore.images.length &gt; 0&quot; class=&quot;floating-toolbar&quot; :class=&quot;toolbarClass&quot;&gt;&#10;      &lt;!-- 批量操作按钮 --&gt;&#10;      &lt;div class=&quot;toolbar-actions&quot;&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          :type=&quot;checkAll ? 'primary' : 'default'&quot;&#10;          @click=&quot;toggleCheckAll(!checkAll)&quot;&#10;          :icon=&quot;checkAll ? 'CircleCheck' : 'Circle'&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : (checkAll ? '取消全选' : '全选') }}&#10;        &lt;/el-button&gt;&#10;&#10;        &lt;el-button&#10;          type=&quot;primary&quot;&#10;          size=&quot;small&quot;&#10;          :disabled=&quot;selectedImages.length === 0&quot;&#10;          @click=&quot;handleBatchDownload&quot;&#10;          :icon=&quot;Download&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : '下载' }}&#10;          &lt;span v-if=&quot;selectedImages.length &gt; 0&quot; class=&quot;count-badge&quot;&gt;&#10;            {{ selectedImages.length }}&#10;          &lt;/span&gt;&#10;        &lt;/el-button&gt;&#10;&#10;        &lt;el-button&#10;          type=&quot;danger&quot;&#10;          size=&quot;small&quot;&#10;          :disabled=&quot;selectedImages.length === 0&quot;&#10;          @click=&quot;confirmBatchDelete&quot;&#10;          :icon=&quot;Delete&quot;&#10;        &gt;&#10;          {{ isMobile ? '' : '删除' }}&#10;        &lt;/el-button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 分页器 --&gt;&#10;      &lt;div class=&quot;toolbar-pagination&quot;&gt;&#10;        &lt;el-pagination&#10;          v-model:current-page=&quot;imageStore.params.page&quot;&#10;          v-model:page-size=&quot;imageStore.params.pageSize&quot;&#10;          :size=&quot;paginationSize&quot;&#10;          :background=&quot;!isMobile&quot;&#10;          :layout=&quot;paginationLayout&quot;&#10;          :total=&quot;imageStore.totalElements&quot;&#10;          :page-sizes=&quot;pageSizeOptions&quot;&#10;          @size-change=&quot;handlePageSizeChange&quot;&#10;          @current-change=&quot;handlePageChange&quot;&#10;          :hide-on-single-page=&quot;false&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, onUnmounted } from 'vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { Download, Delete } from '@element-plus/icons-vue'&#10;import { useImageStore } from '@/stores/image'&#10;import { getDeviceType, getResponsiveColumns, debounce, DeviceType } from '@/utils'&#10;import ImageCard from './ImageCard.vue'&#10;import ImageViewer from './ImageViewer.vue'&#10;import { deleteImage, getImageFile, getImageFileZip, type Image } from '@/api'&#10;&#10;const imageStore = useImageStore()&#10;const containerRef = ref&lt;HTMLElement&gt;()&#10;const selectedImage = ref&lt;Image | null&gt;(null)&#10;const selectedHashes = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;const deviceType = ref&lt;DeviceType&gt;(getDeviceType())&#10;const columnsCount = ref(getResponsiveColumns())&#10;&#10;// 计算属性&#10;const selectedImages = computed(() =&gt;&#10;  imageStore.images.filter((img) =&gt; selectedHashes.value.has(img.hash))&#10;)&#10;&#10;const checkAll = computed({&#10;  get() {&#10;    return imageStore.images.length &gt; 0 &amp;&amp; selectedHashes.value.size === imageStore.images.length&#10;  },&#10;  set(val: boolean) {&#10;    toggleCheckAll(val)&#10;  }&#10;})&#10;&#10;const isMobile = computed(() =&gt; deviceType.value === DeviceType.MOBILE)&#10;const isTablet = computed(() =&gt; deviceType.value === DeviceType.TABLET)&#10;&#10;const gridStyle = computed(() =&gt; ({&#10;  display: 'grid',&#10;  gridTemplateColumns: `repeat(${columnsCount.value}, 1fr)`,&#10;  gap: isMobile.value ? '8px' : isTablet.value ? '12px' : '16px',&#10;  padding: isMobile.value ? '8px' : isTablet.value ? '12px' : '16px'&#10;}))&#10;&#10;const toolbarClass = computed(() =&gt; ({&#10;  'toolbar-mobile': isMobile.value,&#10;  'toolbar-tablet': isTablet.value,&#10;  'toolbar-desktop': deviceType.value === DeviceType.DESKTOP&#10;}))&#10;&#10;const paginationSize = computed(() =&gt;&#10;  isMobile.value ? 'small' : 'default'&#10;)&#10;&#10;const paginationLayout = computed(() =&gt;&#10;  isMobile.value&#10;    ? 'prev, pager, next'&#10;    : isTablet.value&#10;      ? 'total, prev, pager, next'&#10;      : 'total, sizes, prev, pager, next, jumper'&#10;)&#10;&#10;const pageSizeOptions = computed(() =&gt;&#10;  isMobile.value ? [20, 50, 100] : [20, 50, 100, 200]&#10;)&#10;&#10;// 响应式处理&#10;const handleResize = debounce(() =&gt; {&#10;  deviceType.value = getDeviceType()&#10;  columnsCount.value = getResponsiveColumns()&#10;}, 300)&#10;&#10;// 生命周期&#10;onMounted(async () =&gt; {&#10;  await imageStore.query()&#10;  window.addEventListener('resize', handleResize)&#10;})&#10;&#10;onUnmounted(() =&gt; {&#10;  window.removeEventListener('resize', handleResize)&#10;})&#10;&#10;// 图片预览&#10;const openViewer = (image: Image) =&gt; {&#10;  selectedImage.value = image&#10;}&#10;&#10;const closeViewer = () =&gt; {&#10;  selectedImage.value = null&#10;}&#10;&#10;// 选择操作&#10;function toggleCheckAll(val: boolean) {&#10;  if (val) {&#10;    selectedHashes.value = new Set(imageStore.images.map((img) =&gt; img.hash))&#10;  } else {&#10;    selectedHashes.value.clear()&#10;  }&#10;}&#10;&#10;function toggleSelect(image: Image, checked: boolean) {&#10;  if (checked) {&#10;    selectedHashes.value.add(image.hash)&#10;  } else {&#10;    selectedHashes.value.delete(image.hash)&#10;  }&#10;}&#10;&#10;// 分页操作&#10;async function handlePageChange(_page: number) {&#10;  selectedHashes.value.clear()&#10;  await imageStore.query()&#10;}&#10;&#10;async function handlePageSizeChange(_size: number) {&#10;  selectedHashes.value.clear()&#10;  imageStore.params.page = 1&#10;  await imageStore.query()&#10;}&#10;&#10;// 批量操作&#10;async function handleBatchDownload() {&#10;  const hashes = Array.from(selectedHashes.value)&#10;  if (hashes.length === 0) {&#10;    ElMessage.warning('请选择要下载的图片')&#10;    return&#10;  }&#10;&#10;  try {&#10;    const { blob, filename } = hashes.length === 1&#10;      ? await getImageFile(hashes[0])&#10;      : await getImageFileZip(hashes)&#10;&#10;    const url = window.URL.createObjectURL(blob)&#10;    const link = document.createElement('a')&#10;    link.href = url&#10;    link.download = filename&#10;    document.body.appendChild(link)&#10;    link.click()&#10;    document.body.removeChild(link)&#10;    window.URL.revokeObjectURL(url)&#10;&#10;    ElMessage.success(`已开始下载 ${hashes.length} 张图片`)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;    ElMessage.error('下载失败，请重试')&#10;  }&#10;}&#10;&#10;async function handleBatchDelete() {&#10;  const hashes = Array.from(selectedHashes.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    await Promise.all(hashes.map(hash =&gt; deleteImage(hash)))&#10;&#10;    imageStore.images = imageStore.images.filter(&#10;      (img) =&gt; !selectedHashes.value.has(img.hash)&#10;    )&#10;    selectedHashes.value.clear()&#10;&#10;    ElMessage.success(`已删�� ${hashes.length} 张图片`)&#10;&#10;    // 如果当前页没有数据了，跳转到上一页&#10;    if (imageStore.images.length === 0 &amp;&amp; imageStore.params.page &gt; 1) {&#10;      imageStore.params.page--&#10;      await imageStore.query()&#10;    }&#10;  } catch (error) {&#10;    console.error('删除失败:', error)&#10;    ElMessage.error('删除失败，请重试')&#10;  }&#10;}&#10;&#10;function confirmBatchDelete() {&#10;  const count = selectedImages.value.length&#10;  ElMessageBox.confirm(&#10;    `确定要删除这 ${count} 张图片吗？此操作不可撤销。`,&#10;    '确认删除',&#10;    {&#10;      confirmButtonText: '确定删除',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    handleBatchDelete()&#10;  }).catch(() =&gt; {&#10;    ElMessage.info('已取消删除')&#10;  })&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-grid-wrapper {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  background: var(--el-bg-color-page);&#10;  overflow: hidden; /* 防止整体容器滚动 */&#10;}&#10;&#10;.loading-container {&#10;  padding: 20px;&#10;}&#10;&#10;.empty-state {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.image-grid {&#10;  flex: 1;&#10;  overflow-y: auto;&#10;  overflow-x: hidden;&#10;  /* 自定义滚动条样式 */&#10;  scrollbar-width: thin;&#10;  scrollbar-color: var(--el-border-color-dark) transparent;&#10;}&#10;&#10;/* Webkit 浏览器滚动条样式 */&#10;.image-grid::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;.image-grid::-webkit-scrollbar-track {&#10;  background: transparent;&#10;}&#10;&#10;.image-grid::-webkit-scrollbar-thumb {&#10;  background-color: var(--el-border-color-dark);&#10;  border-radius: 4px;&#10;  transition: background-color 0.3s ease;&#10;}&#10;&#10;.image-grid::-webkit-scrollbar-thumb:hover {&#10;  background-color: var(--el-border-color-darker);&#10;}&#10;&#10;.grid-item {&#10;  width: 100%;&#10;  /* 移除 aspect-ratio: 1; 让 ImageCard 使用自己的固定高度 */&#10;}&#10;&#10;.floating-toolbar {&#10;  position: sticky;&#10;  bottom: 0;&#10;  background: var(--el-bg-color-overlay);&#10;  backdrop-filter: blur(10px);&#10;  border-top: 1px solid var(--el-border-color-light);&#10;  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);&#10;  z-index: 100;&#10;  padding: 12px 16px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;}&#10;&#10;.floating-toolbar.toolbar-mobile {&#10;  padding: 8px 12px;&#10;}&#10;&#10;.toolbar-actions {&#10;  display: flex;&#10;  gap: 8px;&#10;  justify-content: center;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.toolbar-pagination {&#10;  display: flex;&#10;  justify-content: center;&#10;}&#10;&#10;.count-badge {&#10;  background: var(--el-color-danger);&#10;  color: white;&#10;  border-radius: 10px;&#10;  padding: 2px 6px;&#10;  font-size: 12px;&#10;  margin-left: 4px;&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 768px) {&#10;  .toolbar-actions {&#10;    gap: 4px;&#10;  }&#10;&#10;  .toolbar-actions :deep(.el-button) {&#10;    flex: 1;&#10;    min-width: 60px;&#10;  }&#10;}&#10;&#10;@media (min-width: 769px) and (max-width: 1024px) {&#10;  .floating-toolbar {&#10;    flex-direction: row;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;  }&#10;&#10;  .toolbar-pagination {&#10;    justify-content: flex-end;&#10;  }&#10;}&#10;&#10;@media (min-width: 1025px) {&#10;  .floating-toolbar {&#10;    flex-direction: row;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;  }&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/dialogs/SettingsDialog.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/dialogs/SettingsDialog.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;el-dialog&#10;    v-model=&quot;visible&quot;&#10;    title=&quot;应用设置&quot;&#10;    width=&quot;500px&quot;&#10;    :before-close=&quot;handleClose&quot;&#10;    class=&quot;settings-dialog&quot;&#10;  &gt;&#10;    &lt;el-form&#10;      ref=&quot;formRef&quot;&#10;      :model=&quot;settingsForm&quot;&#10;      :rules=&quot;formRules&quot;&#10;      label-position=&quot;top&quot;&#10;      class=&quot;settings-form&quot;&#10;    &gt;&#10;      &lt;!-- 标签服务器配置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;标签服务器配置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;配置AI标签识别服务器地址&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item&#10;          label=&quot;标签服务器地址&quot;&#10;          prop=&quot;taggerUrl&quot;&#10;          class=&quot;form-item&quot;&#10;        &gt;&#10;          &lt;el-input&#10;            v-model=&quot;settingsForm.taggerUrl&quot;&#10;            placeholder=&quot;http://localhost:5000&quot;&#10;            :prefix-icon=&quot;Link&quot;&#10;            clearable&#10;          &gt;&#10;            &lt;template #append&gt;&#10;              &lt;el-button&#10;                :icon=&quot;Connection&quot;&#10;                @click=&quot;testConnection&quot;&#10;                :loading=&quot;testing&quot;&#10;                title=&quot;测试连接&quot;&#10;              &gt;&#10;                测试&#10;              &lt;/el-button&gt;&#10;            &lt;/template&gt;&#10;          &lt;/el-input&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            用于自动识别图片标签的AI服务地址，留空则禁用自动标签功能&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 显示设置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;显示设置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;自定义界面显示选项&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item label=&quot;默认网格大小&quot; class=&quot;form-item&quot;&gt;&#10;          &lt;el-slider&#10;            v-model=&quot;settingsForm.defaultGridSize&quot;&#10;            :min=&quot;2&quot;&#10;            :max=&quot;8&quot;&#10;            :step=&quot;1&quot;&#10;            show-input&#10;            :show-input-controls=&quot;false&quot;&#10;            style=&quot;width: 100%;&quot;&#10;          /&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            设置默认的图片网格列数，范围2-8列&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;&#10;        &lt;el-form-item label=&quot;默认分页大小&quot; class=&quot;form-item&quot;&gt;&#10;          &lt;el-select v-model=&quot;settingsForm.defaultPageSize&quot; style=&quot;width: 100%;&quot;&gt;&#10;            &lt;el-option label=&quot;20 张/页&quot; :value=&quot;20&quot; /&gt;&#10;            &lt;el-option label=&quot;50 张/页&quot; :value=&quot;50&quot; /&gt;&#10;            &lt;el-option label=&quot;100 张/页&quot; :value=&quot;100&quot; /&gt;&#10;            &lt;el-option label=&quot;200 张/页&quot; :value=&quot;200&quot; /&gt;&#10;          &lt;/el-select&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            设置每页显示的图片数量&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 缓存设置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;缓存设置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;管理本地缓存和存储&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item class=&quot;form-item&quot;&gt;&#10;          &lt;div class=&quot;cache-actions&quot;&gt;&#10;            &lt;el-button @click=&quot;clearThumbnailCache&quot; :icon=&quot;Delete&quot;&gt;&#10;              清除缩略图缓存&#10;            &lt;/el-button&gt;&#10;            &lt;el-button @click=&quot;clearAllCache&quot; :icon=&quot;Refresh&quot;&gt;&#10;              清除所有缓存&#10;            &lt;/el-button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            清除缓存可以释放存储空间，但会导致图片重新加载&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 关于信息 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;关于&lt;/h4&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;about-info&quot;&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;应用版本：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;v1.0.0&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;构建时间：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;{{ buildTime }}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;技术栈：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;Vue 3 + Element Plus + Spring Boot&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-form&gt;&#10;&#10;    &lt;template #footer&gt;&#10;      &lt;div class=&quot;dialog-footer&quot;&gt;&#10;        &lt;el-button @click=&quot;handleReset&quot;&gt;重置&lt;/el-button&gt;&#10;        &lt;el-button @click=&quot;handleClose&quot;&gt;取消&lt;/el-button&gt;&#10;        &lt;el-button&#10;          type=&quot;primary&quot;&#10;          @click=&quot;handleSave&quot;&#10;          :loading=&quot;saving&quot;&#10;        &gt;&#10;          保存设置&#10;        &lt;/el-button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;  &lt;/el-dialog&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, reactive, computed, onMounted } from 'vue'&#10;import { ElMessage, ElMessageBox } from 'element-plus'&#10;import type { FormInstance, FormRules } from 'element-plus'&#10;import { Link, Connection, Delete, Refresh } from '@element-plus/icons-vue'&#10;import { setTaggerUrl } from '@/api'&#10;&#10;interface Props {&#10;  modelValue: boolean&#10;}&#10;&#10;interface Emits {&#10;  (e: 'update:modelValue', value: boolean): void&#10;}&#10;&#10;const props = defineProps&lt;Props&gt;()&#10;const emit = defineEmits&lt;Emits&gt;()&#10;&#10;const formRef = ref&lt;FormInstance&gt;()&#10;const testing = ref(false)&#10;const saving = ref(false)&#10;&#10;// 设置表单数据&#10;const settingsForm = reactive({&#10;  taggerUrl: '',&#10;  defaultGridSize: 4,&#10;  defaultPageSize: 100&#10;})&#10;&#10;// 表单验证规则&#10;const formRules: FormRules = {&#10;  taggerUrl: [&#10;    {&#10;      pattern: /^(https?:\/\/)?([\da-z\.-]+)\.?([a-z\.]{0,6})?([\/\w \.-]*)*\/?(\?[;&amp;a-z\d%_\.~+=-]*)?$/,&#10;      message: '请输入有效的URL地址',&#10;      trigger: 'blur'&#10;    }&#10;  ]&#10;}&#10;&#10;// 计算属性&#10;const visible = computed({&#10;  get: () =&gt; props.modelValue,&#10;  set: (value: boolean) =&gt; emit('update:modelValue', value)&#10;})&#10;&#10;const buildTime = computed(() =&gt; {&#10;  return new Date().toLocaleDateString('zh-CN')&#10;})&#10;&#10;// 事件处理&#10;const handleClose = () =&gt; {&#10;  visible.value = false&#10;}&#10;&#10;const handleReset = () =&gt; {&#10;  settingsForm.taggerUrl = ''&#10;  settingsForm.defaultGridSize = 4&#10;  settingsForm.defaultPageSize = 100&#10;  ElMessage.info('设置已重置为默认值')&#10;}&#10;&#10;const handleSave = async () =&gt; {&#10;  if (!formRef.value) return&#10;&#10;  try {&#10;    await formRef.value.validate()&#10;    saving.value = true&#10;&#10;    // 保存标签服务器地址&#10;    if (settingsForm.taggerUrl) {&#10;      await setTaggerUrl(settingsForm.taggerUrl)&#10;    }&#10;&#10;    // 保存其他设置到本地存储&#10;    localStorage.setItem('app-settings', JSON.stringify({&#10;      defaultGridSize: settingsForm.defaultGridSize,&#10;      defaultPageSize: settingsForm.defaultPageSize,&#10;      taggerUrl: settingsForm.taggerUrl&#10;    }))&#10;&#10;    ElMessage.success('设置保存成功')&#10;    visible.value = false&#10;  } catch (error) {&#10;    if (error !== false) { // 不是验证失败&#10;      console.error('保存设置失败:', error)&#10;      ElMessage.error('保存设置失败，请重试')&#10;    }&#10;  } finally {&#10;    saving.value = false&#10;  }&#10;}&#10;&#10;const testConnection = async () =&gt; {&#10;  if (!settingsForm.taggerUrl.trim()) {&#10;    ElMessage.warning('请先输入标签服务器地址')&#10;    return&#10;  }&#10;&#10;  testing.value = true&#10;&#10;  try {&#10;    // 这里可以添加测试连接的逻辑&#10;    // 暂时模拟测试&#10;    await new Promise(resolve =&gt; setTimeout(resolve, 1000))&#10;&#10;    const response = await fetch(`${settingsForm.taggerUrl}/health`, {&#10;      method: 'GET',&#10;      timeout: 5000&#10;    }).catch(() =&gt; null)&#10;&#10;    if (response?.ok) {&#10;      ElMessage.success('连接测试成功！标签服务器正常运行')&#10;    } else {&#10;      ElMessage.warning('无法连接到标签服务器，请检查地址是否正确')&#10;    }&#10;  } catch (error) {&#10;    ElMessage.error('连接测试失败，请检查服务器地址')&#10;  } finally {&#10;    testing.value = false&#10;  }&#10;}&#10;&#10;const clearThumbnailCache = () =&gt; {&#10;  ElMessageBox.confirm(&#10;    '确定要清除缩略图缓存吗？这将删除所有已缓存的缩略图。',&#10;    '清除缓存确认',&#10;    {&#10;      confirmButtonText: '确定',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    // 清除缩略图缓存的逻辑&#10;    if ('caches' in window) {&#10;      caches.delete('thumbnail-cache')&#10;    }&#10;    ElMessage.success('缩略图缓存已清除')&#10;  }).catch(() =&gt; {&#10;    // 用户取消&#10;  })&#10;}&#10;&#10;const clearAllCache = () =&gt; {&#10;  ElMessageBox.confirm(&#10;    '确定要清除所有缓存吗？这将删除所有本地存储的数据。',&#10;    '清除缓存确认',&#10;    {&#10;      confirmButtonText: '确定',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    // 清除所有缓存&#10;    localStorage.removeItem('app-settings')&#10;    if ('caches' in window) {&#10;      caches.keys().then(cacheNames =&gt; {&#10;        return Promise.all(&#10;          cacheNames.map(cacheName =&gt; caches.delete(cacheName))&#10;        )&#10;      })&#10;    }&#10;    ElMessage.success('所有缓存已清除')&#10;  }).catch(() =&gt; {&#10;    // 用户取消&#10;  })&#10;}&#10;&#10;// 生命周期 - 加载保存的设置&#10;onMounted(() =&gt; {&#10;  const savedSettings = localStorage.getItem('app-settings')&#10;  if (savedSettings) {&#10;    try {&#10;      const settings = JSON.parse(savedSettings)&#10;      settingsForm.defaultGridSize = settings.defaultGridSize || 4&#10;      settingsForm.defaultPageSize = settings.defaultPageSize || 100&#10;      settingsForm.taggerUrl = settings.taggerUrl || ''&#10;    } catch (error) {&#10;      console.warn('加载本地设置失败:', error)&#10;    }&#10;  }&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* 设置对话框样式 */&#10;:deep(.settings-dialog) {&#10;  --el-dialog-bg-color: var(--dark-bg-elevated);&#10;  --el-dialog-border-radius: var(--radius-lg);&#10;}&#10;&#10;:deep(.el-dialog__header) {&#10;  background: var(--dark-surface-primary);&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;  padding: var(--spacing-lg);&#10;}&#10;&#10;:deep(.el-dialog__title) {&#10;  color: var(--dark-text-primary);&#10;  font-weight: 600;&#10;}&#10;&#10;:deep(.el-dialog__body) {&#10;  padding: var(--spacing-lg);&#10;  max-height: 70vh;&#10;  overflow-y: auto;&#10;}&#10;&#10;:deep(.el-dialog__footer) {&#10;  border-top: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;/* 设置表单样式 */&#10;.settings-form {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xl);&#10;}&#10;&#10;.settings-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-lg);&#10;}&#10;&#10;.section-header {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.section-title {&#10;  margin: 0;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;.section-description {&#10;  font-size: 13px;&#10;  color: var(--dark-text-secondary);&#10;  line-height: 1.4;&#10;}&#10;&#10;.form-item {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.form-help-text {&#10;  font-size: 12px;&#10;  color: var(--dark-text-tertiary);&#10;  margin-top: var(--spacing-xs);&#10;  line-height: 1.4;&#10;}&#10;&#10;/* 缓存操作按钮 */&#10;.cache-actions {&#10;  display: flex;&#10;  gap: var(--spacing-md);&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.cache-actions .el-button {&#10;  flex: 1;&#10;}&#10;&#10;/* 关于信息 */&#10;.about-info {&#10;  background: var(--dark-surface-secondary);&#10;  border: 1px solid var(--dark-border-secondary);&#10;  border-radius: var(--radius-md);&#10;  padding: var(--spacing-lg);&#10;}&#10;&#10;.info-row {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: var(--spacing-sm) 0;&#10;}&#10;&#10;.info-row:not(:last-child) {&#10;  border-bottom: 1px solid var(--dark-border-primary);&#10;}&#10;&#10;.info-label {&#10;  font-weight: 500;&#10;  color: var(--dark-text-secondary);&#10;}&#10;&#10;.info-value {&#10;  color: var(--dark-text-primary);&#10;  font-family: 'JetBrains Mono', 'Consolas', monospace;&#10;}&#10;&#10;/* 对话框底部 */&#10;.dialog-footer {&#10;  display: flex;&#10;  gap: var(--spacing-md);&#10;  justify-content: flex-end;&#10;}&#10;&#10;/* Element Plus 组件样式覆盖 */&#10;:deep(.el-input__wrapper) {&#10;  background-color: var(--dark-surface-secondary);&#10;  border-color: var(--dark-border-secondary);&#10;}&#10;&#10;:deep(.el-input__wrapper:hover) {&#10;  border-color: var(--dark-border-accent);&#10;}&#10;&#10;:deep(.el-input__wrapper.is-focus) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-select .el-input__wrapper) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__runway) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__bar) {&#10;  background-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-slider__button) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-form-item__label) {&#10;  color: var(--dark-text-primary);&#10;  font-weight: 600;&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 600px) {&#10;  :deep(.settings-dialog) {&#10;    width: 95vw !important;&#10;    margin: 5vh auto;&#10;  }&#10;&#10;  .cache-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .info-row {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: var(--spacing-xs);&#10;  }&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;el-dialog&#10;    v-model=&quot;visible&quot;&#10;    title=&quot;应用设置&quot;&#10;    width=&quot;500px&quot;&#10;    :before-close=&quot;handleClose&quot;&#10;    class=&quot;settings-dialog&quot;&#10;  &gt;&#10;    &lt;el-form&#10;      ref=&quot;formRef&quot;&#10;      :model=&quot;settingsForm&quot;&#10;      :rules=&quot;formRules&quot;&#10;      label-position=&quot;top&quot;&#10;      class=&quot;settings-form&quot;&#10;    &gt;&#10;      &lt;!-- 标签服务器配置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;标签服务器配置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;配置AI标签识别服务器地址&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item&#10;          label=&quot;标签服务器地址&quot;&#10;          prop=&quot;taggerUrl&quot;&#10;          class=&quot;form-item&quot;&#10;        &gt;&#10;          &lt;el-input&#10;            v-model=&quot;settingsForm.taggerUrl&quot;&#10;            placeholder=&quot;http://localhost:5000&quot;&#10;            :prefix-icon=&quot;Link&quot;&#10;            clearable&#10;          &gt;&#10;            &lt;template #append&gt;&#10;              &lt;el-button&#10;                :icon=&quot;Connection&quot;&#10;                @click=&quot;testConnection&quot;&#10;                :loading=&quot;testing&quot;&#10;                title=&quot;测试连接&quot;&#10;              &gt;&#10;                测试&#10;              &lt;/el-button&gt;&#10;            &lt;/template&gt;&#10;          &lt;/el-input&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            用于自动识别图片标签的AI服务地址，留空则禁用自动标签功能&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 显示设置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;显示设置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;自定义界面显示选项&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item label=&quot;默认网格大小&quot; class=&quot;form-item&quot;&gt;&#10;          &lt;el-slider&#10;            v-model=&quot;settingsForm.defaultGridSize&quot;&#10;            :min=&quot;2&quot;&#10;            :max=&quot;8&quot;&#10;            :step=&quot;1&quot;&#10;            show-input&#10;            :show-input-controls=&quot;false&quot;&#10;            style=&quot;width: 100%;&quot;&#10;          /&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            设置默认的图片网格列数，范围2-8列&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;&#10;        &lt;el-form-item label=&quot;默认分页大小&quot; class=&quot;form-item&quot;&gt;&#10;          &lt;el-select v-model=&quot;settingsForm.defaultPageSize&quot; style=&quot;width: 100%;&quot;&gt;&#10;            &lt;el-option label=&quot;20 张/页&quot; :value=&quot;20&quot; /&gt;&#10;            &lt;el-option label=&quot;50 张/页&quot; :value=&quot;50&quot; /&gt;&#10;            &lt;el-option label=&quot;100 张/页&quot; :value=&quot;100&quot; /&gt;&#10;            &lt;el-option label=&quot;200 张/页&quot; :value=&quot;200&quot; /&gt;&#10;          &lt;/el-select&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            设置每页显示的图片数量&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 缓存设置 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;缓存设置&lt;/h4&gt;&#10;          &lt;div class=&quot;section-description&quot;&gt;管理本地缓存和存储&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-form-item class=&quot;form-item&quot;&gt;&#10;          &lt;div class=&quot;cache-actions&quot;&gt;&#10;            &lt;el-button @click=&quot;clearThumbnailCache&quot; :icon=&quot;Delete&quot;&gt;&#10;              清除缩略图缓存&#10;            &lt;/el-button&gt;&#10;            &lt;el-button @click=&quot;clearAllCache&quot; :icon=&quot;Refresh&quot;&gt;&#10;              清除所有缓存&#10;            &lt;/el-button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;form-help-text&quot;&gt;&#10;            清除缓存可以释放存储空间，但会导致图片重新加载&#10;          &lt;/div&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 关于信息 --&gt;&#10;      &lt;div class=&quot;settings-section&quot;&gt;&#10;        &lt;div class=&quot;section-header&quot;&gt;&#10;          &lt;h4 class=&quot;section-title&quot;&gt;关于&lt;/h4&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;about-info&quot;&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;应用版本：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;v1.0.0&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;构建时间：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;{{ buildTime }}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;info-row&quot;&gt;&#10;            &lt;span class=&quot;info-label&quot;&gt;技术栈：&lt;/span&gt;&#10;            &lt;span class=&quot;info-value&quot;&gt;Vue 3 + Element Plus + Spring Boot&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-form&gt;&#10;&#10;    &lt;template #footer&gt;&#10;      &lt;div class=&quot;dialog-footer&quot;&gt;&#10;        &lt;el-button @click=&quot;handleReset&quot;&gt;重置&lt;/el-button&gt;&#10;        &lt;el-button @click=&quot;handleClose&quot;&gt;取消&lt;/el-button&gt;&#10;        &lt;el-button&#10;          type=&quot;primary&quot;&#10;          @click=&quot;handleSave&quot;&#10;          :loading=&quot;saving&quot;&#10;        &gt;&#10;          保存设置&#10;        &lt;/el-button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;  &lt;/el-dialog&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, reactive, computed, onMounted } from 'vue'&#10;import { ElMessage, ElMessageBox } from 'element-plus'&#10;import type { FormInstance, FormRules } from 'element-plus'&#10;import { Link, Connection, Delete, Refresh } from '@element-plus/icons-vue'&#10;import { setTaggerUrl } from '@/api'&#10;&#10;interface Props {&#10;  modelValue: boolean&#10;}&#10;&#10;interface Emits {&#10;  (e: 'update:modelValue', value: boolean): void&#10;}&#10;&#10;const props = defineProps&lt;Props&gt;()&#10;const emit = defineEmits&lt;Emits&gt;()&#10;&#10;const formRef = ref&lt;FormInstance&gt;()&#10;const testing = ref(false)&#10;const saving = ref(false)&#10;&#10;// 设置表单数据&#10;const settingsForm = reactive({&#10;  taggerUrl: '',&#10;  defaultGridSize: 4,&#10;  defaultPageSize: 100&#10;})&#10;&#10;// 表单验证规则&#10;const formRules: FormRules = {&#10;  taggerUrl: [&#10;    {&#10;      pattern: /^(https?:\/\/)?([\da-z\.-]+)\.?([a-z\.]{0,6})?([\/\w \.-]*)*\/?(\?[;&amp;a-z\d%_\.~+=-]*)?$/,&#10;      message: '请输入有效的URL地址',&#10;      trigger: 'blur'&#10;    }&#10;  ]&#10;}&#10;&#10;// 计算属性&#10;const visible = computed({&#10;  get: () =&gt; props.modelValue,&#10;  set: (value: boolean) =&gt; emit('update:modelValue', value)&#10;})&#10;&#10;const buildTime = computed(() =&gt; {&#10;  return new Date().toLocaleDateString('zh-CN')&#10;})&#10;&#10;// 事件处理&#10;const handleClose = () =&gt; {&#10;  visible.value = false&#10;}&#10;&#10;const handleReset = () =&gt; {&#10;  settingsForm.taggerUrl = ''&#10;  settingsForm.defaultGridSize = 4&#10;  settingsForm.defaultPageSize = 100&#10;  ElMessage.info('设置已重置为默认值')&#10;}&#10;&#10;const handleSave = async () =&gt; {&#10;  if (!formRef.value) return&#10;&#10;  try {&#10;    await formRef.value.validate()&#10;    saving.value = true&#10;&#10;    // 保存标签服务器地址&#10;    if (settingsForm.taggerUrl) {&#10;      await setTaggerUrl(settingsForm.taggerUrl)&#10;    }&#10;&#10;    // 保存其他设置到本地存储&#10;    localStorage.setItem('app-settings', JSON.stringify({&#10;      defaultGridSize: settingsForm.defaultGridSize,&#10;      defaultPageSize: settingsForm.defaultPageSize,&#10;      taggerUrl: settingsForm.taggerUrl&#10;    }))&#10;&#10;    ElMessage.success('设置保存成功')&#10;    visible.value = false&#10;  } catch (error) {&#10;    if (error !== false) { // 不是验证失败&#10;      console.error('保存设置失败:', error)&#10;      ElMessage.error('保存设置失败，请重试')&#10;    }&#10;  } finally {&#10;    saving.value = false&#10;  }&#10;}&#10;&#10;const testConnection = async () =&gt; {&#10;  if (!settingsForm.taggerUrl.trim()) {&#10;    ElMessage.warning('请先输入标签服务器地址')&#10;    return&#10;  }&#10;&#10;  testing.value = true&#10;&#10;  try {&#10;    // 这里可以添加测试连接的逻辑&#10;    // 暂时模拟测试&#10;    await new Promise(resolve =&gt; setTimeout(resolve, 1000))&#10;&#10;    const controller = new AbortController()&#10;    const timeoutId = setTimeout(() =&gt; controller.abort(), 5000)&#10;&#10;    const response = await fetch(`${settingsForm.taggerUrl}/health`, {&#10;      method: 'GET',&#10;      signal: controller.signal&#10;    }).catch(() =&gt; {&#10;      clearTimeout(timeoutId)&#10;      return null&#10;    })&#10;&#10;    clearTimeout(timeoutId)&#10;&#10;    if (response?.ok) {&#10;      ElMessage.success('连接测试成功！标签服务器正常运行')&#10;    } else {&#10;      ElMessage.warning('无法连接到标签服务器，请检查地址是否正确')&#10;    }&#10;  } catch (error) {&#10;    ElMessage.error('连接测试失败，请检查服务器地址')&#10;  } finally {&#10;    testing.value = false&#10;  }&#10;}&#10;&#10;const clearThumbnailCache = () =&gt; {&#10;  ElMessageBox.confirm(&#10;    '确定要清除缩略图缓存吗？这将删除所有已缓存的缩略图。',&#10;    '清除缓存确认',&#10;    {&#10;      confirmButtonText: '确定',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    // 清除缩略图缓存的逻辑&#10;    if ('caches' in window) {&#10;      caches.delete('thumbnail-cache')&#10;    }&#10;    ElMessage.success('缩略图缓存已清除')&#10;  }).catch(() =&gt; {&#10;    // 用户取消&#10;  })&#10;}&#10;&#10;const clearAllCache = () =&gt; {&#10;  ElMessageBox.confirm(&#10;    '确定要清除所有缓存吗？这将删除所有本地存储的数据。',&#10;    '清除缓存确认',&#10;    {&#10;      confirmButtonText: '确定',&#10;      cancelButtonText: '取消',&#10;      type: 'warning',&#10;    }&#10;  ).then(() =&gt; {&#10;    // 清除所有缓存&#10;    localStorage.removeItem('app-settings')&#10;    if ('caches' in window) {&#10;      caches.keys().then(cacheNames =&gt; {&#10;        return Promise.all(&#10;          cacheNames.map(cacheName =&gt; caches.delete(cacheName))&#10;        )&#10;      })&#10;    }&#10;    ElMessage.success('所有缓存已清除')&#10;  }).catch(() =&gt; {&#10;    // 用户取消&#10;  })&#10;}&#10;&#10;// 生命周期 - 加载保存的设置&#10;onMounted(() =&gt; {&#10;  const savedSettings = localStorage.getItem('app-settings')&#10;  if (savedSettings) {&#10;    try {&#10;      const settings = JSON.parse(savedSettings)&#10;      settingsForm.defaultGridSize = settings.defaultGridSize || 4&#10;      settingsForm.defaultPageSize = settings.defaultPageSize || 100&#10;      settingsForm.taggerUrl = settings.taggerUrl || ''&#10;    } catch (error) {&#10;      console.warn('加载本地设置失败:', error)&#10;    }&#10;  }&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* 设置对话框样式 */&#10;:deep(.settings-dialog) {&#10;  --el-dialog-bg-color: var(--dark-bg-elevated);&#10;  --el-dialog-border-radius: var(--radius-lg);&#10;}&#10;&#10;:deep(.el-dialog__header) {&#10;  background: var(--dark-surface-primary);&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;  padding: var(--spacing-lg);&#10;}&#10;&#10;:deep(.el-dialog__title) {&#10;  color: var(--dark-text-primary);&#10;  font-weight: 600;&#10;}&#10;&#10;:deep(.el-dialog__body) {&#10;  padding: var(--spacing-lg);&#10;  max-height: 70vh;&#10;  overflow-y: auto;&#10;}&#10;&#10;:deep(.el-dialog__footer) {&#10;  border-top: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;/* 设置表单样式 */&#10;.settings-form {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xl);&#10;}&#10;&#10;.settings-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-lg);&#10;}&#10;&#10;.section-header {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.section-title {&#10;  margin: 0;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;.section-description {&#10;  font-size: 13px;&#10;  color: var(--dark-text-secondary);&#10;  line-height: 1.4;&#10;}&#10;&#10;.form-item {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.form-help-text {&#10;  font-size: 12px;&#10;  color: var(--dark-text-tertiary);&#10;  margin-top: var(--spacing-xs);&#10;  line-height: 1.4;&#10;}&#10;&#10;/* 缓存操作按钮 */&#10;.cache-actions {&#10;  display: flex;&#10;  gap: var(--spacing-md);&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.cache-actions .el-button {&#10;  flex: 1;&#10;}&#10;&#10;/* 关于信息 */&#10;.about-info {&#10;  background: var(--dark-surface-secondary);&#10;  border: 1px solid var(--dark-border-secondary);&#10;  border-radius: var(--radius-md);&#10;  padding: var(--spacing-lg);&#10;}&#10;&#10;.info-row {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: var(--spacing-sm) 0;&#10;}&#10;&#10;.info-row:not(:last-child) {&#10;  border-bottom: 1px solid var(--dark-border-primary);&#10;}&#10;&#10;.info-label {&#10;  font-weight: 500;&#10;  color: var(--dark-text-secondary);&#10;}&#10;&#10;.info-value {&#10;  color: var(--dark-text-primary);&#10;  font-family: 'JetBrains Mono', 'Consolas', monospace;&#10;}&#10;&#10;/* 对话框底部 */&#10;.dialog-footer {&#10;  display: flex;&#10;  gap: var(--spacing-md);&#10;  justify-content: flex-end;&#10;}&#10;&#10;/* Element Plus 组件样式覆盖 */&#10;:deep(.el-input__wrapper) {&#10;  background-color: var(--dark-surface-secondary);&#10;  border-color: var(--dark-border-secondary);&#10;}&#10;&#10;:deep(.el-input__wrapper:hover) {&#10;  border-color: var(--dark-border-accent);&#10;}&#10;&#10;:deep(.el-input__wrapper.is-focus) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-select .el-input__wrapper) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__runway) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__bar) {&#10;  background-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-slider__button) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-form-item__label) {&#10;  color: var(--dark-text-primary);&#10;  font-weight: 600;&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 600px) {&#10;  :deep(.settings-dialog) {&#10;    width: 95vw !important;&#10;    margin: 5vh auto;&#10;  }&#10;&#10;  .cache-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .info-row {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: var(--spacing-xs);&#10;  }&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/gallery/ImageGallery.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/gallery/ImageGallery.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-gallery&quot;&gt;&#10;    &lt;!-- 加载状态 --&gt;&#10;    &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;gallery-loading&quot;&gt;&#10;      &lt;div class=&quot;loading-content&quot;&gt;&#10;        &lt;el-skeleton :rows=&quot;6&quot; animated /&gt;&#10;        &lt;div class=&quot;loading-text&quot;&gt;正在加载图片...&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 空状态 --&gt;&#10;    &lt;el-empty&#10;      v-else-if=&quot;!imageStore.loading &amp;&amp; imageStore.images.length === 0&quot;&#10;      description=&quot;暂无符合条件的图片&quot;&#10;      class=&quot;gallery-empty&quot;&#10;    &gt;&#10;      &lt;template #image&gt;&#10;        &lt;el-icon size=&quot;64&quot; color=&quot;var(--dark-text-tertiary)&quot;&gt;&#10;          &lt;Picture /&gt;&#10;        &lt;/el-icon&gt;&#10;      &lt;/template&gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;handleRefresh&quot; :icon=&quot;Refresh&quot;&gt;&#10;        刷新数据&#10;      &lt;/el-button&gt;&#10;    &lt;/el-empty&gt;&#10;&#10;    &lt;!-- 图片网格 --&gt;&#10;    &lt;div v-else class=&quot;gallery-container&quot;&gt;&#10;      &lt;!-- 工具栏 --&gt;&#10;      &lt;div class=&quot;gallery-toolbar border-secondary bg-surface shadow-light&quot;&gt;&#10;        &lt;div class=&quot;toolbar-left&quot;&gt;&#10;          &lt;div class=&quot;selection-info&quot;&gt;&#10;            &lt;el-checkbox&#10;              v-model=&quot;isAllSelected&quot;&#10;              :indeterminate=&quot;isIndeterminate&quot;&#10;              @change=&quot;handleSelectAll&quot;&#10;            &gt;&#10;              {{ selectedCount &gt; 0 ? `已选择 ${selectedCount} 张` : '全选' }}&#10;            &lt;/el-checkbox&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;toolbar-right&quot;&gt;&#10;          &lt;el-button-group v-if=&quot;selectedCount &gt; 0&quot; class=&quot;batch-actions&quot;&gt;&#10;            &lt;el-button&#10;              type=&quot;primary&quot;&#10;              :icon=&quot;Download&quot;&#10;              @click=&quot;handleBatchDownload&quot;&#10;            &gt;&#10;              下载 ({{ selectedCount }})&#10;            &lt;/el-button&gt;&#10;            &lt;el-button&#10;              type=&quot;danger&quot;&#10;              :icon=&quot;Delete&quot;&#10;              @click=&quot;handleBatchDelete&quot;&#10;            &gt;&#10;              删除&#10;            &lt;/el-button&gt;&#10;          &lt;/el-button-group&gt;&#10;&#10;          &lt;div class=&quot;view-controls&quot;&gt;&#10;            &lt;el-tooltip content=&quot;网格大小&quot;&gt;&#10;              &lt;el-slider&#10;                v-model=&quot;gridSize&quot;&#10;                :min=&quot;2&quot;&#10;                :max=&quot;8&quot;&#10;                :step=&quot;1&quot;&#10;                style=&quot;width: 80px;&quot;&#10;                @change=&quot;handleGridSizeChange&quot;&#10;              /&gt;&#10;            &lt;/el-tooltip&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 图片网格 --&gt;&#10;      &lt;div class=&quot;gallery-grid&quot; :style=&quot;gridStyle&quot;&gt;&#10;        &lt;ImageCard&#10;          v-for=&quot;image in imageStore.images&quot;&#10;          :key=&quot;image.hash&quot;&#10;          :image=&quot;image&quot;&#10;          :selected=&quot;selectedImages.has(image.hash)&quot;&#10;          :device-type=&quot;deviceType&quot;&#10;          @click=&quot;handleImageClick&quot;&#10;          @select=&quot;handleImageSelect&quot;&#10;          class=&quot;gallery-item&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 分页工具栏 --&gt;&#10;      &lt;div class=&quot;gallery-pagination border-secondary bg-surface&quot;&gt;&#10;        &lt;div class=&quot;pagination-info&quot;&gt;&#10;          &lt;span class=&quot;info-text&quot;&gt;&#10;            第 {{ imageStore.params.page }} 页，共 {{ totalPages }} 页&#10;          &lt;/span&gt;&#10;          &lt;span class=&quot;info-text&quot;&gt;&#10;            显示第 {{ startIndex }}-{{ endIndex }} 项，共 {{ imageStore.totalElements }} 项&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-pagination&#10;          v-model:current-page=&quot;imageStore.params.page&quot;&#10;          v-model:page-size=&quot;imageStore.params.pageSize&quot;&#10;          :total=&quot;imageStore.totalElements&quot;&#10;          :page-sizes=&quot;[20, 50, 100, 200]&quot;&#10;          layout=&quot;sizes, prev, pager, next, jumper&quot;&#10;          background&#10;          @size-change=&quot;handlePageSizeChange&quot;&#10;          @current-change=&quot;handlePageChange&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 图片预览 --&gt;&#10;    &lt;ImageViewer&#10;      v-if=&quot;viewerImage&quot;&#10;      :image=&quot;viewerImage&quot;&#10;      :images=&quot;imageStore.images&quot;&#10;      @close=&quot;closeViewer&quot;&#10;      @navigate=&quot;handleViewerNavigate&quot;&#10;    /&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, onUnmounted, watch } from 'vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { Picture, Refresh, Download, Delete } from '@element-plus/icons-vue'&#10;import { useImageStore } from '@/stores/image'&#10;import { getDeviceType, getResponsiveColumns, debounce, DeviceType } from '@/utils'&#10;import { deleteImage, getImageFile, getImageFileZip, type Image } from '@/api'&#10;import ImageCard from '@/components/image/ImageCard.vue'&#10;import ImageViewer from '@/components/image/ImageViewer.vue'&#10;&#10;const imageStore = useImageStore()&#10;const deviceType = ref&lt;DeviceType&gt;(getDeviceType())&#10;const selectedImages = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;const viewerImage = ref&lt;Image | null&gt;(null)&#10;const gridSize = ref(getResponsiveColumns())&#10;&#10;// 计算属性&#10;const selectedCount = computed(() =&gt; selectedImages.value.size)&#10;&#10;const isAllSelected = computed({&#10;  get: () =&gt; imageStore.images.length &gt; 0 &amp;&amp; selectedImages.value.size === imageStore.images.length,&#10;  set: (value: boolean) =&gt; handleSelectAll(value)&#10;})&#10;&#10;const isIndeterminate = computed(() =&gt;&#10;  selectedImages.value.size &gt; 0 &amp;&amp; selectedImages.value.size &lt; imageStore.images.length&#10;)&#10;&#10;const gridStyle = computed(() =&gt; ({&#10;  display: 'grid',&#10;  gridTemplateColumns: `repeat(${gridSize.value}, 1fr)`,&#10;  gap: 'var(--spacing-md)',&#10;  padding: 'var(--spacing-lg)'&#10;}))&#10;&#10;const totalPages = computed(() =&gt;&#10;  Math.ceil(imageStore.totalElements / imageStore.params.pageSize)&#10;)&#10;&#10;const startIndex = computed(() =&gt;&#10;  (imageStore.params.page - 1) * imageStore.params.pageSize + 1&#10;)&#10;&#10;const endIndex = computed(() =&gt;&#10;  Math.min(imageStore.params.page * imageStore.params.pageSize, imageStore.totalElements)&#10;)&#10;&#10;// 响应式处理&#10;const handleResize = debounce(() =&gt; {&#10;  deviceType.value = getDeviceType()&#10;  if (!gridSize.value) {&#10;    gridSize.value = getResponsiveColumns()&#10;  }&#10;}, 300)&#10;&#10;// 生命周期&#10;onMounted(async () =&gt; {&#10;  await imageStore.query()&#10;  window.addEventListener('resize', handleResize)&#10;})&#10;&#10;onUnmounted(() =&gt; {&#10;  window.removeEventListener('resize', handleResize)&#10;})&#10;&#10;// 监听设备类型变化，自动调整网格大小&#10;watch(deviceType, () =&gt; {&#10;  gridSize.value = getResponsiveColumns()&#10;})&#10;&#10;// 事件处理&#10;const handleRefresh = async () =&gt; {&#10;  try {&#10;    selectedImages.value.clear()&#10;    await imageStore.query()&#10;    ElMessage.success('刷新完成')&#10;  } catch (error) {&#10;    ElMessage.error('刷新失败')&#10;  }&#10;}&#10;&#10;const handleSelectAll = (selected: boolean) =&gt; {&#10;  if (selected) {&#10;    selectedImages.value = new Set(imageStore.images.map(img =&gt; img.hash))&#10;  } else {&#10;    selectedImages.value.clear()&#10;  }&#10;}&#10;&#10;const handleImageSelect = (image: Image, selected: boolean) =&gt; {&#10;  if (selected) {&#10;    selectedImages.value.add(image.hash)&#10;  } else {&#10;    selectedImages.value.delete(image.hash)&#10;  }&#10;}&#10;&#10;const handleImageClick = (image: Image) =&gt; {&#10;  viewerImage.value = image&#10;}&#10;&#10;const closeViewer = () =&gt; {&#10;  viewerImage.value = null&#10;}&#10;&#10;const handleViewerNavigate = (direction: 'prev' | 'next') =&gt; {&#10;  if (!viewerImage.value) return&#10;&#10;  const currentIndex = imageStore.images.findIndex(img =&gt; img.hash === viewerImage.value!.hash)&#10;  let nextIndex: number&#10;&#10;  if (direction === 'prev') {&#10;    nextIndex = currentIndex &gt; 0 ? currentIndex - 1 : imageStore.images.length - 1&#10;  } else {&#10;    nextIndex = currentIndex &lt; imageStore.images.length - 1 ? currentIndex + 1 : 0&#10;  }&#10;&#10;  viewerImage.value = imageStore.images[nextIndex]&#10;}&#10;&#10;const handleGridSizeChange = (size: number) =&gt; {&#10;  gridSize.value = size&#10;}&#10;&#10;// 分页处理&#10;const handlePageChange = async (_page: number) =&gt; {&#10;  selectedImages.value.clear()&#10;  await imageStore.query()&#10;}&#10;&#10;const handlePageSizeChange = async (_size: number) =&gt; {&#10;  selectedImages.value.clear()&#10;  imageStore.params.page = 1&#10;  await imageStore.query()&#10;}&#10;&#10;// 批量操作&#10;const handleBatchDownload = async () =&gt; {&#10;  const hashes = Array.from(selectedImages.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    ElMessage.info('开始准备下载文件...')&#10;&#10;    const { blob, filename } = hashes.length === 1&#10;      ? await getImageFile(hashes[0])&#10;      : await getImageFileZip(hashes)&#10;&#10;    const url = window.URL.createObjectURL(blob)&#10;    const link = document.createElement('a')&#10;    link.href = url&#10;    link.download = filename&#10;    document.body.appendChild(link)&#10;    link.click()&#10;    document.body.removeChild(link)&#10;    window.URL.revokeObjectURL(url)&#10;&#10;    ElMessage.success(`开始下载 ${hashes.length} 张图片`)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;    ElMessage.error('下载失败:请重试')&#10;  }&#10;}&#10;&#10;const handleBatchDelete = async () =&gt; {&#10;  const hashes = Array.from(selectedImages.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    await ElMessageBox.confirm(&#10;      `确定要删除选中的 ${hashes.length} 张图片吗？此操作不可撤销。`,&#10;      '批量删除确认',&#10;      {&#10;        confirmButtonText: '确定删除',&#10;        cancelButtonText: '取消',&#10;        type: 'warning',&#10;        customClass: 'dark-message-box'&#10;      }&#10;    )&#10;&#10;    ElMessage.info('正在删除图片...')&#10;    await Promise.all(hashes.map(hash =&gt; deleteImage(hash)))&#10;&#10;    // 更�����本地状态&#10;    imageStore.images = imageStore.images.filter(&#10;      img =&gt; !selectedImages.value.has(img.hash)&#10;    )&#10;    selectedImages.value.clear()&#10;&#10;    ElMessage.success(`已成功删除 ${hashes.length} 张图片`)&#10;&#10;    // 如果当前页没有数据了，跳转到上一页&#10;    if (imageStore.images.length === 0 &amp;&amp; imageStore.params.page &gt; 1) {&#10;      imageStore.params.page--&#10;      await imageStore.query()&#10;    }&#10;  } catch (error) {&#10;    if (error !== 'cancel') {&#10;      console.error('删除失败:', error)&#10;      ElMessage.error('删除失败，请重试')&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-gallery {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  background: var(--dark-bg-secondary);&#10;}&#10;&#10;/* 加载状��� */&#10;.gallery-loading {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: var(--spacing-2xl);&#10;}&#10;&#10;.loading-content {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  gap: var(--spacing-lg);&#10;  max-width: 400px;&#10;  width: 100%;&#10;}&#10;&#10;.loading-text {&#10;  color: var(--dark-text-secondary);&#10;  font-size: 14px;&#10;}&#10;&#10;/* 空状态 */&#10;.gallery-empty {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;/* 画廊容器 */&#10;.gallery-container {&#10;  flex: 1;&#10;  display: flex;&#10;  flex-direction: column;&#10;  overflow: hidden;&#10;}&#10;&#10;/* 工具栏 */&#10;.gallery-toolbar {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  padding: var(--spacing-md) var(--spacing-lg);&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;.toolbar-left,&#10;.toolbar-right {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-md);&#10;}&#10;&#10;.selection-info {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;.batch-actions {&#10;  display: flex;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;.view-controls {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;/* 图片网格 */&#10;.gallery-grid {&#10;  flex: 1;&#10;  background: var(--dark-bg-secondary);&#10;  /* 确保网格容器正确约束子元素 */&#10;  contain: layout style paint;&#10;}&#10;&#10;.gallery-item {&#10;  width: 100%;&#10;  /* 严格控制宽高比，防止重叠 */&#10;  aspect-ratio: 1;&#10;  /* 确保网格项不会溢出 */&#10;  min-width: 0;&#10;  min-height: 0;&#10;  /* 防止内容溢出 */&#10;  overflow: hidden;&#10;  border-radius: var(--radius-lg);&#10;  transition: all var(--transition-fast);&#10;  /* 确保在网格中的位置固定 */&#10;  position: relative;&#10;  /* 防止z-index导致的重叠 */&#10;  z-index: 1;&#10;}&#10;&#10;.gallery-item:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: var(--dark-shadow-medium);&#10;  /* 悬浮时提高z-index，但不影响布局 */&#10;  z-index: 2;&#10;}&#10;&#10;/* 分页工具栏 */&#10;.gallery-pagination {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  padding: var(--spacing-md) var(--spacing-lg);&#10;  border-top: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;.pagination-info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.info-text {&#10;  font-size: 12px;&#10;  color: var(--dark-text-tertiary);&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 768px) {&#10;  .gallery-toolbar {&#10;    flex-direction: column;&#10;    gap: var(--spacing-md);&#10;    align-items: stretch;&#10;  }&#10;&#10;  .toolbar-left,&#10;  .toolbar-right {&#10;    justify-content: space-between;&#10;  }&#10;&#10;  .gallery-pagination {&#10;    flex-direction: column;&#10;    gap: var(--spacing-md);&#10;    align-items: stretch;&#10;  }&#10;&#10;  .pagination-info {&#10;    text-align: center;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .gallery-grid {&#10;    padding: var(--spacing-md);&#10;    gap: var(--spacing-sm);&#10;  }&#10;&#10;  .batch-actions {&#10;    flex-direction: column;&#10;  }&#10;}&#10;&#10;/* 滚动条样式 */&#10;.gallery-grid::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-track {&#10;  background: var(--dark-bg-primary);&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb {&#10;  background: var(--dark-border-primary);&#10;  border-radius: var(--radius-sm);&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb:hover {&#10;  background: var(--dark-border-secondary);&#10;}&#10;&#10;/* Element Plus 组件样式覆盖 */&#10;:deep(.el-checkbox__label) {&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;:deep(.el-slider__runway) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__bar) {&#10;  background-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-slider__button) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-pagination) {&#10;  --el-pagination-bg-color: var(--dark-surface-secondary);&#10;  --el-pagination-text-color: var(--dark-text-primary);&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-gallery&quot;&gt;&#10;    &lt;!-- 加载状态 --&gt;&#10;    &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;gallery-loading&quot;&gt;&#10;      &lt;div class=&quot;loading-content&quot;&gt;&#10;        &lt;el-skeleton :rows=&quot;6&quot; animated /&gt;&#10;        &lt;div class=&quot;loading-text&quot;&gt;正在加载图片...&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 空状态 --&gt;&#10;    &lt;el-empty&#10;      v-else-if=&quot;!imageStore.loading &amp;&amp; imageStore.images.length === 0&quot;&#10;      description=&quot;暂无符合条件的图片&quot;&#10;      class=&quot;gallery-empty&quot;&#10;    &gt;&#10;      &lt;template #image&gt;&#10;        &lt;el-icon size=&quot;64&quot; color=&quot;var(--dark-text-tertiary)&quot;&gt;&#10;          &lt;Picture /&gt;&#10;        &lt;/el-icon&gt;&#10;      &lt;/template&gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;handleRefresh&quot; :icon=&quot;Refresh&quot;&gt;&#10;        刷新数据&#10;      &lt;/el-button&gt;&#10;    &lt;/el-empty&gt;&#10;&#10;    &lt;!-- 图片网格 --&gt;&#10;    &lt;div v-else class=&quot;gallery-container&quot;&gt;&#10;      &lt;!-- 工具栏 --&gt;&#10;      &lt;div class=&quot;gallery-toolbar border-secondary bg-surface shadow-light&quot;&gt;&#10;        &lt;div class=&quot;toolbar-left&quot;&gt;&#10;          &lt;div class=&quot;selection-info&quot;&gt;&#10;            &lt;el-checkbox&#10;              v-model=&quot;isAllSelected&quot;&#10;              :indeterminate=&quot;isIndeterminate&quot;&#10;              @change=&quot;handleSelectAll&quot;&#10;            &gt;&#10;              {{ selectedCount &gt; 0 ? `已选择 ${selectedCount} 张` : '全选' }}&#10;            &lt;/el-checkbox&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;toolbar-right&quot;&gt;&#10;          &lt;el-button-group v-if=&quot;selectedCount &gt; 0&quot; class=&quot;batch-actions&quot;&gt;&#10;            &lt;el-button&#10;              type=&quot;primary&quot;&#10;              :icon=&quot;Download&quot;&#10;              @click=&quot;handleBatchDownload&quot;&#10;            &gt;&#10;              下载 ({{ selectedCount }})&#10;            &lt;/el-button&gt;&#10;            &lt;el-button&#10;              type=&quot;danger&quot;&#10;              :icon=&quot;Delete&quot;&#10;              @click=&quot;handleBatchDelete&quot;&#10;            &gt;&#10;              删除&#10;            &lt;/el-button&gt;&#10;          &lt;/el-button-group&gt;&#10;&#10;          &lt;div class=&quot;view-controls&quot;&gt;&#10;            &lt;el-tooltip content=&quot;网格大小&quot;&gt;&#10;              &lt;el-slider&#10;                v-model=&quot;gridSize&quot;&#10;                :min=&quot;2&quot;&#10;                :max=&quot;8&quot;&#10;                :step=&quot;1&quot;&#10;                style=&quot;width: 80px;&quot;&#10;                @change=&quot;handleGridSizeChange&quot;&#10;              /&gt;&#10;            &lt;/el-tooltip&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 图片网格 --&gt;&#10;      &lt;div class=&quot;gallery-grid&quot; :style=&quot;gridStyle&quot;&gt;&#10;        &lt;ImageCard&#10;          v-for=&quot;image in imageStore.images&quot;&#10;          :key=&quot;image.hash&quot;&#10;          :image=&quot;image&quot;&#10;          :selected=&quot;selectedImages.has(image.hash)&quot;&#10;          :device-type=&quot;deviceType&quot;&#10;          @click=&quot;handleImageClick&quot;&#10;          @select=&quot;handleImageSelect&quot;&#10;          class=&quot;gallery-item&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 分页工具栏 --&gt;&#10;      &lt;div class=&quot;gallery-pagination border-secondary bg-surface&quot;&gt;&#10;        &lt;div class=&quot;pagination-info&quot;&gt;&#10;          &lt;span class=&quot;info-text&quot;&gt;&#10;            第 {{ imageStore.params.page }} 页，共 {{ totalPages }} 页&#10;          &lt;/span&gt;&#10;          &lt;span class=&quot;info-text&quot;&gt;&#10;            显示第 {{ startIndex }}-{{ endIndex }} 项，共 {{ imageStore.totalElements }} 项&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;el-pagination&#10;          v-model:current-page=&quot;imageStore.params.page&quot;&#10;          v-model:page-size=&quot;imageStore.params.pageSize&quot;&#10;          :total=&quot;imageStore.totalElements&quot;&#10;          :page-sizes=&quot;[20, 50, 100, 200]&quot;&#10;          layout=&quot;sizes, prev, pager, next, jumper&quot;&#10;          background&#10;          @size-change=&quot;handlePageSizeChange&quot;&#10;          @current-change=&quot;handlePageChange&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 图片预览 --&gt;&#10;    &lt;ImageViewer&#10;      v-if=&quot;viewerImage&quot;&#10;      :image=&quot;viewerImage&quot;&#10;      :images=&quot;imageStore.images&quot;&#10;      @close=&quot;closeViewer&quot;&#10;      @navigate=&quot;handleViewerNavigate&quot;&#10;    /&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, onUnmounted, watch } from 'vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { Picture, Refresh, Download, Delete } from '@element-plus/icons-vue'&#10;import { useImageStore } from '@/stores/image'&#10;import { getDeviceType, getResponsiveColumns, debounce, DeviceType } from '@/utils'&#10;import { deleteImage, getImageFile, getImageFileZip, type Image } from '@/api'&#10;import ImageCard from '@/components/image/ImageCard.vue'&#10;import ImageViewer from '@/components/image/ImageViewer.vue'&#10;&#10;const imageStore = useImageStore()&#10;const deviceType = ref&lt;DeviceType&gt;(getDeviceType())&#10;const selectedImages = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;const viewerImage = ref&lt;Image | null&gt;(null)&#10;const gridSize = ref(getResponsiveColumns())&#10;&#10;// 计算属性&#10;const selectedCount = computed(() =&gt; selectedImages.value.size)&#10;&#10;const isAllSelected = computed({&#10;  get: () =&gt; imageStore.images.length &gt; 0 &amp;&amp; selectedImages.value.size === imageStore.images.length,&#10;  set: (value: boolean) =&gt; handleSelectAll(value)&#10;})&#10;&#10;const isIndeterminate = computed(() =&gt;&#10;  selectedImages.value.size &gt; 0 &amp;&amp; selectedImages.value.size &lt; imageStore.images.length&#10;)&#10;&#10;const gridStyle = computed(() =&gt; ({&#10;  display: 'grid',&#10;  gridTemplateColumns: `repeat(${gridSize.value}, 1fr)`,&#10;  gap: 'var(--spacing-md)',&#10;  padding: 'var(--spacing-lg)'&#10;}))&#10;&#10;const totalPages = computed(() =&gt;&#10;  Math.ceil(imageStore.totalElements / imageStore.params.pageSize)&#10;)&#10;&#10;const startIndex = computed(() =&gt;&#10;  (imageStore.params.page - 1) * imageStore.params.pageSize + 1&#10;)&#10;&#10;const endIndex = computed(() =&gt;&#10;  Math.min(imageStore.params.page * imageStore.params.pageSize, imageStore.totalElements)&#10;)&#10;&#10;// 响应式处理&#10;const handleResize = debounce(() =&gt; {&#10;  deviceType.value = getDeviceType()&#10;  if (!gridSize.value) {&#10;    gridSize.value = getResponsiveColumns()&#10;  }&#10;}, 300)&#10;&#10;// 生命周期&#10;onMounted(async () =&gt; {&#10;  await imageStore.query()&#10;  window.addEventListener('resize', handleResize)&#10;})&#10;&#10;onUnmounted(() =&gt; {&#10;  window.removeEventListener('resize', handleResize)&#10;})&#10;&#10;// 监听设备类型变化，自动���整网格大小&#10;watch(deviceType, () =&gt; {&#10;  gridSize.value = getResponsiveColumns()&#10;})&#10;&#10;// 事件处理&#10;const handleRefresh = async () =&gt; {&#10;  try {&#10;    selectedImages.value.clear()&#10;    await imageStore.query()&#10;    ElMessage.success('刷新完成')&#10;  } catch (error) {&#10;    ElMessage.error('刷新失败')&#10;  }&#10;}&#10;&#10;const handleSelectAll = (selected: boolean) =&gt; {&#10;  if (selected) {&#10;    selectedImages.value = new Set(imageStore.images.map(img =&gt; img.hash))&#10;  } else {&#10;    selectedImages.value.clear()&#10;  }&#10;}&#10;&#10;const handleImageSelect = (image: Image, selected: boolean) =&gt; {&#10;  if (selected) {&#10;    selectedImages.value.add(image.hash)&#10;  } else {&#10;    selectedImages.value.delete(image.hash)&#10;  }&#10;}&#10;&#10;const handleImageClick = (image: Image) =&gt; {&#10;  viewerImage.value = image&#10;}&#10;&#10;const closeViewer = () =&gt; {&#10;  viewerImage.value = null&#10;}&#10;&#10;const handleViewerNavigate = (direction: 'prev' | 'next') =&gt; {&#10;  if (!viewerImage.value) return&#10;&#10;  const currentIndex = imageStore.images.findIndex(img =&gt; img.hash === viewerImage.value!.hash)&#10;  let nextIndex: number&#10;&#10;  if (direction === 'prev') {&#10;    nextIndex = currentIndex &gt; 0 ? currentIndex - 1 : imageStore.images.length - 1&#10;  } else {&#10;    nextIndex = currentIndex &lt; imageStore.images.length - 1 ? currentIndex + 1 : 0&#10;  }&#10;&#10;  viewerImage.value = imageStore.images[nextIndex]&#10;}&#10;&#10;const handleGridSizeChange = (size: number) =&gt; {&#10;  gridSize.value = size&#10;}&#10;&#10;// 分页处理&#10;const handlePageChange = async (_page: number) =&gt; {&#10;  selectedImages.value.clear()&#10;  await imageStore.query()&#10;}&#10;&#10;const handlePageSizeChange = async (_size: number) =&gt; {&#10;  selectedImages.value.clear()&#10;  imageStore.params.page = 1&#10;  await imageStore.query()&#10;}&#10;&#10;// 批量操作&#10;const handleBatchDownload = async () =&gt; {&#10;  const hashes = Array.from(selectedImages.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    ElMessage.info('开始准备下载文件...')&#10;&#10;    const { blob, filename } = hashes.length === 1&#10;      ? await getImageFile(hashes[0])&#10;      : await getImageFileZip(hashes)&#10;&#10;    const url = window.URL.createObjectURL(blob)&#10;    const link = document.createElement('a')&#10;    link.href = url&#10;    link.download = filename&#10;    document.body.appendChild(link)&#10;    link.click()&#10;    document.body.removeChild(link)&#10;    window.URL.revokeObjectURL(url)&#10;&#10;    ElMessage.success(`开始下载 ${hashes.length} 张图片`)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;    ElMessage.error('下载失败:请重试')&#10;  }&#10;}&#10;&#10;const handleBatchDelete = async () =&gt; {&#10;  const hashes = Array.from(selectedImages.value)&#10;  if (hashes.length === 0) return&#10;&#10;  try {&#10;    await ElMessageBox.confirm(&#10;      `确定要删除选中的 ${hashes.length} 张图片吗？此操作不可撤销。`,&#10;      '批量删除确认',&#10;      {&#10;        confirmButtonText: '确定删除',&#10;        cancelButtonText: '取消',&#10;        type: 'warning',&#10;        customClass: 'dark-message-box'&#10;      }&#10;    )&#10;&#10;    ElMessage.info('正在删除图片...')&#10;    await Promise.all(hashes.map(hash =&gt; deleteImage(hash)))&#10;&#10;    // 更�������本地状态&#10;    imageStore.images = imageStore.images.filter(&#10;      img =&gt; !selectedImages.value.has(img.hash)&#10;    )&#10;    selectedImages.value.clear()&#10;&#10;    ElMessage.success(`已成功删除 ${hashes.length} 张图片`)&#10;&#10;    // 如果当前页没有数据了，跳转到上一页&#10;    if (imageStore.images.length === 0 &amp;&amp; imageStore.params.page &gt; 1) {&#10;      imageStore.params.page--&#10;      await imageStore.query()&#10;    }&#10;  } catch (error) {&#10;    if (error !== 'cancel') {&#10;      console.error('删除失败:', error)&#10;      ElMessage.error('删��失败，请重试')&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-gallery {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  background: var(--dark-bg-secondary);&#10;}&#10;&#10;/* 加载状��� */&#10;.gallery-loading {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: var(--spacing-2xl);&#10;}&#10;&#10;.loading-content {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  gap: var(--spacing-lg);&#10;  max-width: 400px;&#10;  width: 100%;&#10;}&#10;&#10;.loading-text {&#10;  color: var(--dark-text-secondary);&#10;  font-size: 14px;&#10;}&#10;&#10;/* 空状态 */&#10;.gallery-empty {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;/* 画廊容器 */&#10;.gallery-container {&#10;  flex: 1;&#10;  display: flex;&#10;  flex-direction: column;&#10;  overflow-y: auto; /* 改为允许垂直滚动 */&#10;  overflow-x: hidden; /* 隐藏水平滚动 */&#10;}&#10;&#10;/* 工具栏 */&#10;.gallery-toolbar {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  padding: var(--spacing-md) var(--spacing-lg);&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;.toolbar-left,&#10;.toolbar-right {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-md);&#10;}&#10;&#10;.selection-info {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;.batch-actions {&#10;  display: flex;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;.view-controls {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-sm);&#10;}&#10;&#10;/* 图片网格 */&#10;.gallery-grid {&#10;  flex: 1;&#10;  background: var(--dark-bg-secondary);&#10;  /* 确保网格容器正确约束子元素 */&#10;  contain: layout style paint;&#10;}&#10;&#10;.gallery-item {&#10;  width: 100%;&#10;  /* 严格控制宽高比，防止重叠 */&#10;  aspect-ratio: 1;&#10;  /* 确保网格项不会溢出 */&#10;  min-width: 0;&#10;  min-height: 0;&#10;  /* 防止内容溢出 */&#10;  overflow: hidden;&#10;  border-radius: var(--radius-lg);&#10;  transition: all var(--transition-fast);&#10;  /* 确保在网格中的位置固定 */&#10;  position: relative;&#10;  /* 防止z-index导致的重叠 */&#10;  z-index: 1;&#10;}&#10;&#10;.gallery-item:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: var(--dark-shadow-medium);&#10;  /* 悬浮时提高z-index，但不影响布局 */&#10;  z-index: 2;&#10;}&#10;&#10;/* 分页工具栏 */&#10;.gallery-pagination {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  padding: var(--spacing-md) var(--spacing-lg);&#10;  border-top: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;.pagination-info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.info-text {&#10;  font-size: 12px;&#10;  color: var(--dark-text-tertiary);&#10;}&#10;&#10;/* 滚动条样式 */&#10;.gallery-container::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;.gallery-container::-webkit-scrollbar-track {&#10;  background: var(--dark-bg-primary);&#10;}&#10;&#10;.gallery-container::-webkit-scrollbar-thumb {&#10;  background: var(--dark-border-primary);&#10;  border-radius: var(--radius-sm);&#10;}&#10;&#10;.gallery-container::-webkit-scrollbar-thumb:hover {&#10;  background: var(--dark-border-secondary);&#10;}&#10;&#10;/* Element Plus 组件样式覆盖 */&#10;:deep(.el-checkbox__label) {&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;:deep(.el-slider__runway) {&#10;  background-color: var(--dark-surface-secondary);&#10;}&#10;&#10;:deep(.el-slider__bar) {&#10;  background-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-slider__button) {&#10;  border-color: var(--dark-primary);&#10;}&#10;&#10;:deep(.el-pagination) {&#10;  --el-pagination-bg-color: var(--dark-surface-secondary);&#10;  --el-pagination-text-color: var(--dark-text-primary);&#10;}&#10;&#10;/* 删除原来 gallery-grid 的滚动条样式，因为现在滚动在 gallery-container 上 */&#10;/* .gallery-grid::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-track {&#10;  background: var(--dark-bg-primary);&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb {&#10;  background: var(--dark-border-primary);&#10;  border-radius: var(--radius-sm);&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb:hover {&#10;  background: var(--dark-border-secondary);&#10;} */&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/layouts/DesktopLayout.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/layouts/DesktopLayout.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;el-container class=&quot;desktop-layout&quot;&gt;&#10;    &lt;!-- 左侧筛选面板 --&gt;&#10;    &lt;el-aside class=&quot;sidebar left-panel border-accent shadow-medium&quot;&gt;&#10;      &lt;div class=&quot;panel-header&quot;&gt;&#10;        &lt;h3 class=&quot;panel-title&quot;&gt;图片筛选&lt;/h3&gt;&#10;        &lt;div class=&quot;panel-subtitle&quot;&gt;精确查找您需要的图片&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;panel-content&quot;&gt;&#10;        &lt;FilterPanel /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-aside&gt;&#10;&#10;    &lt;!-- 主内容区域 --&gt;&#10;    &lt;el-main class=&quot;main-content-area&quot;&gt;&#10;      &lt;div class=&quot;content-header border-secondary bg-elevated shadow-light&quot;&gt;&#10;        &lt;div class=&quot;content-info&quot;&gt;&#10;          &lt;h2 class=&quot;content-title&quot;&gt;图片库&lt;/h2&gt;&#10;          &lt;div class=&quot;content-stats&quot;&gt;&#10;            &lt;span class=&quot;stats-item&quot;&gt;&#10;              &lt;i class=&quot;el-icon-picture&quot;&gt;&lt;/i&gt;&#10;              共 {{ imageStore.totalElements }} 张图片&#10;            &lt;/span&gt;&#10;            &lt;span class=&quot;stats-item&quot; v-if=&quot;imageStore.images.length &gt; 0&quot;&gt;&#10;              &lt;i class=&quot;el-icon-view&quot;&gt;&lt;/i&gt;&#10;              当前显示 {{ imageStore.images.length }} 张&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;content-actions&quot;&gt;&#10;          &lt;el-button-group&gt;&#10;            &lt;el-button :icon=&quot;Refresh&quot; @click=&quot;handleRefresh&quot; title=&quot;刷新&quot;&gt;&#10;              刷新&#10;            &lt;/el-button&gt;&#10;            &lt;el-button :icon=&quot;Setting&quot; @click=&quot;showSettingsDialog = true&quot; title=&quot;设置&quot;&gt;&#10;              设置&#10;            &lt;/el-button&gt;&#10;          &lt;/el-button-group&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;content-body&quot;&gt;&#10;        &lt;ImageGallery /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-main&gt;&#10;&#10;    &lt;!-- 右侧操作面板 --&gt;&#10;    &lt;el-aside class=&quot;sidebar right-panel border-accent shadow-medium&quot;&gt;&#10;      &lt;div class=&quot;panel-header&quot;&gt;&#10;        &lt;h3 class=&quot;panel-title&quot;&gt;上传管理&lt;/h3&gt;&#10;        &lt;div class=&quot;panel-subtitle&quot;&gt;批量上传和队列管理&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;panel-content&quot;&gt;&#10;        &lt;UploadManager /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-aside&gt;&#10;&#10;    &lt;!-- 设置对话框 --&gt;&#10;    &lt;SettingsDialog v-model=&quot;showSettingsDialog&quot; /&gt;&#10;  &lt;/el-container&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref } from 'vue'&#10;import { Refresh, Setting } from '@element-plus/icons-vue'&#10;import { ElMessage } from 'element-plus'&#10;import { useImageStore } from '@/stores/image'&#10;import FilterPanel from '@/components/panels/FilterPanel.vue'&#10;import UploadManager from '@/components/panels/UploadManager.vue'&#10;import ImageGallery from '@/components/gallery/ImageGallery.vue'&#10;import SettingsDialog from '@/components/dialogs/SettingsDialog.vue'&#10;&#10;const imageStore = useImageStore()&#10;const showSettingsDialog = ref(false)&#10;&#10;const handleRefresh = async () =&gt; {&#10;  try {&#10;    await imageStore.query()&#10;    ElMessage.success('刷新完成')&#10;  } catch (error) {&#10;    ElMessage.error('刷新失败')&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.desktop-layout {&#10;  height: 100vh;&#10;  background: var(--dark-bg-primary);&#10;  gap: var(--spacing-sm);&#10;  padding: var(--spacing-sm);&#10;}&#10;&#10;/* 侧边栏样式 */&#10;.sidebar {&#10;  width: 320px;&#10;  min-width: 280px;&#10;  max-width: 400px;&#10;  background: var(--dark-bg-elevated);&#10;  border-radius: var(--radius-lg);&#10;  padding: 0;&#10;  overflow: hidden;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.left-panel {&#10;  border-right: none;&#10;}&#10;&#10;.right-panel {&#10;  border-left: none;&#10;}&#10;&#10;/* 面板头部 */&#10;.panel-header {&#10;  padding: var(--spacing-lg);&#10;  background: var(--dark-surface-primary);&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;}&#10;&#10;.panel-title {&#10;  margin: 0 0 var(--spacing-xs) 0;&#10;  font-size: 18px;&#10;  font-weight: 600;&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;.panel-subtitle {&#10;  font-size: 12px;&#10;  color: var(--dark-text-tertiary);&#10;  line-height: 1.4;&#10;}&#10;&#10;/* 面板内容 */&#10;.panel-content {&#10;  flex: 1;&#10;  padding: var(--spacing-lg);&#10;  overflow-y: auto;&#10;}&#10;&#10;/* 主内容��域 */&#10;.main-content-area {&#10;  flex: 1;&#10;  padding: 0;&#10;  background: var(--dark-bg-secondary);&#10;  border-radius: var(--radius-lg);&#10;  border: 1px solid var(--dark-border-primary);&#10;  display: flex;&#10;  flex-direction: column;&#10;  overflow: hidden;&#10;}&#10;&#10;/* 内容头部 */&#10;.content-header {&#10;  padding: var(--spacing-lg) var(--spacing-xl);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#10;  background: var(--dark-surface-primary);&#10;}&#10;&#10;.content-info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.content-title {&#10;  margin: 0;&#10;  font-size: 20px;&#10;  font-weight: 600;&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;.content-stats {&#10;  display: flex;&#10;  gap: var(--spacing-md);&#10;  font-size: 13px;&#10;  color: var(--dark-text-secondary);&#10;}&#10;&#10;.stats-item {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-xs);&#10;}&#10;&#10;.stats-item i {&#10;  font-size: 14px;&#10;  color: var(--dark-primary);&#10;}&#10;&#10;/* 内容操作区 */&#10;.content-actions {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: var(--spacing-md);&#10;}&#10;&#10;/* 内容主体 */&#10;.content-body {&#10;  flex: 1;&#10;  overflow: hidden;&#10;  background: var(--dark-bg-secondary);&#10;}&#10;&#10;/* 按钮组优化 */&#10;:deep(.el-button-group) {&#10;  box-shadow: var(--dark-shadow-light);&#10;}&#10;&#10;:deep(.el-button-group .el-button) {&#10;  background: var(--dark-surface-secondary);&#10;  border-color: var(--dark-border-secondary);&#10;  color: var(--dark-text-secondary);&#10;}&#10;&#10;:deep(.el-button-group .el-button:hover) {&#10;  background: var(--dark-surface-hover);&#10;  border-color: var(--dark-border-accent);&#10;  color: var(--dark-text-primary);&#10;}&#10;&#10;/* 响应式调整 */&#10;@media (max-width: 1200px) {&#10;  .sidebar {&#10;    width: 280px;&#10;  }&#10;&#10;  .panel-header,&#10;  .panel-content {&#10;    padding: var(--spacing-md);&#10;  }&#10;&#10;  .content-header {&#10;    padding: var(--spacing-md) var(--spacing-lg);&#10;  }&#10;}&#10;&#10;@media (max-width: 1024px) {&#10;  .desktop-layout {&#10;    gap: var(--spacing-xs);&#10;    padding: var(--spacing-xs);&#10;  }&#10;&#10;  .sidebar {&#10;    width: 260px;&#10;  }&#10;&#10;  .content-title {&#10;    font-size: 18px;&#10;  }&#10;}&#10;&#10;/* 滚动条优化 */&#10;.panel-content::-webkit-scrollbar {&#10;  width: 6px;&#10;}&#10;&#10;.panel-content::-webkit-scrollbar-track {&#10;  background: var(--dark-bg-secondary);&#10;}&#10;&#10;.panel-content::-webkit-scrollbar-thumb {&#10;  background: var(--dark-border-primary);&#10;  border-radius: var(--radius-sm);&#10;}&#10;&#10;.panel-content::-webkit-scrollbar-thumb:hover {&#10;  background: var(--dark-border-secondary);&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;  &lt;el-container class=&quot;desktop-layout&quot;&gt;&#13;&#10;    &lt;!-- 左侧筛选面板 --&gt;&#13;&#10;    &lt;el-aside class=&quot;sidebar left-panel border-accent shadow-medium&quot;&gt;&#13;&#10;      &lt;div class=&quot;panel-header&quot;&gt;&#13;&#10;        &lt;h3 class=&quot;panel-title&quot;&gt;图片筛选&lt;/h3&gt;&#13;&#10;        &lt;div class=&quot;panel-subtitle&quot;&gt;精确查找您需要的图片&lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;div class=&quot;panel-content&quot;&gt;&#13;&#10;        &lt;FilterPanel /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/el-aside&gt;&#13;&#10;&#13;&#10;    &lt;!-- 主内容区域 --&gt;&#13;&#10;    &lt;el-main class=&quot;main-content-area&quot;&gt;&#13;&#10;      &lt;div class=&quot;content-header border-secondary bg-elevated shadow-light&quot;&gt;&#13;&#10;        &lt;div class=&quot;content-info&quot;&gt;&#13;&#10;          &lt;h2 class=&quot;content-title&quot;&gt;图片库&lt;/h2&gt;&#13;&#10;          &lt;div class=&quot;content-stats&quot;&gt;&#13;&#10;            &lt;span class=&quot;stats-item&quot;&gt;&#13;&#10;              &lt;i class=&quot;el-icon-picture&quot;&gt;&lt;/i&gt;&#13;&#10;              共 {{ imageStore.totalElements }} 张图片&#13;&#10;            &lt;/span&gt;&#13;&#10;            &lt;span class=&quot;stats-item&quot; v-if=&quot;imageStore.images.length &gt; 0&quot;&gt;&#13;&#10;              &lt;i class=&quot;el-icon-view&quot;&gt;&lt;/i&gt;&#13;&#10;              当前显示 {{ imageStore.images.length }} 张&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div class=&quot;content-actions&quot;&gt;&#13;&#10;          &lt;el-button-group&gt;&#13;&#10;            &lt;el-button :icon=&quot;Refresh&quot; @click=&quot;handleRefresh&quot; title=&quot;刷新&quot;&gt;&#13;&#10;              刷新&#13;&#10;            &lt;/el-button&gt;&#13;&#10;            &lt;el-button :icon=&quot;Setting&quot; @click=&quot;showSettingsDialog = true&quot; title=&quot;设置&quot;&gt;&#13;&#10;              设置&#13;&#10;            &lt;/el-button&gt;&#13;&#10;          &lt;/el-button-group&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div class=&quot;content-body&quot;&gt;&#13;&#10;        &lt;ImageGallery /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/el-main&gt;&#13;&#10;&#13;&#10;    &lt;!-- 右侧操作面板 --&gt;&#13;&#10;    &lt;el-aside class=&quot;sidebar right-panel border-accent shadow-medium&quot;&gt;&#13;&#10;      &lt;div class=&quot;panel-header&quot;&gt;&#13;&#10;        &lt;h3 class=&quot;panel-title&quot;&gt;上传管理&lt;/h3&gt;&#13;&#10;        &lt;div class=&quot;panel-subtitle&quot;&gt;批量上传和队列管理&lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;div class=&quot;panel-content&quot;&gt;&#13;&#10;        &lt;UploadManager /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/el-aside&gt;&#13;&#10;&#13;&#10;    &lt;!-- 设置对话框 --&gt;&#13;&#10;    &lt;SettingsDialog v-model=&quot;showSettingsDialog&quot; /&gt;&#13;&#10;  &lt;/el-container&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#13;&#10;import { ref } from 'vue'&#13;&#10;import { Refresh, Setting } from '@element-plus/icons-vue'&#13;&#10;import { ElMessage } from 'element-plus'&#13;&#10;import { useImageStore } from '@/stores/image'&#13;&#10;import FilterPanel from '@/components/panels/FilterPanel.vue'&#13;&#10;import UploadManager from '@/components/panels/UploadManager.vue'&#13;&#10;import ImageGallery from '@/components/gallery/ImageGallery.vue'&#13;&#10;import SettingsDialog from '@/components/dialogs/SettingsDialog.vue'&#13;&#10;&#13;&#10;const imageStore = useImageStore()&#13;&#10;const showSettingsDialog = ref(false)&#13;&#10;&#13;&#10;const handleRefresh = async () =&gt; {&#13;&#10;  try {&#13;&#10;    await imageStore.query()&#13;&#10;    ElMessage.success('刷新完成')&#13;&#10;  } catch (error) {&#13;&#10;    ElMessage.error('刷新失败')&#13;&#10;  }&#13;&#10;}&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;.desktop-layout {&#13;&#10;  height: 100vh;&#13;&#10;  background: var(--dark-bg-primary);&#13;&#10;  gap: var(--spacing-sm);&#13;&#10;  padding: var(--spacing-sm);&#13;&#10;}&#13;&#10;&#13;&#10;/* 侧边栏样式 */&#13;&#10;.sidebar {&#13;&#10;  width: 320px;&#13;&#10;  min-width: 280px;&#13;&#10;  max-width: 400px;&#13;&#10;  background: var(--dark-bg-elevated);&#13;&#10;  border-radius: var(--radius-lg);&#13;&#10;  padding: 0;&#13;&#10;  overflow: hidden;&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;}&#13;&#10;&#13;&#10;.left-panel {&#13;&#10;  border-right: none;&#13;&#10;}&#13;&#10;&#13;&#10;.right-panel {&#13;&#10;  border-left: none;&#13;&#10;}&#13;&#10;&#13;&#10;/* 面板头部 */&#13;&#10;.panel-header {&#13;&#10;  padding: var(--spacing-lg);&#13;&#10;  background: var(--dark-surface-primary);&#13;&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#13;&#10;}&#13;&#10;&#13;&#10;.panel-title {&#13;&#10;  margin: 0 0 var(--spacing-xs) 0;&#13;&#10;  font-size: 18px;&#13;&#10;  font-weight: 600;&#13;&#10;  color: var(--dark-text-primary);&#13;&#10;}&#13;&#10;&#13;&#10;.panel-subtitle {&#13;&#10;  font-size: 12px;&#13;&#10;  color: var(--dark-text-tertiary);&#13;&#10;  line-height: 1.4;&#13;&#10;}&#13;&#10;&#13;&#10;/* 面板内容 */&#13;&#10;.panel-content {&#13;&#10;  flex: 1;&#13;&#10;  padding: var(--spacing-lg);&#13;&#10;  overflow-y: auto;&#13;&#10;}&#13;&#10;&#13;&#10;/* 主内容��域 */&#13;&#10;.main-content-area {&#13;&#10;  flex: 1;&#13;&#10;  padding: 0;&#13;&#10;  background: var(--dark-bg-secondary);&#13;&#10;  border-radius: var(--radius-lg);&#13;&#10;  border: 1px solid var(--dark-border-primary);&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  overflow: hidden;&#13;&#10;}&#13;&#10;&#13;&#10;/* 内容头部 */&#13;&#10;.content-header {&#13;&#10;  padding: var(--spacing-lg) var(--spacing-xl);&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: space-between;&#13;&#10;  border-bottom: 1px solid var(--dark-border-secondary);&#13;&#10;  background: var(--dark-surface-primary);&#13;&#10;}&#13;&#10;&#13;&#10;.content-info {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  gap: var(--spacing-xs);&#13;&#10;}&#13;&#10;&#13;&#10;.content-title {&#13;&#10;  margin: 0;&#13;&#10;  font-size: 20px;&#13;&#10;  font-weight: 600;&#13;&#10;  color: var(--dark-text-primary);&#13;&#10;}&#13;&#10;&#13;&#10;.content-stats {&#13;&#10;  display: flex;&#13;&#10;  gap: var(--spacing-md);&#13;&#10;  font-size: 13px;&#13;&#10;  color: var(--dark-text-secondary);&#13;&#10;}&#13;&#10;&#13;&#10;.stats-item {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: var(--spacing-xs);&#13;&#10;}&#13;&#10;&#13;&#10;.stats-item i {&#13;&#10;  font-size: 14px;&#13;&#10;  color: var(--dark-primary);&#13;&#10;}&#13;&#10;&#13;&#10;/* 内容操作区 */&#13;&#10;.content-actions {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: var(--spacing-md);&#13;&#10;}&#13;&#10;&#13;&#10;/* 内容主体 */&#13;&#10;.content-body {&#13;&#10;  flex: 1;&#13;&#10;  overflow: visible; /* 改为 visible，让子组件自己处理滚动 */&#13;&#10;  background: var(--dark-bg-secondary);&#13;&#10;  min-height: 0; /* 确保 flex 子项可以收缩 */&#13;&#10;}&#13;&#10;&#13;&#10;/* 按钮组优化 */&#13;&#10;:deep(.el-button-group) {&#13;&#10;  box-shadow: var(--dark-shadow-light);&#13;&#10;}&#13;&#10;&#13;&#10;:deep(.el-button-group .el-button) {&#13;&#10;  background: var(--dark-surface-secondary);&#13;&#10;  border-color: var(--dark-border-secondary);&#13;&#10;  color: var(--dark-text-secondary);&#13;&#10;}&#13;&#10;&#13;&#10;:deep(.el-button-group .el-button:hover) {&#13;&#10;  background: var(--dark-surface-hover);&#13;&#10;  border-color: var(--dark-border-accent);&#13;&#10;  color: var(--dark-text-primary);&#13;&#10;}&#13;&#10;&#13;&#10;/* 响应式调整 */&#13;&#10;@media (max-width: 1200px) {&#13;&#10;  .sidebar {&#13;&#10;    width: 280px;&#13;&#10;  }&#13;&#10;&#13;&#10;  .panel-header,&#13;&#10;  .panel-content {&#13;&#10;    padding: var(--spacing-md);&#13;&#10;  }&#13;&#10;&#13;&#10;  .content-header {&#13;&#10;    padding: var(--spacing-md) var(--spacing-lg);&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 1024px) {&#13;&#10;  .desktop-layout {&#13;&#10;    gap: var(--spacing-xs);&#13;&#10;    padding: var(--spacing-xs);&#13;&#10;  }&#13;&#10;&#13;&#10;  .sidebar {&#13;&#10;    width: 260px;&#13;&#10;  }&#13;&#10;&#13;&#10;  .content-title {&#13;&#10;    font-size: 18px;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;/* 滚动条优化 */&#13;&#10;.panel-content::-webkit-scrollbar {&#13;&#10;  width: 6px;&#13;&#10;}&#13;&#10;&#13;&#10;.panel-content::-webkit-scrollbar-track {&#13;&#10;  background: var(--dark-bg-secondary);&#13;&#10;}&#13;&#10;&#13;&#10;.panel-content::-webkit-scrollbar-thumb {&#13;&#10;  background: var(--dark-border-primary);&#13;&#10;  border-radius: var(--radius-sm);&#13;&#10;}&#13;&#10;&#13;&#10;.panel-content::-webkit-scrollbar-thumb:hover {&#13;&#10;  background: var(--dark-border-secondary);&#13;&#10;}&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>