<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=ImageDrawer&#10;spring.datasource.url=jdbc:sqlite:./data/db/data.sqlite&#10;spring.datasource.driver-class-name=org.sqlite.JDBC&#10;spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.servlet.multipart.max-file-size=100MB&#10;spring.servlet.multipart.max-request-size=100MB&#10;image-drawer.data.dir=./data&#10;" />
              <option name="updatedContent" value="spring.application.name=ImageDrawer&#10;spring.datasource.url=jdbc:sqlite:./data/db/data.sqlite&#10;spring.datasource.driver-class-name=org.sqlite.JDBC&#10;spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.servlet.multipart.max-file-size=100MB&#10;spring.servlet.multipart.max-request-size=100MB&#10;image-drawer.data.dir=./data" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;app&quot;&gt;&#10;    &lt;el-container&gt;&#10;      &lt;!-- 顶部导航栏 --&gt;&#10;      &lt;el-header height=&quot;60px&quot;&gt;&#10;        &lt;div class=&quot;header-content&quot;&gt;&#10;          &lt;div class=&quot;logo&quot;&gt;&#10;            &lt;h2&gt;图片管理器&lt;/h2&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;header-stats&quot;&gt;&#10;            &lt;span&gt;共 {{ imageStore.total }} 张图片&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/el-header&gt;&#10;&#10;      &lt;el-container&gt;&#10;        &lt;!-- 左侧过滤面板 --&gt;&#10;        &lt;el-aside width=&quot;300px&quot;&gt;&#10;          &lt;FilterPanel /&gt;&#10;        &lt;/el-aside&gt;&#10;&#10;        &lt;!-- 主内容区域 --&gt;&#10;        &lt;el-main&gt;&#10;          &lt;!-- 图片网格 --&gt;&#10;          &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;loading&quot;&gt;&#10;            &lt;el-icon class=&quot;is-loading&quot;&gt;&lt;Loading /&gt;&lt;/el-icon&gt;&#10;            &lt;span style=&quot;margin-left: 8px&quot;&gt;加载中...&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div v-else-if=&quot;imageStore.isEmpty&quot; class=&quot;empty-state&quot;&gt;&#10;            &lt;div class=&quot;empty-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;div&gt;暂无图片&lt;/div&gt;&#10;            &lt;div style=&quot;margin-top: 8px; font-size: 14px;&quot;&gt;上传一些图片开始使用吧&lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div v-else class=&quot;image-grid&quot;&gt;&#10;            &lt;ImageCard&#10;              v-for=&quot;image in imageStore.images&quot;&#10;              :key=&quot;image.hash&quot;&#10;              :image=&quot;image&quot;&#10;              @preview=&quot;showPreview&quot;&#10;              @delete=&quot;deleteImage&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/el-main&gt;&#10;&#10;        &lt;!-- 右侧上传面板 --&gt;&#10;        &lt;el-aside width=&quot;300px&quot;&gt;&#10;          &lt;UploadPanel /&gt;&#10;        &lt;/el-aside&gt;&#10;      &lt;/el-container&gt;&#10;    &lt;/el-container&gt;&#10;&#10;    &lt;!-- 图片预览对话框 --&gt;&#10;    &lt;el-dialog&#10;      v-model=&quot;previewVisible&quot;&#10;      :title=&quot;previewImage?.filename&quot;&#10;      width=&quot;80%&quot;&#10;      center&#10;    &gt;&#10;      &lt;div v-if=&quot;previewImage&quot; class=&quot;preview-content&quot;&gt;&#10;        &lt;img&#10;          :src=&quot;imageAPI.getImageUrl(previewImage.hash)&quot;&#10;          :alt=&quot;previewImage.filename&quot;&#10;          class=&quot;preview-image&quot;&#10;        /&gt;&#10;        &lt;div class=&quot;preview-info&quot;&gt;&#10;          &lt;p&gt;&lt;strong&gt;文件名:&lt;/strong&gt; {{ previewImage.filename }}&lt;/p&gt;&#10;          &lt;p&gt;&lt;strong&gt;尺寸:&lt;/strong&gt; {{ previewImage.width }}×{{ previewImage.height }}&lt;/p&gt;&#10;          &lt;p&gt;&lt;strong&gt;大小:&lt;/strong&gt; {{ formatSize(previewImage.size) }}&lt;/p&gt;&#10;          &lt;p&gt;&lt;strong&gt;格式:&lt;/strong&gt; {{ previewImage.mimetype }}&lt;/p&gt;&#10;          &lt;div v-if=&quot;previewImage.tags.length&quot; class=&quot;preview-tags&quot;&gt;&#10;            &lt;strong&gt;标签:&lt;/strong&gt;&#10;            &lt;span class=&quot;tag&quot; v-for=&quot;tag in previewImage.tags&quot; :key=&quot;tag&quot;&gt;&#10;              {{ tag }}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-dialog&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, onMounted } from 'vue'&#10;import { Loading } from '@element-plus/icons-vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { useImageStore } from './store'&#10;import { imageAPI } from './api'&#10;import FilterPanel from './FilterPanel.vue'&#10;import UploadPanel from './UploadPanel.vue'&#10;import ImageCard from './ImageCard.vue'&#10;import type { Image } from './types'&#10;&#10;const imageStore = useImageStore()&#10;&#10;const previewVisible = ref(false)&#10;const previewImage = ref&lt;Image | null&gt;(null)&#10;&#10;const showPreview = (image: Image) =&gt; {&#10;  previewImage.value = image&#10;  previewVisible.value = true&#10;}&#10;&#10;const deleteImage = async (hash: string) =&gt; {&#10;  try {&#10;    await ElMessageBox.confirm('确定要删除这张图片吗？', '确认删除', {&#10;      type: 'warning'&#10;    })&#10;&#10;    await imageStore.deleteImage(hash)&#10;    ElMessage.success('删除成功')&#10;  } catch (error) {&#10;    if (error !== 'cancel') {&#10;      ElMessage.error('删除失败')&#10;    }&#10;  }&#10;}&#10;&#10;const formatSize = (bytes: number) =&gt; {&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#10;  if (bytes === 0) return '0 B'&#10;  const i = Math.floor(Math.log(bytes) / Math.log(1024))&#10;  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]&#10;}&#10;&#10;onMounted(() =&gt; {&#10;  imageStore.loadImages()&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.header-content {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  height: 100%;&#10;  padding: 0 20px;&#10;}&#10;&#10;.logo h2 {&#10;  color: #e4e4e7;&#10;  margin: 0;&#10;}&#10;&#10;.header-stats {&#10;  color: #a1a1aa;&#10;  font-size: 14px;&#10;}&#10;&#10;.preview-content {&#10;  text-align: center;&#10;}&#10;&#10;.preview-info {&#10;  margin-top: 20px;&#10;  text-align: left;&#10;  background: #18181b;&#10;  padding: 16px;&#10;  border-radius: 8px;&#10;}&#10;&#10;.preview-info p {&#10;  margin: 8px 0;&#10;}&#10;&#10;.preview-tags {&#10;  margin-top: 12px;&#10;}&#10;&#10;.preview-tags .tag {&#10;  margin-left: 8px;&#10;  margin-right: 4px;&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;app&quot;&gt;&#10;    &lt;el-container&gt;&#10;      &lt;!-- 顶部导航栏 --&gt;&#10;      &lt;el-header height=&quot;60px&quot;&gt;&#10;        &lt;div class=&quot;header-content&quot;&gt;&#10;          &lt;div class=&quot;logo&quot;&gt;&#10;            &lt;h2&gt;图片管理器&lt;/h2&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;header-stats&quot;&gt;&#10;            &lt;span v-if=&quot;imageStore.total &gt; 0&quot;&gt;共 {{ imageStore.total }} 张图片&lt;/span&gt;&#10;            &lt;span v-if=&quot;imageStore.hasSelection&quot; class=&quot;selection-info&quot;&gt;&#10;              已选择 {{ imageStore.selectedImages.size }} 张&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;header-actions&quot;&gt;&#10;            &lt;el-button &#10;              :icon=&quot;Refresh&quot; &#10;              @click=&quot;imageStore.refresh&quot; &#10;              :loading=&quot;imageStore.loading&quot;&#10;              title=&quot;刷新&quot;&#10;            &gt;&#10;              刷新&#10;            &lt;/el-button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/el-header&gt;&#10;&#10;      &lt;el-container&gt;&#10;        &lt;!-- 左侧过滤面板 --&gt;&#10;        &lt;el-aside width=&quot;300px&quot;&gt;&#10;          &lt;FilterPanel /&gt;&#10;        &lt;/el-aside&gt;&#10;&#10;        &lt;!-- 主内容区域 --&gt;&#10;        &lt;el-main&gt;&#10;          &lt;!-- 快捷操作栏 --&gt;&#10;          &lt;div class=&quot;toolbar&quot; v-if=&quot;imageStore.hasImages&quot;&gt;&#10;            &lt;div class=&quot;toolbar-left&quot;&gt;&#10;              &lt;el-checkbox &#10;                :indeterminate=&quot;isIndeterminate&quot;&#10;                v-model=&quot;isAllSelected&quot;&#10;                @change=&quot;handleSelectAll&quot;&#10;              &gt;&#10;                全选&#10;              &lt;/el-checkbox&gt;&#10;              &lt;span class=&quot;selection-count&quot; v-if=&quot;imageStore.hasSelection&quot;&gt;&#10;                已选择 {{ imageStore.selectedImages.size }} 张&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;toolbar-right&quot;&gt;&#10;              &lt;el-button-group v-if=&quot;imageStore.hasSelection&quot;&gt;&#10;                &lt;el-button &#10;                  type=&quot;primary&quot; &#10;                  :icon=&quot;Download&quot;&#10;                  @click=&quot;downloadSelected&quot;&#10;                  :loading=&quot;downloading&quot;&#10;                &gt;&#10;                  下载&#10;                &lt;/el-button&gt;&#10;                &lt;el-button &#10;                  type=&quot;danger&quot; &#10;                  :icon=&quot;Delete&quot;&#10;                  @click=&quot;deleteSelected&quot;&#10;                  :loading=&quot;deleting&quot;&#10;                &gt;&#10;                  删除&#10;                &lt;/el-button&gt;&#10;              &lt;/el-button-group&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- 图片网格 --&gt;&#10;          &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;loading&quot;&gt;&#10;            &lt;el-icon class=&quot;is-loading&quot;&gt;&lt;Loading /&gt;&lt;/el-icon&gt;&#10;            &lt;span style=&quot;margin-left: 8px&quot;&gt;加载中...&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div v-else-if=&quot;imageStore.isEmpty&quot; class=&quot;empty-state&quot;&gt;&#10;            &lt;div class=&quot;empty-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;empty-title&quot;&gt;暂无图片&lt;/div&gt;&#10;            &lt;div class=&quot;empty-subtitle&quot;&gt;上传一些图片开始使用吧&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div v-else&gt;&#10;            &lt;div class=&quot;image-grid&quot;&gt;&#10;              &lt;ImageCard&#10;                v-for=&quot;image in imageStore.images&quot;&#10;                :key=&quot;image.hash&quot;&#10;                :image=&quot;image&quot;&#10;                @preview=&quot;showPreview&quot;&#10;                @delete=&quot;deleteImage&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- 分页控制 --&gt;&#10;            &lt;div class=&quot;pagination-wrapper&quot; v-if=&quot;imageStore.totalPages &gt; 1&quot;&gt;&#10;              &lt;el-pagination&#10;                v-model:current-page=&quot;currentPage&quot;&#10;                :page-size=&quot;imageStore.queryParams.pageSize&quot;&#10;                :total=&quot;imageStore.total&quot;&#10;                :page-sizes=&quot;[20, 50, 100, 200]&quot;&#10;                layout=&quot;total, sizes, prev, pager, next, jumper&quot;&#10;                @size-change=&quot;handleSizeChange&quot;&#10;                @current-change=&quot;handleCurrentChange&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/el-main&gt;&#10;&#10;        &lt;!-- 右侧上传面板 --&gt;&#10;        &lt;el-aside width=&quot;300px&quot;&gt;&#10;          &lt;UploadPanel /&gt;&#10;        &lt;/el-aside&gt;&#10;      &lt;/el-container&gt;&#10;    &lt;/el-container&gt;&#10;&#10;    &lt;!-- 图片预览对话框 --&gt;&#10;    &lt;el-dialog&#10;      v-model=&quot;previewVisible&quot;&#10;      :title=&quot;previewImage?.filename&quot;&#10;      width=&quot;90%&quot;&#10;      center&#10;      class=&quot;preview-dialog&quot;&#10;    &gt;&#10;      &lt;div v-if=&quot;previewImage&quot; class=&quot;preview-content&quot;&gt;&#10;        &lt;div class=&quot;preview-image-container&quot;&gt;&#10;          &lt;img &#10;            :src=&quot;imageAPI.getImageUrl(previewImage.hash)&quot; &#10;            :alt=&quot;previewImage.filename&quot;&#10;            class=&quot;preview-image&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;preview-info&quot;&gt;&#10;          &lt;div class=&quot;info-grid&quot;&gt;&#10;            &lt;div class=&quot;info-item&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;文件名:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value&quot;&gt;{{ previewImage.filename }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;info-item&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;尺寸:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value&quot;&gt;{{ previewImage.width }}×{{ previewImage.height }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;info-item&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;大小:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value&quot;&gt;{{ formatSize(previewImage.size) }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;info-item&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;格式:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value&quot;&gt;{{ previewImage.mimetype }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;info-item&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;评级:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value rating&quot; :class=&quot;`rating-${previewImage.rating}`&quot;&gt;&#10;                {{ getRatingText(previewImage.rating) }}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;info-item&quot; v-if=&quot;previewImage.uploadTime&quot;&gt;&#10;              &lt;span class=&quot;info-label&quot;&gt;上传时间:&lt;/span&gt;&#10;              &lt;span class=&quot;info-value&quot;&gt;{{ formatDate(previewImage.uploadTime) }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div v-if=&quot;previewImage.tags.length&quot; class=&quot;preview-tags&quot;&gt;&#10;            &lt;div class=&quot;tags-label&quot;&gt;标签:&lt;/div&gt;&#10;            &lt;div class=&quot;tags-list&quot;&gt;&#10;              &lt;span class=&quot;tag&quot; v-for=&quot;tag in previewImage.tags&quot; :key=&quot;tag&quot;&gt;&#10;                {{ tag }}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/el-dialog&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted } from 'vue'&#10;import { Loading, Refresh, Download, Delete } from '@element-plus/icons-vue'&#10;import { ElMessageBox, ElMessage } from 'element-plus'&#10;import { useImageStore } from './store'&#10;import { imageAPI } from './api'&#10;import FilterPanel from './FilterPanel.vue'&#10;import UploadPanel from './UploadPanel.vue'&#10;import ImageCard from './ImageCard.vue'&#10;import type { Image } from './types'&#10;&#10;const imageStore = useImageStore()&#10;&#10;const previewVisible = ref(false)&#10;const previewImage = ref&lt;Image | null&gt;(null)&#10;const currentPage = ref(1)&#10;const downloading = ref(false)&#10;const deleting = ref(false)&#10;&#10;// 全选相关计算属性&#10;const isAllSelected = computed({&#10;  get: () =&gt; {&#10;    return imageStore.hasImages &amp;&amp; &#10;           imageStore.images.every(img =&gt; imageStore.isImageSelected(img.hash))&#10;  },&#10;  set: (value: boolean) =&gt; {&#10;    if (value) {&#10;      imageStore.selectAllImages()&#10;    } else {&#10;      imageStore.clearSelection()&#10;    }&#10;  }&#10;})&#10;&#10;const isIndeterminate = computed(() =&gt; {&#10;  const selectedCount = imageStore.selectedImages.size&#10;  const totalCount = imageStore.images.length&#10;  return selectedCount &gt; 0 &amp;&amp; selectedCount &lt; totalCount&#10;})&#10;&#10;const showPreview = (image: Image) =&gt; {&#10;  previewImage.value = image&#10;  previewVisible.value = true&#10;}&#10;&#10;const deleteImage = async (hash: string) =&gt; {&#10;  try {&#10;    await ElMessageBox.confirm('确定要删除这张图片吗？', '确认删除', {&#10;      type: 'warning'&#10;    })&#10;    &#10;    await imageStore.deleteImage(hash)&#10;    ElMessage.success('删除成功')&#10;  } catch (error) {&#10;    if (error !== 'cancel') {&#10;      ElMessage.error('删除失败')&#10;    }&#10;  }&#10;}&#10;&#10;const handleSelectAll = (value: boolean) =&gt; {&#10;  if (value) {&#10;    imageStore.selectAllImages()&#10;  } else {&#10;    imageStore.clearSelection()&#10;  }&#10;}&#10;&#10;const downloadSelected = async () =&gt; {&#10;  if (!imageStore.hasSelection) return&#10;  &#10;  downloading.value = true&#10;  try {&#10;    await imageStore.downloadSelectedImages()&#10;    ElMessage.success('下载完成')&#10;  } catch (error) {&#10;    ElMessage.error('下载失败')&#10;  } finally {&#10;    downloading.value = false&#10;  }&#10;}&#10;&#10;const deleteSelected = async () =&gt; {&#10;  if (!imageStore.hasSelection) return&#10;  &#10;  try {&#10;    await ElMessageBox.confirm(&#10;      `确定要删除选中的 ${imageStore.selectedImages.size} 张图片吗？`,&#10;      '批量删除确认',&#10;      { type: 'warning' }&#10;    )&#10;    &#10;    deleting.value = true&#10;    await imageStore.deleteSelectedImages()&#10;    ElMessage.success('删除成功')&#10;  } catch (error) {&#10;    if (error !== 'cancel') {&#10;      ElMessage.error('删除失败')&#10;    }&#10;  } finally {&#10;    deleting.value = false&#10;  }&#10;}&#10;&#10;const handleSizeChange = (size: number) =&gt; {&#10;  imageStore.updateQuery({ pageSize: size })&#10;}&#10;&#10;const handleCurrentChange = (page: number) =&gt; {&#10;  imageStore.goToPage(page)&#10;}&#10;&#10;const formatSize = (bytes: number) =&gt; {&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#10;  if (bytes === 0) return '0 B'&#10;  const i = Math.floor(Math.log(bytes) / Math.log(1024))&#10;  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]&#10;}&#10;&#10;const getRatingText = (rating: string) =&gt; {&#10;  const ratingMap: Record&lt;string, string&gt; = {&#10;    'general': '一般',&#10;    'sensitive': '敏感',&#10;    'explicit': '明确',&#10;    'all': '全部'&#10;  }&#10;  return ratingMap[rating] || rating&#10;}&#10;&#10;const formatDate = (dateString: string) =&gt; {&#10;  try {&#10;    return new Date(dateString).toLocaleString('zh-CN')&#10;  } catch {&#10;    return dateString&#10;  }&#10;}&#10;&#10;onMounted(() =&gt; {&#10;  imageStore.loadImages()&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.header-content {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  height: 100%;&#10;  padding: 0 20px;&#10;}&#10;&#10;.logo h2 {&#10;  color: #e4e4e7;&#10;  margin: 0;&#10;}&#10;&#10;.header-stats {&#10;  display: flex;&#10;  gap: 16px;&#10;  color: #a1a1aa;&#10;  font-size: 14px;&#10;}&#10;&#10;.selection-info {&#10;  color: #3b82f6;&#10;  font-weight: 500;&#10;}&#10;&#10;.header-actions {&#10;  display: flex;&#10;  gap: 12px;&#10;}&#10;&#10;.toolbar {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 16px 0;&#10;  border-bottom: 1px solid #27272a;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.toolbar-left {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 16px;&#10;}&#10;&#10;.selection-count {&#10;  color: #3b82f6;&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;}&#10;&#10;.empty-state {&#10;  text-align: center;&#10;  padding: 80px 20px;&#10;  color: #71717a;&#10;}&#10;&#10;.empty-icon {&#10;  font-size: 64px;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.empty-title {&#10;  font-size: 18px;&#10;  font-weight: 500;&#10;  margin-bottom: 8px;&#10;  color: #a1a1aa;&#10;}&#10;&#10;.empty-subtitle {&#10;  font-size: 14px;&#10;}&#10;&#10;.pagination-wrapper {&#10;  display: flex;&#10;  justify-content: center;&#10;  padding: 40px 0;&#10;}&#10;&#10;.preview-content {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 20px;&#10;}&#10;&#10;.preview-image-container {&#10;  display: flex;&#10;  justify-content: center;&#10;  background: #000;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;}&#10;&#10;.preview-image {&#10;  max-width: 100%;&#10;  max-height: 70vh;&#10;  object-fit: contain;&#10;}&#10;&#10;.preview-info {&#10;  background: #18181b;&#10;  padding: 20px;&#10;  border-radius: 8px;&#10;}&#10;&#10;.info-grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#10;  gap: 12px;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.info-item {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 8px 0;&#10;}&#10;&#10;.info-label {&#10;  font-weight: 500;&#10;  color: #a1a1aa;&#10;}&#10;&#10;.info-value {&#10;  color: #e4e4e7;&#10;  font-weight: 500;&#10;}&#10;&#10;.info-value.rating {&#10;  padding: 2px 8px;&#10;  border-radius: 4px;&#10;  font-size: 12px;&#10;}&#10;&#10;.rating-general {&#10;  background: #22c55e;&#10;  color: white;&#10;}&#10;&#10;.rating-sensitive {&#10;  background: #f59e0b;&#10;  color: white;&#10;}&#10;&#10;.rating-explicit {&#10;  background: #ef4444;&#10;  color: white;&#10;}&#10;&#10;.preview-tags {&#10;  border-top: 1px solid #27272a;&#10;  padding-top: 16px;&#10;}&#10;&#10;.tags-label {&#10;  font-weight: 500;&#10;  color: #a1a1aa;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.tags-list {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 8px;&#10;}&#10;&#10;.tag {&#10;  background: #3f3f46;&#10;  color: #d4d4d8;&#10;  padding: 4px 12px;&#10;  border-radius: 16px;&#10;  font-size: 12px;&#10;}&#10;&#10;:deep(.preview-dialog) {&#10;  background: #0a0a0a;&#10;}&#10;&#10;:deep(.preview-dialog .el-dialog__body) {&#10;  padding: 20px;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/FilterPanel.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/FilterPanel.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;filter-panel&quot;&gt;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#10;      &lt;div class=&quot;filter-title&quot;&gt;标签筛选&lt;/div&gt;&#10;      &lt;el-select&#10;        v-model=&quot;selectedTags&quot;&#10;        multiple&#10;        filterable&#10;        placeholder=&quot;选择标签&quot;&#10;        style=&quot;width: 100%&quot;&#10;        @change=&quot;updateTags&quot;&#10;      &gt;&#10;        &lt;el-option&#10;          v-for=&quot;tag in allTags&quot;&#10;          :key=&quot;tag&quot;&#10;          :label=&quot;tag&quot;&#10;          :value=&quot;tag&quot;&#10;        /&gt;&#10;      &lt;/el-select&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#10;      &lt;div class=&quot;filter-title&quot;&gt;排序方式&lt;/div&gt;&#10;      &lt;el-select&#10;        v-model=&quot;sortType&quot;&#10;        placeholder=&quot;选择排序&quot;&#10;        style=&quot;width: 100%&quot;&#10;        @change=&quot;updateSort&quot;&#10;      &gt;&#10;        &lt;el-option label=&quot;随机&quot; value=&quot;random&quot; /&gt;&#10;        &lt;el-option label=&quot;文件大小&quot; value=&quot;size&quot; /&gt;&#10;        &lt;el-option label=&quot;上传时间&quot; value=&quot;time&quot; /&gt;&#10;      &lt;/el-select&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#10;      &lt;div class=&quot;filter-title&quot;&gt;内容评级&lt;/div&gt;&#10;      &lt;el-select&#10;        v-model=&quot;rating&quot;&#10;        placeholder=&quot;选择评级&quot;&#10;        style=&quot;width: 100%&quot;&#10;        @change=&quot;updateRating&quot;&#10;      &gt;&#10;        &lt;el-option label=&quot;全部&quot; value=&quot;all&quot; /&gt;&#10;        &lt;el-option label=&quot;一般&quot; value=&quot;general&quot; /&gt;&#10;        &lt;el-option label=&quot;敏感&quot; value=&quot;sensitive&quot; /&gt;&#10;        &lt;el-option label=&quot;明确&quot; value=&quot;explicit&quot; /&gt;&#10;      &lt;/el-select&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;refresh&quot; style=&quot;width: 100%&quot;&gt;&#10;        刷新&#10;      &lt;/el-button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, onMounted } from 'vue'&#10;import { useImageStore } from './store'&#10;&#10;const imageStore = useImageStore()&#10;&#10;const selectedTags = ref&lt;string[]&gt;([])&#10;const sortType = ref('random')&#10;const rating = ref('all')&#10;const allTags = ref&lt;string[]&gt;([])&#10;&#10;const updateTags = () =&gt; {&#10;  imageStore.updateQuery({ tags: selectedTags.value })&#10;}&#10;&#10;const updateSort = () =&gt; {&#10;  imageStore.updateQuery({ sort: sortType.value })&#10;}&#10;&#10;const updateRating = () =&gt; {&#10;  imageStore.updateQuery({ rating: rating.value })&#10;}&#10;&#10;const refresh = () =&gt; {&#10;  imageStore.refresh()&#10;}&#10;&#10;onMounted(async () =&gt; {&#10;  await imageStore.loadTags()&#10;  allTags.value = imageStore.allTags&#10;})&#10;&lt;/script&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;  &lt;div class=&quot;filter-panel&quot;&gt;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;标签筛选&lt;/div&gt;&#13;&#10;      &lt;el-select&#13;&#10;        v-model=&quot;selectedTags&quot;&#13;&#10;        multiple&#13;&#10;        filterable&#13;&#10;        remote&#13;&#10;        placeholder=&quot;搜索并选择标签&quot;&#13;&#10;        style=&quot;width: 100%&quot;&#13;&#10;        :remote-method=&quot;searchTags&quot;&#13;&#10;        :loading=&quot;tagsLoading&quot;&#13;&#10;        @change=&quot;updateTags&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;el-option&#13;&#10;          v-for=&quot;tag in availableTags&quot;&#13;&#10;          :key=&quot;tag&quot;&#13;&#10;          :label=&quot;tag&quot;&#13;&#10;          :value=&quot;tag&quot;&#13;&#10;        /&gt;&#13;&#10;      &lt;/el-select&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;排序方式&lt;/div&gt;&#13;&#10;      &lt;el-select&#13;&#10;        v-model=&quot;sortType&quot;&#13;&#10;        placeholder=&quot;选择排序&quot;&#13;&#10;        style=&quot;width: 100%&quot;&#13;&#10;        @change=&quot;updateSort&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;el-option label=&quot;随机&quot; value=&quot;random&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;文件大小&quot; value=&quot;size&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;上传时间&quot; value=&quot;time&quot; /&gt;&#13;&#10;      &lt;/el-select&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;内容评级&lt;/div&gt;&#13;&#10;      &lt;el-select&#13;&#10;        v-model=&quot;rating&quot;&#13;&#10;        placeholder=&quot;选择评级&quot;&#13;&#10;        style=&quot;width: 100%&quot;&#13;&#10;        @change=&quot;updateRating&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;el-option label=&quot;全部&quot; value=&quot;all&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;一般&quot; value=&quot;general&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;敏感&quot; value=&quot;sensitive&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;明确&quot; value=&quot;explicit&quot; /&gt;&#13;&#10;      &lt;/el-select&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;每页显示&lt;/div&gt;&#13;&#10;      &lt;el-select&#13;&#10;        v-model=&quot;pageSize&quot;&#13;&#10;        placeholder=&quot;选择数量&quot;&#13;&#10;        style=&quot;width: 100%&quot;&#13;&#10;        @change=&quot;updatePageSize&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;el-option label=&quot;20张&quot; :value=&quot;20&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;50张&quot; :value=&quot;50&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;100张&quot; :value=&quot;100&quot; /&gt;&#13;&#10;        &lt;el-option label=&quot;200张&quot; :value=&quot;200&quot; /&gt;&#13;&#10;      &lt;/el-select&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;refresh&quot; style=&quot;width: 100%&quot; :loading=&quot;imageStore.loading&quot;&gt;&#13;&#10;        刷新&#13;&#10;      &lt;/el-button&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;!-- 分页控制 --&gt;&#13;&#10;    &lt;div class=&quot;filter-section&quot; v-if=&quot;imageStore.totalPages &gt; 1&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;分页导航&lt;/div&gt;&#13;&#10;      &lt;el-pagination&#13;&#10;        v-model:current-page=&quot;currentPage&quot;&#13;&#10;        :page-size=&quot;imageStore.queryParams.pageSize&quot;&#13;&#10;        :total=&quot;imageStore.total&quot;&#13;&#10;        layout=&quot;prev, pager, next&quot;&#13;&#10;        small&#13;&#10;        @current-change=&quot;handlePageChange&quot;&#13;&#10;      /&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;!-- 统计信息 --&gt;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;统计信息&lt;/div&gt;&#13;&#10;      &lt;div class=&quot;stats&quot;&gt;&#13;&#10;        &lt;div class=&quot;stat-item&quot;&gt;&#13;&#10;          &lt;span class=&quot;stat-label&quot;&gt;总图片:&lt;/span&gt;&#13;&#10;          &lt;span class=&quot;stat-value&quot;&gt;{{ imageStore.total }}&lt;/span&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div class=&quot;stat-item&quot; v-if=&quot;imageStore.hasSelection&quot;&gt;&#13;&#10;          &lt;span class=&quot;stat-label&quot;&gt;已选择:&lt;/span&gt;&#13;&#10;          &lt;span class=&quot;stat-value&quot;&gt;{{ imageStore.selectedImages.size }}&lt;/span&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div class=&quot;stat-item&quot;&gt;&#13;&#10;          &lt;span class=&quot;stat-label&quot;&gt;当前页:&lt;/span&gt;&#13;&#10;          &lt;span class=&quot;stat-value&quot;&gt;{{ imageStore.currentPage }}/{{ imageStore.totalPages }}&lt;/span&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#13;&#10;import { ref, onMounted, watch } from 'vue'&#13;&#10;import { useImageStore } from './store'&#13;&#10;&#13;&#10;const imageStore = useImageStore()&#13;&#10;&#13;&#10;const selectedTags = ref&lt;string[]&gt;([])&#13;&#10;const sortType = ref('random')&#13;&#10;const rating = ref('all')&#13;&#10;const pageSize = ref(50)&#13;&#10;const currentPage = ref(1)&#13;&#10;const availableTags = ref&lt;string[]&gt;([])&#13;&#10;const tagsLoading = ref(false)&#13;&#10;&#13;&#10;// 搜索标签&#13;&#10;const searchTags = async (query: string) =&gt; {&#13;&#10;  if (query) {&#13;&#10;    tagsLoading.value = true&#13;&#10;    try {&#13;&#10;      await imageStore.loadTags(query)&#13;&#10;      availableTags.value = imageStore.allTags&#13;&#10;    } finally {&#13;&#10;      tagsLoading.value = false&#13;&#10;    }&#13;&#10;  } else {&#13;&#10;    availableTags.value = imageStore.allTags&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const updateTags = () =&gt; {&#13;&#10;  imageStore.updateQuery({ tags: selectedTags.value })&#13;&#10;}&#13;&#10;&#13;&#10;const updateSort = () =&gt; {&#13;&#10;  imageStore.updateQuery({ sort: sortType.value })&#13;&#10;}&#13;&#10;&#13;&#10;const updateRating = () =&gt; {&#13;&#10;  imageStore.updateQuery({ rating: rating.value })&#13;&#10;}&#13;&#10;&#13;&#10;const updatePageSize = () =&gt; {&#13;&#10;  imageStore.updateQuery({ pageSize: pageSize.value })&#13;&#10;}&#13;&#10;&#13;&#10;const handlePageChange = (page: number) =&gt; {&#13;&#10;  imageStore.goToPage(page)&#13;&#10;}&#13;&#10;&#13;&#10;const refresh = () =&gt; {&#13;&#10;  imageStore.refresh()&#13;&#10;}&#13;&#10;&#13;&#10;// 监听store中的当前页变化&#13;&#10;watch(() =&gt; imageStore.currentPage, (newPage) =&gt; {&#13;&#10;  currentPage.value = newPage&#13;&#10;})&#13;&#10;&#13;&#10;// 监听store中的查询参数变化&#13;&#10;watch(() =&gt; imageStore.queryParams, (newParams) =&gt; {&#13;&#10;  if (newParams.pageSize) pageSize.value = newParams.pageSize&#13;&#10;  if (newParams.sort) sortType.value = newParams.sort&#13;&#10;  if (newParams.rating) rating.value = newParams.rating&#13;&#10;  if (newParams.tags) selectedTags.value = [...newParams.tags]&#13;&#10;}, { deep: true })&#13;&#10;&#13;&#10;onMounted(async () =&gt; {&#13;&#10;  // 初始加载所有标签&#13;&#10;  await imageStore.loadTags()&#13;&#10;  availableTags.value = imageStore.allTags&#13;&#10;  &#13;&#10;  // 同步初始参数&#13;&#10;  const params = imageStore.queryParams&#13;&#10;  if (params.pageSize) pageSize.value = params.pageSize&#13;&#10;  if (params.sort) sortType.value = params.sort&#13;&#10;  if (params.rating) rating.value = params.rating&#13;&#10;  if (params.tags) selectedTags.value = [...params.tags]&#13;&#10;})&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;.filter-panel {&#13;&#10;  padding: 20px;&#13;&#10;  height: 100%;&#13;&#10;  overflow-y: auto;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-section {&#13;&#10;  margin-bottom: 24px;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-title {&#13;&#10;  font-size: 14px;&#13;&#10;  font-weight: 600;&#13;&#10;  margin-bottom: 12px;&#13;&#10;  color: #e4e4e7;&#13;&#10;}&#13;&#10;&#13;&#10;.stats {&#13;&#10;  background: #27272a;&#13;&#10;  border-radius: 6px;&#13;&#10;  padding: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;.stat-item {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  margin-bottom: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.stat-item:last-child {&#13;&#10;  margin-bottom: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.stat-label {&#13;&#10;  color: #a1a1aa;&#13;&#10;  font-size: 13px;&#13;&#10;}&#13;&#10;&#13;&#10;.stat-value {&#13;&#10;  color: #e4e4e7;&#13;&#10;  font-weight: 500;&#13;&#10;  font-size: 13px;&#13;&#10;}&#13;&#10;&#13;&#10;:deep(.el-pagination) {&#13;&#10;  justify-content: center;&#13;&#10;}&#13;&#10;&#13;&#10;:deep(.el-pagination .el-pager li) {&#13;&#10;  background: #27272a;&#13;&#10;  color: #e4e4e7;&#13;&#10;  border: 1px solid #3f3f46;&#13;&#10;}&#13;&#10;&#13;&#10;:deep(.el-pagination .el-pager li.is-active) {&#13;&#10;  background: #3b82f6;&#13;&#10;  color: white;&#13;&#10;}&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/ImageCard.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/ImageCard.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-card&quot; :class=&quot;{ selected: isSelected }&quot;&gt;&#10;    &lt;!-- 选择复选框 --&gt;&#10;    &lt;div class=&quot;selection-overlay&quot;&gt;&#10;      &lt;el-checkbox&#10;        :model-value=&quot;isSelected&quot;&#10;        @change=&quot;handleSelection&quot;&#10;        size=&quot;large&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;img&#10;      :src=&quot;thumbnailUrl&quot;&#10;      :alt=&quot;image.filename&quot;&#10;      @click=&quot;$emit('preview', image)&quot;&#10;      loading=&quot;lazy&quot;&#10;    /&gt;&#10;&#10;    &lt;div class=&quot;image-info&quot;&gt;&#10;      &lt;div class=&quot;image-title&quot; :title=&quot;image.filename&quot;&gt;{{ image.filename }}&lt;/div&gt;&#10;      &lt;div class=&quot;image-meta&quot;&gt;&#10;        &lt;span&gt;{{ formatSize(image.size) }}&lt;/span&gt;&#10;        &lt;span&gt;{{ image.width }}×{{ image.height }}&lt;/span&gt;&#10;        &lt;span class=&quot;rating&quot; :class=&quot;`rating-${image.rating}`&quot;&gt;{{ getRatingText(image.rating) }}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;image-tags&quot; v-if=&quot;image.tags.length&quot;&gt;&#10;        &lt;span class=&quot;tag&quot; v-for=&quot;tag in image.tags.slice(0, 3)&quot; :key=&quot;tag&quot;&gt;&#10;          {{ tag }}&#10;        &lt;/span&gt;&#10;        &lt;span class=&quot;tag&quot; v-if=&quot;image.tags.length &gt; 3&quot;&gt;&#10;          +{{ image.tags.length - 3 }}&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;image-actions&quot;&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          type=&quot;primary&quot;&#10;          @click=&quot;downloadSingle&quot;&#10;          :icon=&quot;Download&quot;&#10;          title=&quot;下载&quot;&#10;        /&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          type=&quot;danger&quot;&#10;          @click=&quot;$emit('delete', image.hash)&quot;&#10;          :icon=&quot;Delete&quot;&#10;          title=&quot;删除&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { computed } from 'vue'&#10;import { Delete, Download } from '@element-plus/icons-vue'&#10;import { imageAPI } from './api'&#10;import { useImageStore } from './store'&#10;import type { Image } from './types'&#10;&#10;interface Props {&#10;  image: Image&#10;}&#10;&#10;const props = defineProps&lt;Props&gt;()&#10;const imageStore = useImageStore()&#10;&#10;defineEmits&lt;{&#10;  preview: [image: Image]&#10;  delete: [hash: string]&#10;}&gt;()&#10;&#10;const thumbnailUrl = computed(() =&gt; imageAPI.getThumbnailUrl(props.image.hash))&#10;const isSelected = computed(() =&gt; imageStore.isImageSelected(props.image.hash))&#10;&#10;const handleSelection = (checked: boolean) =&gt; {&#10;  imageStore.toggleImageSelection(props.image.hash)&#10;}&#10;&#10;const downloadSingle = async () =&gt; {&#10;  try {&#10;    const blob = await imageAPI.downloadImage(props.image.hash)&#10;    const url = URL.createObjectURL(blob)&#10;    const a = document.createElement('a')&#10;    a.href = url&#10;    a.download = props.image.filename&#10;    a.click()&#10;    URL.revokeObjectURL(url)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;  }&#10;}&#10;&#10;const formatSize = (bytes: number) =&gt; {&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#10;  if (bytes === 0) return '0 B'&#10;  const i = Math.floor(Math.log(bytes) / Math.log(1024))&#10;  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]&#10;}&#10;&#10;const getRatingText = (rating: string) =&gt; {&#10;  const ratingMap: Record&lt;string, string&gt; = {&#10;    'general': '一般',&#10;    'sensitive': '敏感',&#10;    'explicit': '明确',&#10;    'all': '全部'&#10;  }&#10;  return ratingMap[rating] || rating&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-card {&#10;  position: relative;&#10;  background: #18181b;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  transition: all 0.2s;&#10;  border: 1px solid #27272a;&#10;}&#10;&#10;.image-card:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;}&#10;&#10;.image-card.selected {&#10;  border-color: #3b82f6;&#10;  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);&#10;}&#10;&#10;.selection-overlay {&#10;  position: absolute;&#10;  top: 8px;&#10;  left: 8px;&#10;  z-index: 2;&#10;  background: rgba(0, 0, 0, 0.7);&#10;  border-radius: 4px;&#10;  padding: 4px;&#10;}&#10;&#10;.image-card img {&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;  cursor: pointer;&#10;}&#10;&#10;.image-info {&#10;  padding: 12px;&#10;}&#10;&#10;.image-title {&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  margin-bottom: 4px;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  white-space: nowrap;&#10;}&#10;&#10;.image-meta {&#10;  display: flex;&#10;  gap: 8px;&#10;  font-size: 12px;&#10;  color: #a1a1aa;&#10;  margin-bottom: 8px;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.rating {&#10;  padding: 2px 6px;&#10;  border-radius: 4px;&#10;  font-weight: 500;&#10;}&#10;&#10;.rating-general {&#10;  background: #22c55e;&#10;  color: white;&#10;}&#10;&#10;.rating-sensitive {&#10;  background: #f59e0b;&#10;  color: white;&#10;}&#10;&#10;.rating-explicit {&#10;  background: #ef4444;&#10;  color: white;&#10;}&#10;&#10;.image-tags {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 4px;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.tag {&#10;  background: #3f3f46;&#10;  color: #d4d4d8;&#10;  padding: 2px 8px;&#10;  border-radius: 12px;&#10;  font-size: 12px;&#10;}&#10;&#10;.image-actions {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  gap: 8px;&#10;}&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-card&quot; :class=&quot;{ selected: isSelected }&quot;&gt;&#10;    &lt;!-- 选择复选框 --&gt;&#10;    &lt;div class=&quot;selection-overlay&quot;&gt;&#10;      &lt;el-checkbox&#10;        :model-value=&quot;isSelected&quot;&#10;        @change=&quot;handleSelection&quot;&#10;        size=&quot;large&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;img&#10;      :src=&quot;thumbnailUrl&quot;&#10;      :alt=&quot;image.filename&quot;&#10;      @click=&quot;$emit('preview', image)&quot;&#10;      loading=&quot;lazy&quot;&#10;    /&gt;&#10;&#10;    &lt;div class=&quot;image-info&quot;&gt;&#10;      &lt;div class=&quot;image-title&quot; :title=&quot;image.filename&quot;&gt;{{ image.filename }}&lt;/div&gt;&#10;      &lt;div class=&quot;image-meta&quot;&gt;&#10;        &lt;span&gt;{{ formatSize(image.size) }}&lt;/span&gt;&#10;        &lt;span&gt;{{ image.width }}×{{ image.height }}&lt;/span&gt;&#10;        &lt;span class=&quot;rating&quot; :class=&quot;`rating-${image.rating}`&quot;&gt;{{ getRatingText(image.rating) }}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;image-tags&quot; v-if=&quot;image.tags.length&quot;&gt;&#10;        &lt;span class=&quot;tag&quot; v-for=&quot;tag in image.tags.slice(0, 3)&quot; :key=&quot;tag&quot;&gt;&#10;          {{ tag }}&#10;        &lt;/span&gt;&#10;        &lt;span class=&quot;tag&quot; v-if=&quot;image.tags.length &gt; 3&quot;&gt;&#10;          +{{ image.tags.length - 3 }}&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;image-actions&quot;&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          type=&quot;primary&quot;&#10;          @click=&quot;downloadSingle&quot;&#10;          :icon=&quot;Download&quot;&#10;          title=&quot;下载&quot;&#10;        /&gt;&#10;        &lt;el-button&#10;          size=&quot;small&quot;&#10;          type=&quot;danger&quot;&#10;          @click=&quot;$emit('delete', image.hash)&quot;&#10;          :icon=&quot;Delete&quot;&#10;          title=&quot;删除&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { computed } from 'vue'&#10;import { Delete, Download } from '@element-plus/icons-vue'&#10;import { imageAPI } from './api'&#10;import { useImageStore } from './store'&#10;import type { Image } from './types'&#10;&#10;interface Props {&#10;  image: Image&#10;}&#10;&#10;const props = defineProps&lt;Props&gt;()&#10;const imageStore = useImageStore()&#10;&#10;defineEmits&lt;{&#10;  preview: [image: Image]&#10;  delete: [hash: string]&#10;}&gt;()&#10;&#10;const thumbnailUrl = computed(() =&gt; imageAPI.getThumbnailUrl(props.image.hash))&#10;const isSelected = computed(() =&gt; imageStore.isImageSelected(props.image.hash))&#10;&#10;const handleSelection = () =&gt; {&#10;  imageStore.toggleImageSelection(props.image.hash)&#10;}&#10;&#10;const downloadSingle = async () =&gt; {&#10;  try {&#10;    const blob = await imageAPI.downloadImage(props.image.hash)&#10;    const url = URL.createObjectURL(blob)&#10;    const a = document.createElement('a')&#10;    a.href = url&#10;    a.download = props.image.filename&#10;    a.click()&#10;    URL.revokeObjectURL(url)&#10;  } catch (error) {&#10;    console.error('下载失败:', error)&#10;  }&#10;}&#10;&#10;const formatSize = (bytes: number) =&gt; {&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#10;  if (bytes === 0) return '0 B'&#10;  const i = Math.floor(Math.log(bytes) / Math.log(1024))&#10;  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]&#10;}&#10;&#10;const getRatingText = (rating: string) =&gt; {&#10;  const ratingMap: Record&lt;string, string&gt; = {&#10;    'general': '一般',&#10;    'sensitive': '敏感',&#10;    'explicit': '明确',&#10;    'all': '全部'&#10;  }&#10;  return ratingMap[rating] || rating&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-card {&#10;  position: relative;&#10;  background: #18181b;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  transition: all 0.2s;&#10;  border: 1px solid #27272a;&#10;}&#10;&#10;.image-card:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;}&#10;&#10;.image-card.selected {&#10;  border-color: #3b82f6;&#10;  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);&#10;}&#10;&#10;.selection-overlay {&#10;  position: absolute;&#10;  top: 8px;&#10;  left: 8px;&#10;  z-index: 2;&#10;  background: rgba(0, 0, 0, 0.7);&#10;  border-radius: 4px;&#10;  padding: 4px;&#10;}&#10;&#10;.image-card img {&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;  cursor: pointer;&#10;}&#10;&#10;.image-info {&#10;  padding: 12px;&#10;}&#10;&#10;.image-title {&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  margin-bottom: 4px;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  white-space: nowrap;&#10;}&#10;&#10;.image-meta {&#10;  display: flex;&#10;  gap: 8px;&#10;  font-size: 12px;&#10;  color: #a1a1aa;&#10;  margin-bottom: 8px;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.rating {&#10;  padding: 2px 6px;&#10;  border-radius: 4px;&#10;  font-weight: 500;&#10;}&#10;&#10;.rating-general {&#10;  background: #22c55e;&#10;  color: white;&#10;}&#10;&#10;.rating-sensitive {&#10;  background: #f59e0b;&#10;  color: white;&#10;}&#10;&#10;.rating-explicit {&#10;  background: #ef4444;&#10;  color: white;&#10;}&#10;&#10;.image-tags {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 4px;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.tag {&#10;  background: #3f3f46;&#10;  color: #d4d4d8;&#10;  padding: 2px 8px;&#10;  border-radius: 12px;&#10;  font-size: 12px;&#10;}&#10;&#10;.image-actions {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  gap: 8px;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/UploadPanel.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/UploadPanel.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;upload-section&quot;&gt;&#10;    &lt;div&#10;      class=&quot;upload-area&quot;&#10;      :class=&quot;{ dragover: isDragOver }&quot;&#10;      @click=&quot;triggerFileInput&quot;&#10;      @drop=&quot;handleDrop&quot;&#10;      @dragover.prevent=&quot;isDragOver = true&quot;&#10;      @dragleave=&quot;isDragOver = false&quot;&#10;    &gt;&#10;      &lt;div class=&quot;upload-icon&quot;&gt;&lt;/div&gt;&#10;      &lt;div class=&quot;upload-text&quot;&gt;点击或拖拽文件到此处上传&lt;/div&gt;&#10;      &lt;div class=&quot;upload-hint&quot;&gt;支持 JPG、PNG、GIF 格式&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;input&#10;      ref=&quot;fileInput&quot;&#10;      type=&quot;file&quot;&#10;      multiple&#10;      accept=&quot;image/*&quot;&#10;      style=&quot;display: none&quot;&#10;      @change=&quot;handleFileSelect&quot;&#10;    /&gt;&#10;&#10;    &lt;div v-if=&quot;uploadQueue.length &gt; 0&quot; class=&quot;upload-queue&quot;&gt;&#10;      &lt;div class=&quot;queue-title&quot;&gt;上传队列 ({{ uploadQueue.length }})&lt;/div&gt;&#10;      &lt;div v-for=&quot;item in uploadQueue&quot; :key=&quot;item.id&quot; class=&quot;queue-item&quot;&gt;&#10;        &lt;span class=&quot;file-name&quot;&gt;{{ item.file.name }}&lt;/span&gt;&#10;        &lt;el-progress&#10;          :percentage=&quot;item.progress&quot;&#10;          :status=&quot;item.status&quot;&#10;          style=&quot;flex: 1; margin: 0 12px&quot;&#10;        /&gt;&#10;        &lt;el-button&#10;          v-if=&quot;item.status === 'exception'&quot;&#10;          size=&quot;small&quot;&#10;          type=&quot;primary&quot;&#10;          @click=&quot;retryUpload(item)&quot;&#10;        &gt;&#10;          重试&#10;        &lt;/el-button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref } from 'vue'&#10;import { useImageStore } from './store'&#10;import { ElMessage } from 'element-plus'&#10;&#10;interface UploadItem {&#10;  id: string&#10;  file: File&#10;  progress: number&#10;  status: 'uploading' | 'success' | 'exception'&#10;}&#10;&#10;const imageStore = useImageStore()&#10;const fileInput = ref&lt;HTMLInputElement&gt;()&#10;const isDragOver = ref(false)&#10;const uploadQueue = ref&lt;UploadItem[]&gt;([])&#10;&#10;const triggerFileInput = () =&gt; {&#10;  fileInput.value?.click()&#10;}&#10;&#10;const handleFileSelect = (event: Event) =&gt; {&#10;  const target = event.target as HTMLInputElement&#10;  if (target.files) {&#10;    handleFiles(Array.from(target.files))&#10;  }&#10;}&#10;&#10;const handleDrop = (event: DragEvent) =&gt; {&#10;  event.preventDefault()&#10;  isDragOver.value = false&#10;&#10;  if (event.dataTransfer?.files) {&#10;    handleFiles(Array.from(event.dataTransfer.files))&#10;  }&#10;}&#10;&#10;const handleFiles = (files: File[]) =&gt; {&#10;  const imageFiles = files.filter(file =&gt; file.type.startsWith('image/'))&#10;&#10;  if (imageFiles.length !== files.length) {&#10;    ElMessage.warning('只能上传图片文件')&#10;  }&#10;&#10;  imageFiles.forEach(file =&gt; {&#10;    const uploadItem: UploadItem = {&#10;      id: Date.now() + Math.random().toString(),&#10;      file,&#10;      progress: 0,&#10;      status: 'uploading'&#10;    }&#10;    uploadQueue.value.push(uploadItem)&#10;    uploadFile(uploadItem)&#10;  })&#10;}&#10;&#10;const uploadFile = async (item: UploadItem) =&gt; {&#10;  try {&#10;    // 模拟上传进度&#10;    const progressInterval = setInterval(() =&gt; {&#10;      if (item.progress &lt; 90) {&#10;        item.progress += 10&#10;      }&#10;    }, 200)&#10;&#10;    await imageStore.uploadImage(item.file)&#10;&#10;    clearInterval(progressInterval)&#10;    item.progress = 100&#10;    item.status = 'success'&#10;&#10;    // 3秒后从队列中移除成功的项目&#10;    setTimeout(() =&gt; {&#10;      const index = uploadQueue.value.findIndex(i =&gt; i.id === item.id)&#10;      if (index &gt; -1) {&#10;        uploadQueue.value.splice(index, 1)&#10;      }&#10;    }, 3000)&#10;&#10;    ElMessage.success(`${item.file.name} 上传成功`)&#10;  } catch (error) {&#10;    item.status = 'exception'&#10;    ElMessage.error(`${item.file.name} 上传失败`)&#10;  }&#10;}&#10;&#10;const retryUpload = (item: UploadItem) =&gt; {&#10;  item.progress = 0&#10;  item.status = 'uploading'&#10;  uploadFile(item)&#10;}&#10;&lt;/script&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;  &lt;div class=&quot;upload-section&quot;&gt;&#13;&#10;    &lt;!-- Tagger配置 --&gt;&#13;&#10;    &lt;div class=&quot;filter-section&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;Tagger配置&lt;/div&gt;&#13;&#10;      &lt;el-input&#13;&#10;        v-model=&quot;taggerUrl&quot;&#13;&#10;        placeholder=&quot;输入Tagger服务URL&quot;&#13;&#10;        @blur=&quot;updateTaggerUrl&quot;&#13;&#10;        @keyup.enter=&quot;updateTaggerUrl&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;template #append&gt;&#13;&#10;          &lt;el-button @click=&quot;updateTaggerUrl&quot; type=&quot;primary&quot;&gt;保存&lt;/el-button&gt;&#13;&#10;        &lt;/template&gt;&#13;&#10;      &lt;/el-input&gt;&#13;&#10;      &lt;div class=&quot;tagger-hint&quot;&gt;配置后上传图片时会自动标记标签&lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;!-- 上传区域 --&gt;&#13;&#10;    &lt;div&#13;&#10;      class=&quot;upload-area&quot;&#13;&#10;      :class=&quot;{ dragover: isDragOver }&quot;&#13;&#10;      @click=&quot;triggerFileInput&quot;&#13;&#10;      @drop=&quot;handleDrop&quot;&#13;&#10;      @dragover.prevent=&quot;isDragOver = true&quot;&#13;&#10;      @dragleave=&quot;isDragOver = false&quot;&#13;&#10;    &gt;&#13;&#10;      &lt;div class=&quot;upload-icon&quot;&gt;&lt;/div&gt;&#13;&#10;      &lt;div class=&quot;upload-text&quot;&gt;点击或拖拽文件到此处上传&lt;/div&gt;&#13;&#10;      &lt;div class=&quot;upload-hint&quot;&gt;支持 JPG、PNG、GIF 格式，可批量上传&lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;input&#13;&#10;      ref=&quot;fileInput&quot;&#13;&#10;      type=&quot;file&quot;&#13;&#10;      multiple&#13;&#10;      accept=&quot;image/*&quot;&#13;&#10;      style=&quot;display: none&quot;&#13;&#10;      @change=&quot;handleFileSelect&quot;&#13;&#10;    /&gt;&#13;&#10;&#13;&#10;    &lt;!-- 上传队列 --&gt;&#13;&#10;    &lt;div v-if=&quot;uploadQueue.length &gt; 0&quot; class=&quot;upload-queue&quot;&gt;&#13;&#10;      &lt;div class=&quot;queue-header&quot;&gt;&#13;&#10;        &lt;span class=&quot;queue-title&quot;&gt;上传队列 ({{ uploadQueue.length }})&lt;/span&gt;&#13;&#10;        &lt;el-button&#13;&#10;          size=&quot;small&quot;&#13;&#10;          type=&quot;danger&quot;&#13;&#10;          @click=&quot;clearQueue&quot;&#13;&#10;          :disabled=&quot;uploadQueue.some(item =&gt; item.status === 'uploading')&quot;&#13;&#10;        &gt;&#13;&#10;          清空&#13;&#10;        &lt;/el-button&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div class=&quot;queue-list&quot;&gt;&#13;&#10;        &lt;div v-for=&quot;item in uploadQueue&quot; :key=&quot;item.id&quot; class=&quot;queue-item&quot;&gt;&#13;&#10;          &lt;div class=&quot;file-info&quot;&gt;&#13;&#10;            &lt;div class=&quot;file-name&quot;&gt;{{ item.file.name }}&lt;/div&gt;&#13;&#10;            &lt;div class=&quot;file-size&quot;&gt;{{ formatSize(item.file.size) }}&lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;el-progress&#13;&#10;            :percentage=&quot;item.progress&quot;&#13;&#10;            :status=&quot;item.status&quot;&#13;&#10;            :stroke-width=&quot;6&quot;&#13;&#10;            style=&quot;flex: 1; margin: 0 12px&quot;&#13;&#10;          /&gt;&#13;&#10;&#13;&#10;          &lt;div class=&quot;item-actions&quot;&gt;&#13;&#10;            &lt;el-button&#13;&#10;              v-if=&quot;item.status === 'exception'&quot;&#13;&#10;              size=&quot;small&quot;&#13;&#10;              type=&quot;primary&quot;&#13;&#10;              @click=&quot;retryUpload(item)&quot;&#13;&#10;            &gt;&#13;&#10;              重试&#13;&#10;            &lt;/el-button&gt;&#13;&#10;            &lt;el-button&#13;&#10;              v-if=&quot;item.status !== 'uploading'&quot;&#13;&#10;              size=&quot;small&quot;&#13;&#10;              type=&quot;danger&quot;&#13;&#10;              @click=&quot;removeFromQueue(item.id)&quot;&#13;&#10;            &gt;&#13;&#10;              移除&#13;&#10;            &lt;/el-button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;!-- 批量操作 --&gt;&#13;&#10;    &lt;div v-if=&quot;imageStore.hasSelection&quot; class=&quot;batch-actions&quot;&gt;&#13;&#10;      &lt;div class=&quot;filter-title&quot;&gt;批量操作 ({{ imageStore.selectedImages.size }}张)&lt;/div&gt;&#13;&#10;      &lt;div class=&quot;action-buttons&quot;&gt;&#13;&#10;        &lt;el-button&#13;&#10;          type=&quot;primary&quot;&#13;&#10;          @click=&quot;downloadSelected&quot;&#13;&#10;          :loading=&quot;downloading&quot;&#13;&#10;          style=&quot;width: 100%; margin-bottom: 8px&quot;&#13;&#10;        &gt;&#13;&#10;          下载选中图片&#13;&#10;        &lt;/el-button&gt;&#13;&#10;        &lt;el-button&#13;&#10;          type=&quot;danger&quot;&#13;&#10;          @click=&quot;deleteSelected&quot;&#13;&#10;          :loading=&quot;deleting&quot;&#13;&#10;          style=&quot;width: 100%; margin-bottom: 8px&quot;&#13;&#10;        &gt;&#13;&#10;          删除选中图片&#13;&#10;        &lt;/el-button&gt;&#13;&#10;        &lt;el-button&#13;&#10;          @click=&quot;imageStore.selectAllImages&quot;&#13;&#10;          style=&quot;width: 48%; margin-right: 4%&quot;&#13;&#10;        &gt;&#13;&#10;          全选&#13;&#10;        &lt;/el-button&gt;&#13;&#10;        &lt;el-button&#13;&#10;          @click=&quot;imageStore.clearSelection&quot;&#13;&#10;          style=&quot;width: 48%&quot;&#13;&#10;        &gt;&#13;&#10;          取消选择&#13;&#10;        &lt;/el-button&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#13;&#10;import { ref } from 'vue'&#13;&#10;import { useImageStore } from './store'&#13;&#10;import { tagAPI } from './api'&#13;&#10;import { ElMessage, ElMessageBox } from 'element-plus'&#13;&#10;&#13;&#10;interface UploadItem {&#13;&#10;  id: string&#13;&#10;  file: File&#13;&#10;  progress: number&#13;&#10;  status: 'uploading' | 'success' | 'exception'&#13;&#10;}&#13;&#10;&#13;&#10;const imageStore = useImageStore()&#13;&#10;const fileInput = ref&lt;HTMLInputElement&gt;()&#13;&#10;const isDragOver = ref(false)&#13;&#10;const uploadQueue = ref&lt;UploadItem[]&gt;([])&#13;&#10;const taggerUrl = ref('')&#13;&#10;const downloading = ref(false)&#13;&#10;const deleting = ref(false)&#13;&#10;&#13;&#10;const triggerFileInput = () =&gt; {&#13;&#10;  fileInput.value?.click()&#13;&#10;}&#13;&#10;&#13;&#10;const handleFileSelect = (event: Event) =&gt; {&#13;&#10;  const target = event.target as HTMLInputElement&#13;&#10;  if (target.files) {&#13;&#10;    handleFiles(Array.from(target.files))&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const handleDrop = (event: DragEvent) =&gt; {&#13;&#10;  event.preventDefault()&#13;&#10;  isDragOver.value = false&#13;&#10;&#13;&#10;  if (event.dataTransfer?.files) {&#13;&#10;    handleFiles(Array.from(event.dataTransfer.files))&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const handleFiles = (files: File[]) =&gt; {&#13;&#10;  const imageFiles = files.filter(file =&gt; file.type.startsWith('image/'))&#13;&#10;&#13;&#10;  if (imageFiles.length !== files.length) {&#13;&#10;    ElMessage.warning('只能上传图片文件')&#13;&#10;  }&#13;&#10;&#13;&#10;  if (imageFiles.length === 0) return&#13;&#10;&#13;&#10;  imageFiles.forEach(file =&gt; {&#13;&#10;    const uploadItem: UploadItem = {&#13;&#10;      id: Date.now() + Math.random().toString(),&#13;&#10;      file,&#13;&#10;      progress: 0,&#13;&#10;      status: 'uploading'&#13;&#10;    }&#13;&#10;    uploadQueue.value.push(uploadItem)&#13;&#10;    uploadFile(uploadItem)&#13;&#10;  })&#13;&#10;}&#13;&#10;&#13;&#10;const uploadFile = async (item: UploadItem) =&gt; {&#13;&#10;  try {&#13;&#10;    // 模拟上传进度&#13;&#10;    const progressInterval = setInterval(() =&gt; {&#13;&#10;      if (item.progress &lt; 90) {&#13;&#10;        item.progress += Math.random() * 20&#13;&#10;      }&#13;&#10;    }, 200)&#13;&#10;&#13;&#10;    await imageStore.uploadImage(item.file)&#13;&#10;&#13;&#10;    clearInterval(progressInterval)&#13;&#10;    item.progress = 100&#13;&#10;    item.status = 'success'&#13;&#10;&#13;&#10;    ElMessage.success(`${item.file.name} 上传成功`)&#13;&#10;&#13;&#10;    // 3秒后从队列中移除成功的项目&#13;&#10;    setTimeout(() =&gt; {&#13;&#10;      removeFromQueue(item.id)&#13;&#10;    }, 3000)&#13;&#10;  } catch (error) {&#13;&#10;    item.status = 'exception'&#13;&#10;    ElMessage.error(`${item.file.name} 上传失败`)&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const retryUpload = (item: UploadItem) =&gt; {&#13;&#10;  item.progress = 0&#13;&#10;  item.status = 'uploading'&#13;&#10;  uploadFile(item)&#13;&#10;}&#13;&#10;&#13;&#10;const removeFromQueue = (id: string) =&gt; {&#13;&#10;  const index = uploadQueue.value.findIndex(item =&gt; item.id === id)&#13;&#10;  if (index &gt; -1) {&#13;&#10;    uploadQueue.value.splice(index, 1)&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const clearQueue = () =&gt; {&#13;&#10;  uploadQueue.value = uploadQueue.value.filter(item =&gt; item.status === 'uploading')&#13;&#10;}&#13;&#10;&#13;&#10;const updateTaggerUrl = async () =&gt; {&#13;&#10;  if (!taggerUrl.value.trim()) return&#13;&#10;&#13;&#10;  try {&#13;&#10;    await tagAPI.setTaggerUrl(taggerUrl.value.trim())&#13;&#10;    ElMessage.success('Tagger URL配置成功')&#13;&#10;  } catch (error) {&#13;&#10;    ElMessage.error('配置失败')&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const downloadSelected = async () =&gt; {&#13;&#10;  if (!imageStore.hasSelection) return&#13;&#10;&#13;&#10;  downloading.value = true&#13;&#10;  try {&#13;&#10;    await imageStore.downloadSelectedImages()&#13;&#10;    ElMessage.success('下载完成')&#13;&#10;  } catch (error) {&#13;&#10;    ElMessage.error('下载失败')&#13;&#10;  } finally {&#13;&#10;    downloading.value = false&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const deleteSelected = async () =&gt; {&#13;&#10;  if (!imageStore.hasSelection) return&#13;&#10;&#13;&#10;  try {&#13;&#10;    await ElMessageBox.confirm(&#13;&#10;      `确定要删除选中的 ${imageStore.selectedImages.size} 张图片吗？`,&#13;&#10;      '批量删除确认',&#13;&#10;      { type: 'warning' }&#13;&#10;    )&#13;&#10;&#13;&#10;    deleting.value = true&#13;&#10;    await imageStore.deleteSelectedImages()&#13;&#10;    ElMessage.success('删除成功')&#13;&#10;  } catch (error) {&#13;&#10;    if (error !== 'cancel') {&#13;&#10;      ElMessage.error('删除失败')&#13;&#10;    }&#13;&#10;  } finally {&#13;&#10;    deleting.value = false&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;const formatSize = (bytes: number) =&gt; {&#13;&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#13;&#10;  if (bytes === 0) return '0 B'&#13;&#10;  const i = Math.floor(Math.log(bytes) / Math.log(1024))&#13;&#10;  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]&#13;&#10;}&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;.upload-section {&#13;&#10;  padding: 20px;&#13;&#10;  height: 100%;&#13;&#10;  overflow-y: auto;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-section {&#13;&#10;  margin-bottom: 24px;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-title {&#13;&#10;  font-size: 14px;&#13;&#10;  font-weight: 600;&#13;&#10;  margin-bottom: 12px;&#13;&#10;  color: #e4e4e7;&#13;&#10;}&#13;&#10;&#13;&#10;.tagger-hint {&#13;&#10;  font-size: 12px;&#13;&#10;  color: #a1a1aa;&#13;&#10;  margin-top: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.upload-area {&#13;&#10;  border: 2px dashed #3f3f46;&#13;&#10;  border-radius: 8px;&#13;&#10;  padding: 40px 20px;&#13;&#10;  text-align: center;&#13;&#10;  transition: border-color 0.3s;&#13;&#10;  cursor: pointer;&#13;&#10;  margin-bottom: 20px;&#13;&#10;}&#13;&#10;&#13;&#10;.upload-area:hover,&#13;&#10;.upload-area.dragover {&#13;&#10;  border-color: #3b82f6;&#13;&#10;  background: rgba(59, 130, 246, 0.05);&#13;&#10;}&#13;&#10;&#13;&#10;.upload-icon {&#13;&#10;  font-size: 48px;&#13;&#10;  margin-bottom: 16px;&#13;&#10;}&#13;&#10;&#13;&#10;.upload-text {&#13;&#10;  color: #e4e4e7;&#13;&#10;  margin-bottom: 8px;&#13;&#10;  font-weight: 500;&#13;&#10;}&#13;&#10;&#13;&#10;.upload-hint {&#13;&#10;  color: #a1a1aa;&#13;&#10;  font-size: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;.upload-queue {&#13;&#10;  background: #18181b;&#13;&#10;  border-radius: 8px;&#13;&#10;  border: 1px solid #27272a;&#13;&#10;  overflow: hidden;&#13;&#10;  margin-bottom: 20px;&#13;&#10;}&#13;&#10;&#13;&#10;.queue-header {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;  padding: 12px 16px;&#13;&#10;  background: #27272a;&#13;&#10;  border-bottom: 1px solid #3f3f46;&#13;&#10;}&#13;&#10;&#13;&#10;.queue-title {&#13;&#10;  font-weight: 600;&#13;&#10;  color: #e4e4e7;&#13;&#10;}&#13;&#10;&#13;&#10;.queue-list {&#13;&#10;  max-height: 300px;&#13;&#10;  overflow-y: auto;&#13;&#10;}&#13;&#10;&#13;&#10;.queue-item {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  padding: 12px 16px;&#13;&#10;  border-bottom: 1px solid #27272a;&#13;&#10;}&#13;&#10;&#13;&#10;.queue-item:last-child {&#13;&#10;  border-bottom: none;&#13;&#10;}&#13;&#10;&#13;&#10;.file-info {&#13;&#10;  min-width: 0;&#13;&#10;  margin-right: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;.file-name {&#13;&#10;  font-size: 13px;&#13;&#10;  font-weight: 500;&#13;&#10;  color: #e4e4e7;&#13;&#10;  overflow: hidden;&#13;&#10;  text-overflow: ellipsis;&#13;&#10;  white-space: nowrap;&#13;&#10;}&#13;&#10;&#13;&#10;.file-size {&#13;&#10;  font-size: 12px;&#13;&#10;  color: #a1a1aa;&#13;&#10;}&#13;&#10;&#13;&#10;.item-actions {&#13;&#10;  display: flex;&#13;&#10;  gap: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.batch-actions {&#13;&#10;  background: #18181b;&#13;&#10;  border-radius: 8px;&#13;&#10;  border: 1px solid #27272a;&#13;&#10;  padding: 16px;&#13;&#10;}&#13;&#10;&#13;&#10;.action-buttons {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  gap: 8px;&#13;&#10;}&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api.ts" />
              <option name="originalContent" value="import axios from 'axios'&#10;import qs from 'qs'&#10;import type { Image, Page, QueryParams } from './types'&#10;&#10;// 创建axios实例&#10;const api = axios.create({&#10;  baseURL: '/api',&#10;  timeout: 10000&#10;})&#10;&#10;// 图片API服务&#10;export const imageAPI = {&#10;  // 查询图片&#10;  async query(params: Partial&lt;QueryParams&gt;): Promise&lt;Page&lt;Image&gt;&gt; {&#10;    const response = await api.get('/query', {&#10;      params,&#10;      paramsSerializer: params =&gt; qs.stringify(params, { arrayFormat: 'repeat' })&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 上传图片&#10;  async upload(file: File): Promise&lt;void&gt; {&#10;    const formData = new FormData()&#10;    formData.append('file', file)&#10;    await api.post('/image', formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    })&#10;  },&#10;&#10;  // 删除图片&#10;  async delete(hash: string): Promise&lt;void&gt; {&#10;    await api.delete(`/image/${hash}`)&#10;  },&#10;&#10;  // 获取图片信息&#10;  async getImage(hash: string): Promise&lt;Image&gt; {&#10;    const response = await api.get(`/image/${hash}`)&#10;    return response.data&#10;  },&#10;&#10;  // 获取图片文件URL&#10;  getImageUrl(hash: string): string {&#10;    return `/api/file?hash=${hash}`&#10;  },&#10;&#10;  // 获取缩略图URL (使用同样的文件接口)&#10;  getThumbnailUrl(hash: string): string {&#10;    return `/api/file?hash=${hash}`&#10;  },&#10;&#10;  // 下载图片文件&#10;  async downloadImage(hash: string): Promise&lt;Blob&gt; {&#10;    const response = await api.get(`/file?hash=${hash}`, {&#10;      responseType: 'blob'&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 批量下载图片为ZIP&#10;  async downloadZip(hashes: string[]): Promise&lt;Blob&gt; {&#10;    const response = await api.post('/file/zip', hashes, {&#10;      responseType: 'blob'&#10;    })&#10;    return response.data&#10;  }&#10;}&#10;&#10;// 标签API服务&#10;export const tagAPI = {&#10;  // 获取标签列表&#10;  async queryTags(keyword?: string): Promise&lt;string[]&gt; {&#10;    const response = await api.get('/tag/query', {&#10;      params: keyword ? { keyword } : {}&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 设置Tagger服务URL&#10;  async setTaggerUrl(url: string): Promise&lt;void&gt; {&#10;    await api.put('/tag/tagger', url, {&#10;      headers: {&#10;        'Content-Type': 'text/plain'&#10;      }&#10;    })&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import axios from 'axios'&#10;import qs from 'qs'&#10;import type { Image, Page, QueryParams } from './types'&#10;&#10;// 创建axios实例&#10;const api = axios.create({&#10;  baseURL: '/', // 修改为根路径，不使用/api前缀&#10;  timeout: 10000&#10;})&#10;&#10;// 图片API服务&#10;export const imageAPI = {&#10;  // 查询图片&#10;  async query(params: Partial&lt;QueryParams&gt;): Promise&lt;Page&lt;Image&gt;&gt; {&#10;    const response = await api.get('/query', { &#10;      params,&#10;      paramsSerializer: params =&gt; qs.stringify(params, { arrayFormat: 'repeat' })&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 上传图片&#10;  async upload(file: File): Promise&lt;void&gt; {&#10;    const formData = new FormData()&#10;    formData.append('file', file)&#10;    await api.post('/image', formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    })&#10;  },&#10;&#10;  // 删除图片&#10;  async delete(hash: string): Promise&lt;void&gt; {&#10;    await api.delete(`/image/${hash}`)&#10;  },&#10;&#10;  // 获取图片信息&#10;  async getImage(hash: string): Promise&lt;Image&gt; {&#10;    const response = await api.get(`/image/${hash}`)&#10;    return response.data&#10;  },&#10;&#10;  // 获取图片文件URL&#10;  getImageUrl(hash: string): string {&#10;    return `/file?hash=${hash}`&#10;  },&#10;&#10;  // 获取缩略图URL (使用同样的文件接口)&#10;  getThumbnailUrl(hash: string): string {&#10;    return `/file?hash=${hash}`&#10;  },&#10;&#10;  // 下载图片文件&#10;  async downloadImage(hash: string): Promise&lt;Blob&gt; {&#10;    const response = await api.get(`/file?hash=${hash}`, {&#10;      responseType: 'blob'&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 批量下载图片为ZIP&#10;  async downloadZip(hashes: string[]): Promise&lt;Blob&gt; {&#10;    const response = await api.post('/file/zip', hashes, {&#10;      responseType: 'blob'&#10;    })&#10;    return response.data&#10;  }&#10;}&#10;&#10;// 标签API服务&#10;export const tagAPI = {&#10;  // 获取标签列表&#10;  async queryTags(keyword?: string): Promise&lt;string[]&gt; {&#10;    const response = await api.get('/tag/query', {&#10;      params: keyword ? { keyword } : {}&#10;    })&#10;    return response.data&#10;  },&#10;&#10;  // 设置Tagger服务URL&#10;  async setTaggerUrl(url: string): Promise&lt;void&gt; {&#10;    await api.put('/tag/tagger', url, {&#10;      headers: {&#10;        'Content-Type': 'text/plain'&#10;      }&#10;    })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api/index.ts" />
              <option name="updatedContent" value="// 图片相关的类型定义&#10;export interface Image {&#10;  hash: string&#10;  filename: string&#10;  path: string&#10;  size: number&#10;  width: number&#10;  height: number&#10;  format: string&#10;  createdAt: string&#10;  updatedAt: string&#10;  tags?: string[]&#10;  description?: string&#10;}&#10;&#10;// 图片查询参数&#10;export interface ImageQueryParams {&#10;  page: number&#10;  size: number&#10;  tags?: string[]&#10;  filename?: string&#10;  sortBy?: 'createdAt' | 'filename' | 'size'&#10;  sortOrder?: 'asc' | 'desc'&#10;}&#10;&#10;// 分页响应&#10;export interface PageResponse&lt;T&gt; {&#10;  content: T[]&#10;  totalElements: number&#10;  totalPages: number&#10;  page: number&#10;  size: number&#10;  first: boolean&#10;  last: boolean&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/ImageInfo.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ImageInfo.vue" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-info&quot;&gt;&#10;    &lt;!-- 头部操作区 --&gt;&#10;    &lt;div class=&quot;info-header&quot;&gt;&#10;      &lt;h3 class=&quot;image-title&quot;&gt;{{ image.filename }}&lt;/h3&gt;&#10;      &lt;el-button&#10;        type=&quot;text&quot;&#10;        size=&quot;large&quot;&#10;        :icon=&quot;Close&quot;&#10;        @click=&quot;$emit('close')&quot;&#10;        class=&quot;close-btn&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 基本信息 --&gt;&#10;    &lt;div class=&quot;info-section&quot;&gt;&#10;      &lt;h4 class=&quot;section-title&quot;&gt;基本信息&lt;/h4&gt;&#10;      &lt;div class=&quot;info-grid&quot;&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;文件名：&lt;/span&gt;&#10;          &lt;span class=&quot;value&quot;&gt;{{ image.filename }}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;格式：&lt;/span&gt;&#10;          &lt;span class=&quot;value&quot;&gt;{{ image.format.toUpperCase() }}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;尺寸：&lt;/span&gt;&#10;          &lt;span class=&quot;value&quot;&gt;{{ image.width }} × {{ image.height }}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;大小：&lt;/span&gt;&#10;          &lt;span class=&quot;value&quot;&gt;{{ formatFileSize(image.size) }}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;创建时间：&lt;/span&gt;&#10;          &lt;span class=&quot;value&quot;&gt;{{ formatDate(image.createdAt) }}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;info-item&quot;&gt;&#10;          &lt;span class=&quot;label&quot;&gt;哈希值：&lt;/span&gt;&#10;          &lt;span class=&quot;value hash-value&quot; :title=&quot;image.hash&quot;&gt;{{ image.hash.substring(0, 16) }}...&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 标签信息 --&gt;&#10;    &lt;div class=&quot;info-section&quot;&gt;&#10;      &lt;h4 class=&quot;section-title&quot;&gt;标签&lt;/h4&gt;&#10;      &lt;div class=&quot;tags-container&quot;&gt;&#10;        &lt;el-tag&#10;          v-for=&quot;tag in image.tags&quot;&#10;          :key=&quot;tag&quot;&#10;          type=&quot;primary&quot;&#10;          effect=&quot;light&quot;&#10;          size=&quot;small&quot;&#10;          class=&quot;tag-item&quot;&#10;        &gt;&#10;          {{ tag }}&#10;        &lt;/el-tag&gt;&#10;        &lt;el-tag&#10;          v-if=&quot;!image.tags || image.tags.length === 0&quot;&#10;          type=&quot;info&quot;&#10;          effect=&quot;plain&quot;&#10;          size=&quot;small&quot;&#10;        &gt;&#10;          暂无标签&#10;        &lt;/el-tag&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 描述信息 --&gt;&#10;    &lt;div class=&quot;info-section&quot;&gt;&#10;      &lt;h4 class=&quot;section-title&quot;&gt;描述&lt;/h4&gt;&#10;      &lt;div class=&quot;description-container&quot;&gt;&#10;        &lt;p v-if=&quot;image.description&quot; class=&quot;description-text&quot;&gt;&#10;          {{ image.description }}&#10;        &lt;/p&gt;&#10;        &lt;p v-else class=&quot;no-description&quot;&gt;暂无描述&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 操作按钮 --&gt;&#10;    &lt;div class=&quot;info-actions&quot;&gt;&#10;      &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;downloadImage&quot;&gt;&#10;        &lt;el-icon&gt;&lt;Download /&gt;&lt;/el-icon&gt;&#10;        下载图片&#10;      &lt;/el-button&gt;&#10;      &lt;el-button type=&quot;default&quot; size=&quot;small&quot; @click=&quot;copyImageUrl&quot;&gt;&#10;        &lt;el-icon&gt;&lt;Link /&gt;&lt;/el-icon&gt;&#10;        复制链接&#10;      &lt;/el-button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { Close, Download, Link } from '@element-plus/icons-vue'&#10;import { ElMessage } from 'element-plus'&#10;import type { Image } from '../api'&#10;import { useImageStore } from '../stores/image'&#10;&#10;const props = defineProps&lt;{&#10;  image: Image&#10;}&gt;()&#10;&#10;defineEmits(['close'])&#10;&#10;const imageStore = useImageStore()&#10;&#10;// 格式化文件大小&#10;const formatFileSize = (bytes: number): string =&gt; {&#10;  if (bytes === 0) return '0 B'&#10;  const k = 1024&#10;  const sizes = ['B', 'KB', 'MB', 'GB']&#10;  const i = Math.floor(Math.log(bytes) / Math.log(k))&#10;  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]&#10;}&#10;&#10;// 格式化日期&#10;const formatDate = (dateString: string): string =&gt; {&#10;  const date = new Date(dateString)&#10;  return date.toLocaleDateString('zh-CN', {&#10;    year: 'numeric',&#10;    month: '2-digit',&#10;    day: '2-digit',&#10;    hour: '2-digit',&#10;    minute: '2-digit'&#10;  })&#10;}&#10;&#10;// 下载图片&#10;const downloadImage = () =&gt; {&#10;  const link = document.createElement('a')&#10;  link.href = imageStore.getImageUrl(props.image.hash)&#10;  link.download = props.image.filename&#10;  link.click()&#10;  ElMessage.success('开始下载图片')&#10;}&#10;&#10;// 复制图片链接&#10;const copyImageUrl = async () =&gt; {&#10;  try {&#10;    const url = imageStore.getImageUrl(props.image.hash)&#10;    await navigator.clipboard.writeText(url)&#10;    ElMessage.success('图片链接已复制到剪贴板')&#10;  } catch (error) {&#10;    ElMessage.error('复制失败，请手动复制')&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-info {&#10;  padding: 24px;&#10;  height: 100%;&#10;  overflow-y: auto;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 24px;&#10;}&#10;&#10;.info-header {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  padding-bottom: 16px;&#10;  border-bottom: 1px solid var(--el-border-color-light);&#10;}&#10;&#10;.image-title {&#10;  margin: 0;&#10;  font-size: 18px;&#10;  font-weight: 600;&#10;  color: var(--el-text-color-primary);&#10;  flex: 1;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  white-space: nowrap;&#10;}&#10;&#10;.close-btn {&#10;  padding: 8px;&#10;  color: var(--el-text-color-secondary);&#10;}&#10;&#10;.close-btn:hover {&#10;  color: var(--el-text-color-primary);&#10;}&#10;&#10;.info-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;}&#10;&#10;.section-title {&#10;  margin: 0;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  color: var(--el-text-color-primary);&#10;}&#10;&#10;.info-grid {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;}&#10;&#10;.info-item {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;}&#10;&#10;.label {&#10;  font-weight: 500;&#10;  color: var(--el-text-color-secondary);&#10;  min-width: 80px;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.value {&#10;  color: var(--el-text-color-primary);&#10;  flex: 1;&#10;  word-break: break-all;&#10;}&#10;&#10;.hash-value {&#10;  font-family: monospace;&#10;  font-size: 12px;&#10;  background: var(--el-fill-color-light);&#10;  padding: 2px 6px;&#10;  border-radius: 4px;&#10;  cursor: pointer;&#10;}&#10;&#10;.tags-container {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 8px;&#10;}&#10;&#10;.tag-item {&#10;  margin: 0;&#10;}&#10;&#10;.description-container {&#10;  padding: 12px;&#10;  background: var(--el-fill-color-lighter);&#10;  border-radius: 8px;&#10;  border-left: 4px solid var(--el-color-primary);&#10;}&#10;&#10;.description-text {&#10;  margin: 0;&#10;  line-height: 1.6;&#10;  color: var(--el-text-color-primary);&#10;}&#10;&#10;.no-description {&#10;  margin: 0;&#10;  color: var(--el-text-color-secondary);&#10;  font-style: italic;&#10;}&#10;&#10;.info-actions {&#10;  display: flex;&#10;  gap: 12px;&#10;  margin-top: auto;&#10;  padding-top: 16px;&#10;  border-top: 1px solid var(--el-border-color-light);&#10;}&#10;&#10;.info-actions .el-button {&#10;  flex: 1;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/ImageViewer.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ImageViewer.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;teleport to=&quot;body&quot;&gt;&#10;    &lt;div class=&quot;image-viewer-overlay&quot; @click=&quot;onClose&quot;&gt;&#10;      &lt;div class=&quot;viewer-content&quot; @click.stop&gt;&#10;          &lt;ImagePreview :url=&quot;imageStore.getImageUrl(image.hash)&quot;/&gt;&#10;          &lt;ImagePreview :url=&quot;imageStore.getImageUrl(image.hash)&quot;/&gt;&#10;}&#10;        &lt;div class=&quot;info-area&quot;&gt;&#10;          &lt;ImageInfo :image=&quot;image&quot; @close=&quot;onClose&quot;/&gt;&#10;        &lt;/div&gt;&#10;  box-shadow: var(--el-box-shadow);&#10;  display: flex;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;}&#10;&#10;&#10;import type {Image} from &quot;../api&quot;&#10;  justify-content: center;&#10;import {useImageStore} from &quot;../stores/image&quot;&#10;  background: var(--el-bg-color-overlay);&#10;  padding: 20px;&#10;defineProps&lt;{&#10;}&#10;  max-width: 400px;&#10;  background: var(--el-bg-color);&#10;const emit = defineEmits([&quot;close&quot;])&#10;  overflow-y: auto;&#10;  max-height: 100%;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;teleport to=&quot;body&quot;&gt;&#10;    &lt;div class=&quot;image-viewer-overlay&quot; @click=&quot;handleOverlayClick&quot; @keydown.esc=&quot;onClose&quot;&gt;&#10;      &lt;div class=&quot;viewer-content&quot; @click.stop&gt;&#10;        &lt;!-- 图片显示区域 --&gt;&#10;        &lt;div class=&quot;image-area&quot;&gt;&#10;          &lt;ImagePreview :url=&quot;imageStore.getImageUrl(image.hash)&quot; /&gt;&#10;&#10;          &lt;!-- 导航按钮 --&gt;&#10;          &lt;div class=&quot;nav-controls&quot; v-if=&quot;showNavigation&quot;&gt;&#10;            &lt;el-button&#10;              circle&#10;              size=&quot;large&quot;&#10;              :icon=&quot;ArrowLeft&quot;&#10;              @click=&quot;$emit('previous')&quot;&#10;              class=&quot;nav-btn nav-prev&quot;&#10;              :disabled=&quot;!hasPrevious&quot;&#10;            /&gt;&#10;            &lt;el-button&#10;              circle&#10;              size=&quot;large&quot;&#10;              :icon=&quot;ArrowRight&quot;&#10;              @click=&quot;$emit('next')&quot;&#10;              class=&quot;nav-btn nav-next&quot;&#10;              :disabled=&quot;!hasNext&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- 工具栏 --&gt;&#10;          &lt;div class=&quot;toolbar&quot;&gt;&#10;            &lt;div class=&quot;toolbar-left&quot;&gt;&#10;              &lt;el-button size=&quot;small&quot; :icon=&quot;ZoomIn&quot; @click=&quot;zoomIn&quot;&gt;放大&lt;/el-button&gt;&#10;              &lt;el-button size=&quot;small&quot; :icon=&quot;ZoomOut&quot; @click=&quot;zoomOut&quot;&gt;缩小&lt;/el-button&gt;&#10;              &lt;el-button size=&quot;small&quot; :icon=&quot;RefreshRight&quot; @click=&quot;resetZoom&quot;&gt;重置&lt;/el-button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;toolbar-right&quot;&gt;&#10;              &lt;el-button&#10;                size=&quot;small&quot;&#10;                :icon=&quot;infoVisible ? Hide : View&quot;&#10;                @click=&quot;toggleInfo&quot;&#10;              &gt;&#10;                {{ infoVisible ? '隐藏信息' : '显示信息' }}&#10;              &lt;/el-button&gt;&#10;              &lt;el-button size=&quot;small&quot; :icon=&quot;Close&quot; @click=&quot;onClose&quot;&gt;关闭&lt;/el-button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 信息面板 --&gt;&#10;        &lt;transition name=&quot;slide-left&quot;&gt;&#10;          &lt;div v-if=&quot;infoVisible&quot; class=&quot;info-area&quot;&gt;&#10;            &lt;ImageInfo :image=&quot;image&quot; @close=&quot;onClose&quot; /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/transition&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/teleport&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, onMounted, onUnmounted } from 'vue'&#10;import { ArrowLeft, ArrowRight, ZoomIn, ZoomOut, RefreshRight, View, Hide, Close } from '@element-plus/icons-vue'&#10;import type { Image } from &quot;../api&quot;&#10;import ImagePreview from &quot;./ImagePreview.vue&quot;&#10;import { useImageStore } from &quot;../stores/image&quot;&#10;import ImageInfo from &quot;./ImageInfo.vue&quot;&#10;&#10;const props = defineProps&lt;{&#10;  image: Image&#10;  showNavigation?: boolean&#10;  hasPrevious?: boolean&#10;  hasNext?: boolean&#10;}&gt;()&#10;&#10;const emit = defineEmits([&quot;close&quot;, &quot;previous&quot;, &quot;next&quot;])&#10;&#10;const imageStore = useImageStore()&#10;const infoVisible = ref(true)&#10;const zoomLevel = ref(1)&#10;&#10;// 处理遮罩层点击&#10;const handleOverlayClick = (event: MouseEvent) =&gt; {&#10;  if (event.target === event.currentTarget) {&#10;    onClose()&#10;  }&#10;}&#10;&#10;// 关闭查看器&#10;const onClose = () =&gt; {&#10;  emit(&quot;close&quot;)&#10;}&#10;&#10;// 切换信息面板&#10;const toggleInfo = () =&gt; {&#10;  infoVisible.value = !infoVisible.value&#10;}&#10;&#10;// 缩放控制&#10;const zoomIn = () =&gt; {&#10;  zoomLevel.value = Math.min(zoomLevel.value * 1.2, 3)&#10;}&#10;&#10;const zoomOut = () =&gt; {&#10;  zoomLevel.value = Math.max(zoomLevel.value / 1.2, 0.1)&#10;}&#10;&#10;const resetZoom = () =&gt; {&#10;  zoomLevel.value = 1&#10;}&#10;&#10;// 键盘快捷键&#10;const handleKeydown = (event: KeyboardEvent) =&gt; {&#10;  switch (event.key) {&#10;    case 'Escape':&#10;      onClose()&#10;      break&#10;    case 'ArrowLeft':&#10;      if (props.hasPrevious) emit('previous')&#10;      break&#10;    case 'ArrowRight':&#10;      if (props.hasNext) emit('next')&#10;      break&#10;    case 'i':&#10;    case 'I':&#10;      toggleInfo()&#10;      break&#10;    case '+':&#10;    case '=':&#10;      zoomIn()&#10;      break&#10;    case '-':&#10;      zoomOut()&#10;      break&#10;    case '0':&#10;      resetZoom()&#10;      break&#10;  }&#10;}&#10;&#10;onMounted(() =&gt; {&#10;  document.addEventListener('keydown', handleKeydown)&#10;  document.body.style.overflow = 'hidden'&#10;})&#10;&#10;onUnmounted(() =&gt; {&#10;  document.removeEventListener('keydown', handleKeydown)&#10;  document.body.style.overflow = ''&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-viewer-overlay {&#10;  position: fixed;&#10;  inset: 0;&#10;  background: rgba(0, 0, 0, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  z-index: 2000;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 0;&#10;}&#10;&#10;.viewer-content {&#10;  width: 100vw;&#10;  height: 100vh;&#10;  display: flex;&#10;  position: relative;&#10;}&#10;&#10;.image-area {&#10;  flex: 1;&#10;  display: flex;&#10;  flex-direction: column;&#10;  position: relative;&#10;  background: var(--el-bg-color-page);&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.info-area {&#10;  width: 400px;&#10;  min-width: 350px;&#10;  max-width: 500px;&#10;  background: var(--el-bg-color);&#10;  border-left: 1px solid var(--el-border-color);&#10;  overflow: hidden;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.nav-controls {&#10;  position: absolute;&#10;  top: 50%;&#10;  left: 0;&#10;  right: 0;&#10;  transform: translateY(-50%);&#10;  display: flex;&#10;  justify-content: space-between;&#10;  padding: 0 20px;&#10;  pointer-events: none;&#10;}&#10;&#10;.nav-btn {&#10;  pointer-events: auto;&#10;  background: rgba(0, 0, 0, 0.5) !important;&#10;  border: none !important;&#10;  color: white !important;&#10;  backdrop-filter: blur(8px);&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.nav-btn:hover:not(:disabled) {&#10;  background: rgba(0, 0, 0, 0.7) !important;&#10;  transform: scale(1.1);&#10;}&#10;&#10;.nav-btn:disabled {&#10;  opacity: 0.3;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.toolbar {&#10;  position: absolute;&#10;  bottom: 20px;&#10;  left: 20px;&#10;  right: 20px;&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  background: rgba(0, 0, 0, 0.8);&#10;  backdrop-filter: blur(10px);&#10;  padding: 12px 16px;&#10;  border-radius: 12px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);&#10;}&#10;&#10;.toolbar-left,&#10;.toolbar-right {&#10;  display: flex;&#10;  gap: 8px;&#10;}&#10;&#10;.toolbar .el-button {&#10;  background: transparent !important;&#10;  border: 1px solid rgba(255, 255, 255, 0.2) !important;&#10;  color: white !important;&#10;}&#10;&#10;.toolbar .el-button:hover {&#10;  background: rgba(255, 255, 255, 0.1) !important;&#10;  border-color: rgba(255, 255, 255, 0.3) !important;&#10;}&#10;&#10;/* 信息面板滑入动画 */&#10;.slide-left-enter-active,&#10;.slide-left-leave-active {&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.slide-left-enter-from {&#10;  transform: translateX(100%);&#10;  opacity: 0;&#10;}&#10;&#10;.slide-left-leave-to {&#10;  transform: translateX(100%);&#10;  opacity: 0;&#10;}&#10;&#10;/* 响应式设计 */&#10;@media (max-width: 768px) {&#10;  .viewer-content {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .info-area {&#10;    width: 100%;&#10;    max-width: none;&#10;    height: 40vh;&#10;    border-left: none;&#10;    border-top: 1px solid var(--el-border-color);&#10;    min-width: auto;&#10;  }&#10;&#10;  .toolbar {&#10;    bottom: 10px;&#10;    left: 10px;&#10;    right: 10px;&#10;    padding: 8px 12px;&#10;  }&#10;&#10;  .toolbar-left,&#10;  .toolbar-right {&#10;    gap: 4px;&#10;  }&#10;&#10;  .toolbar .el-button {&#10;    padding: 4px 8px;&#10;    font-size: 12px;&#10;  }&#10;&#10;  .nav-controls {&#10;    padding: 0 10px;&#10;  }&#10;}&#10;&#10;/* 滑入动画在移动端的调整 */&#10;@media (max-width: 768px) {&#10;  .slide-left-enter-from,&#10;  .slide-left-leave-to {&#10;    transform: translateY(100%);&#10;  }&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/business/image/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/business/image/index.ts" />
              <option name="updatedContent" value="// 图片相关组件统一导出&#10;export { default as ImageCard } from './ImageCard.vue'&#10;export { default as ImageGrid } from './ImageGrid.vue' &#10;export { default as ImageViewer } from './ImageViewer.vue'&#10;export { default as ImagePreview } from './ImagePreview.vue'&#10;export { default as ImageInfo } from './ImageInfo.vue'&#10;export { default as ImageGallery } from './ImageGallery.vue'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/gallery/ImageGallery.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/gallery/ImageGallery.vue" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;image-gallery&quot;&gt;&#10;    &lt;!-- 加载状态 --&gt;&#10;    &lt;div v-if=&quot;imageStore.loading&quot; class=&quot;loading-container&quot;&gt;&#10;      &lt;el-skeleton :rows=&quot;6&quot; animated /&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 空状态 --&gt;&#10;    &lt;el-empty&#10;      v-else-if=&quot;imageStore.isEmpty&quot;&#10;      description=&quot;暂无图片数据&quot;&#10;      class=&quot;empty-state&quot;&#10;    &gt;&#10;      &lt;el-button type=&quot;primary&quot; @click=&quot;imageStore.query&quot;&gt;刷新&lt;/el-button&gt;&#10;    &lt;/el-empty&gt;&#10;&#10;    &lt;!-- 图片网格 --&gt;&#10;    &lt;div v-else class=&quot;gallery-container&quot;&gt;&#10;      &lt;div class=&quot;gallery-grid&quot; :style=&quot;gridStyle&quot;&gt;&#10;        &lt;div&#10;          v-for=&quot;(image, index) in imageStore.images&quot;&#10;          :key=&quot;image.hash&quot;&#10;          class=&quot;gallery-item&quot;&#10;          @click=&quot;openViewer(image, index)&quot;&#10;        &gt;&#10;          &lt;el-image&#10;            :src=&quot;imageStore.getImageThumbnailUrl(image.hash)&quot;&#10;            :alt=&quot;image.filename&quot;&#10;            fit=&quot;cover&quot;&#10;            class=&quot;gallery-image&quot;&#10;            lazy&#10;          &gt;&#10;            &lt;template #placeholder&gt;&#10;              &lt;div class=&quot;image-placeholder&quot;&gt;&#10;                &lt;el-icon&gt;&lt;Picture /&gt;&lt;/el-icon&gt;&#10;              &lt;/div&gt;&#10;            &lt;/template&gt;&#10;            &lt;template #error&gt;&#10;              &lt;div class=&quot;image-error&quot;&gt;&#10;                &lt;el-icon&gt;&lt;PictureFilled /&gt;&lt;/el-icon&gt;&#10;              &lt;/div&gt;&#10;            &lt;/template&gt;&#10;          &lt;/el-image&gt;&#10;          &#10;          &lt;!-- 图片信息覆盖层 --&gt;&#10;          &lt;div class=&quot;image-overlay&quot;&gt;&#10;            &lt;div class=&quot;image-info&quot;&gt;&#10;              &lt;span class=&quot;filename&quot;&gt;{{ image.filename }}&lt;/span&gt;&#10;              &lt;span class=&quot;dimensions&quot;&gt;{{ image.width }} × {{ image.height }}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- 分页 --&gt;&#10;      &lt;div v-if=&quot;imageStore.totalPages &gt; 1&quot; class=&quot;pagination-container&quot;&gt;&#10;        &lt;el-pagination&#10;          v-model:current-page=&quot;imageStore.params.page&quot;&#10;          :page-size=&quot;imageStore.params.size&quot;&#10;          :total=&quot;imageStore.totalElements&quot;&#10;          :page-sizes=&quot;[20, 50, 100, 200]&quot;&#10;          layout=&quot;total, sizes, prev, pager, next, jumper&quot;&#10;          @size-change=&quot;handleSizeChange&quot;&#10;          @current-change=&quot;handleCurrentChange&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 图片查看器 --&gt;&#10;    &lt;ImageViewer&#10;      v-if=&quot;selectedImage&quot;&#10;      :image=&quot;selectedImage&quot;&#10;      :show-navigation=&quot;true&quot;&#10;      :has-previous=&quot;selectedIndex &gt; 0&quot;&#10;      :has-next=&quot;selectedIndex &lt; imageStore.images.length - 1&quot;&#10;      @close=&quot;closeViewer&quot;&#10;      @previous=&quot;previousImage&quot;&#10;      @next=&quot;nextImage&quot;&#10;    /&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ref, computed, onMounted, watch } from 'vue'&#10;import { Picture, PictureFilled } from '@element-plus/icons-vue'&#10;import type { Image } from '../../api'&#10;import { useImageStore } from '../../stores/image'&#10;import ImageViewer from '../ImageViewer.vue'&#10;&#10;const props = defineProps&lt;{&#10;  columnCount?: number&#10;  gap?: number&#10;}&gt;()&#10;&#10;const imageStore = useImageStore()&#10;const selectedImage = ref&lt;Image | null&gt;(null)&#10;const selectedIndex = ref(-1)&#10;&#10;// 网格样式&#10;const gridStyle = computed(() =&gt; ({&#10;  gridTemplateColumns: `repeat(${props.columnCount || 4}, 1fr)`,&#10;  gap: `${props.gap || 16}px`&#10;}))&#10;&#10;// 打开图片查看器&#10;const openViewer = (image: Image, index: number) =&gt; {&#10;  selectedImage.value = image&#10;  selectedIndex.value = index&#10;}&#10;&#10;// 关闭图片查看器&#10;const closeViewer = () =&gt; {&#10;  selectedImage.value = null&#10;  selectedIndex.value = -1&#10;}&#10;&#10;// 上一张图片&#10;const previousImage = () =&gt; {&#10;  if (selectedIndex.value &gt; 0) {&#10;    selectedIndex.value--&#10;    selectedImage.value = imageStore.images[selectedIndex.value]&#10;  }&#10;}&#10;&#10;// 下一张图片&#10;const nextImage = () =&gt; {&#10;  if (selectedIndex.value &lt; imageStore.images.length - 1) {&#10;    selectedIndex.value++&#10;    selectedImage.value = imageStore.images[selectedIndex.value]&#10;  }&#10;}&#10;&#10;// 处理分页大小变化&#10;const handleSizeChange = (size: number) =&gt; {&#10;  imageStore.params.size = size&#10;  imageStore.params.page = 1&#10;  imageStore.query()&#10;}&#10;&#10;// 处理页码变化&#10;const handleCurrentChange = (page: number) =&gt; {&#10;  imageStore.params.page = page&#10;  imageStore.query()&#10;}&#10;&#10;// 监听参数变化，重新查询&#10;watch(() =&gt; imageStore.params, () =&gt; {&#10;  imageStore.query()&#10;}, { deep: true })&#10;&#10;// 组件挂载时查询数据&#10;onMounted(() =&gt; {&#10;  if (imageStore.images.length === 0) {&#10;    imageStore.query()&#10;  }&#10;})&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.image-gallery {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  background: var(--el-bg-color-page);&#10;}&#10;&#10;.loading-container {&#10;  flex: 1;&#10;  padding: 20px;&#10;}&#10;&#10;.empty-state {&#10;  flex: 1;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;}&#10;&#10;.gallery-container {&#10;  flex: 1;&#10;  display: flex;&#10;  flex-direction: column;&#10;  min-height: 0;&#10;}&#10;&#10;.gallery-grid {&#10;  flex: 1;&#10;  display: grid;&#10;  padding: 20px;&#10;  overflow-y: auto;&#10;  min-height: 0;&#10;}&#10;&#10;.gallery-item {&#10;  position: relative;&#10;  aspect-ratio: 1;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.gallery-item:hover {&#10;  transform: translateY(-4px);&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.gallery-item:hover .image-overlay {&#10;  opacity: 1;&#10;}&#10;&#10;.gallery-image {&#10;  width: 100%;&#10;  height: 100%;&#10;}&#10;&#10;.image-placeholder,&#10;.image-error {&#10;  width: 100%;&#10;  height: 100%;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  background: var(--el-fill-color-light);&#10;  color: var(--el-text-color-placeholder);&#10;}&#10;&#10;.image-error {&#10;  color: var(--el-color-error);&#10;}&#10;&#10;.image-overlay {&#10;  position: absolute;&#10;  bottom: 0;&#10;  left: 0;&#10;  right: 0;&#10;  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));&#10;  color: white;&#10;  padding: 16px 12px 12px;&#10;  opacity: 0;&#10;  transition: opacity 0.3s ease;&#10;}&#10;&#10;.image-info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 4px;&#10;}&#10;&#10;.filename {&#10;  font-weight: 500;&#10;  font-size: 14px;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  white-space: nowrap;&#10;}&#10;&#10;.dimensions {&#10;  font-size: 12px;&#10;  opacity: 0.8;&#10;}&#10;&#10;.pagination-container {&#10;  padding: 20px;&#10;  display: flex;&#10;  justify-content: center;&#10;  border-top: 1px solid var(--el-border-color-light);&#10;  background: var(--el-bg-color);&#10;}&#10;&#10;/* 响应式设计 */&#10;@media (max-width: 1200px) {&#10;  .gallery-grid {&#10;    grid-template-columns: repeat(3, 1fr) !important;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .gallery-grid {&#10;    grid-template-columns: repeat(2, 1fr) !important;&#10;    padding: 12px;&#10;    gap: 12px !important;&#10;  }&#10;  &#10;  .pagination-container {&#10;    padding: 12px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .gallery-grid {&#10;    grid-template-columns: 1fr !important;&#10;  }&#10;}&#10;&#10;/* 滚动条样式 */&#10;.gallery-grid::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-track {&#10;  background: var(--el-fill-color-lighter);&#10;  border-radius: 4px;&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb {&#10;  background: var(--el-fill-color-dark);&#10;  border-radius: 4px;&#10;}&#10;&#10;.gallery-grid::-webkit-scrollbar-thumb:hover {&#10;  background: var(--el-fill-color-darker);&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/index.ts" />
              <option name="updatedContent" value="/**&#10; * 组件统一导出文件&#10; * 建议的组件组织结构：&#10; * &#10; * components/&#10; * ├── base/              # 基础通用组件&#10; * ├── business/          # 业务组件&#10; * │   ├── image/         # 图片相关组件&#10; * │   ├── upload/        # 上传相关组件&#10; * │   └── query/         # 查询相关组件&#10; * ├── layout/            # 布局组件&#10; * ├── ui/                # UI组件(dialogs, panels, forms)&#10; * └── index.ts           # 统一导出&#10; */&#10;&#10;// === 图片相关组件 ===&#10;export { default as ImageCard } from './business/image/ImageCard.vue'&#10;export { default as ImageGrid } from './business/image/ImageGrid.vue'&#10;export { default as ImageViewer } from './business/image/ImageViewer.vue'&#10;export { default as ImagePreview } from './business/image/ImagePreview.vue'&#10;export { default as ImageInfo } from './business/image/ImageInfo.vue'&#10;export { default as ImageGallery } from './business/image/ImageGallery.vue'&#10;&#10;// === 上传相关组件 ===&#10;export { default as UploadQueue } from './business/upload/UploadQueue.vue'&#10;export { default as UploadManager } from './business/upload/UploadManager.vue'&#10;&#10;// === 查询相关组件 ===&#10;export { default as QueryForm } from './business/query/QueryForm.vue'&#10;export { default as FilterPanel } from './business/query/FilterPanel.vue'&#10;&#10;// === UI组件 ===&#10;export { default as SettingsDialog } from './ui/dialogs/SettingsDialog.vue'&#10;&#10;// === 布局组件 ===&#10;export { default as DesktopLayout } from './layout/DesktopLayout.vue'&#10;export { default as MobileLayout } from './layout/MobileLayout.vue'&#10;export { default as TabletLayout } from './layout/TabletLayout.vue'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/main.ts" />
              <option name="updatedContent" value="import { createApp } from 'vue'&#10;import { createPinia } from 'pinia'&#10;import ElementPlus from 'element-plus'&#10;import 'element-plus/dist/index.css'&#10;import './style.css'&#10;import App from './App.vue'&#10;&#10;const app = createApp(App)&#10;app.use(createPinia())&#10;app.use(ElementPlus)&#10;app.mount('#app')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/store.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/store.ts" />
              <option name="originalContent" value="import { defineStore } from 'pinia'&#10;import { ref, computed } from 'vue'&#10;import { imageAPI, tagAPI } from './api'&#10;import type { Image, QueryParams } from './types'&#10;&#10;export const useImageStore = defineStore('image', () =&gt; {&#10;  // 状态&#10;  const images = ref&lt;Image[]&gt;([])&#10;  const loading = ref(false)&#10;  const total = ref(0)&#10;  const totalPages = ref(0)&#10;  const currentPage = ref(1)&#10;  const allTags = ref&lt;string[]&gt;([])&#10;  const selectedImages = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;&#10;  // 查询参数&#10;  const queryParams = ref&lt;Partial&lt;QueryParams&gt;&gt;({&#10;    tags: [],&#10;    sort: 'random',&#10;    rating: 'all',&#10;    page: 1,&#10;    pageSize: 50,&#10;    seed: Math.random().toString()&#10;  })&#10;&#10;  // 计算属性&#10;  const hasImages = computed(() =&gt; images.value.length &gt; 0)&#10;  const isEmpty = computed(() =&gt; !loading.value &amp;&amp; !hasImages.value)&#10;  const hasSelection = computed(() =&gt; selectedImages.value.size &gt; 0)&#10;&#10;  // 方法&#10;  const loadImages = async () =&gt; {&#10;    loading.value = true&#10;    try {&#10;      const data = await imageAPI.query(queryParams.value)&#10;      images.value = data.records&#10;      total.value = data.totalElements&#10;      totalPages.value = data.totalPages&#10;      currentPage.value = data.page&#10;    } catch (error) {&#10;      console.error('加载图片失败:', error)&#10;      images.value = []&#10;      total.value = 0&#10;    } finally {&#10;      loading.value = false&#10;    }&#10;  }&#10;&#10;  const loadTags = async (keyword?: string) =&gt; {&#10;    try {&#10;      allTags.value = await tagAPI.queryTags(keyword)&#10;    } catch (error) {&#10;      console.error('加载标签失败:', error)&#10;      allTags.value = []&#10;    }&#10;  }&#10;&#10;  const uploadImage = async (file: File) =&gt; {&#10;    try {&#10;      await imageAPI.upload(file)&#10;      // 上传成功后重新加载图片列表&#10;      await loadImages()&#10;    } catch (error) {&#10;      console.error('上传失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const deleteImage = async (hash: string) =&gt; {&#10;    try {&#10;      await imageAPI.delete(hash)&#10;      // 从本地列表中移除&#10;      const index = images.value.findIndex(img =&gt; img.hash === hash)&#10;      if (index &gt; -1) {&#10;        images.value.splice(index, 1)&#10;        total.value--&#10;      }&#10;      // 从选中列表中移除&#10;      selectedImages.value.delete(hash)&#10;    } catch (error) {&#10;      console.error('删除失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const deleteSelectedImages = async () =&gt; {&#10;    const hashes = Array.from(selectedImages.value)&#10;    try {&#10;      await Promise.all(hashes.map(hash =&gt; imageAPI.delete(hash)))&#10;      // 从本地列表中移除&#10;      images.value = images.value.filter(img =&gt; !selectedImages.value.has(img.hash))&#10;      total.value -= hashes.length&#10;      selectedImages.value.clear()&#10;    } catch (error) {&#10;      console.error('批量删除失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const downloadSelectedImages = async () =&gt; {&#10;    const hashes = Array.from(selectedImages.value)&#10;    if (hashes.length === 0) return&#10;&#10;    try {&#10;      if (hashes.length === 1) {&#10;        // 单个文件直接下载&#10;        const blob = await imageAPI.downloadImage(hashes[0])&#10;        const image = images.value.find(img =&gt; img.hash === hashes[0])&#10;        const url = URL.createObjectURL(blob)&#10;        const a = document.createElement('a')&#10;        a.href = url&#10;        a.download = image?.filename || 'image'&#10;        a.click()&#10;        URL.revokeObjectURL(url)&#10;      } else {&#10;        // 多个文件打包下载&#10;        const blob = await imageAPI.downloadZip(hashes)&#10;        const url = URL.createObjectURL(blob)&#10;        const a = document.createElement('a')&#10;        a.href = url&#10;        a.download = `images_${Date.now()}.zip`&#10;        a.click()&#10;        URL.revokeObjectURL(url)&#10;      }&#10;    } catch (error) {&#10;      console.error('下载失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const updateQuery = (params: Partial&lt;QueryParams&gt;) =&gt; {&#10;    Object.assign(queryParams.value, params)&#10;    // 重置页码如果不是翻页操作&#10;    if (!params.page) {&#10;      queryParams.value.page = 1&#10;    }&#10;    loadImages()&#10;  }&#10;&#10;  const goToPage = (page: number) =&gt; {&#10;    queryParams.value.page = page&#10;    loadImages()&#10;  }&#10;&#10;  const refresh = () =&gt; {&#10;    queryParams.value.seed = Math.random().toString()&#10;    queryParams.value.page = 1&#10;    selectedImages.value.clear()&#10;    loadImages()&#10;  }&#10;&#10;  const toggleImageSelection = (hash: string) =&gt; {&#10;    if (selectedImages.value.has(hash)) {&#10;      selectedImages.value.delete(hash)&#10;    } else {&#10;      selectedImages.value.add(hash)&#10;    }&#10;  }&#10;&#10;  const selectAllImages = () =&gt; {&#10;    images.value.forEach(img =&gt; selectedImages.value.add(img.hash))&#10;  }&#10;&#10;  const clearSelection = () =&gt; {&#10;    selectedImages.value.clear()&#10;  }&#10;&#10;  const isImageSelected = (hash: string) =&gt; {&#10;    return selectedImages.value.has(hash)&#10;  }&#10;&#10;  return {&#10;    // 状态&#10;    images,&#10;    loading,&#10;    total,&#10;    totalPages,&#10;    currentPage,&#10;    allTags,&#10;    selectedImages,&#10;    queryParams,&#10;&#10;    // 计算属性&#10;    hasImages,&#10;    isEmpty,&#10;    hasSelection,&#10;&#10;    // 方法&#10;    loadImages,&#10;    loadTags,&#10;    uploadImage,&#10;    deleteImage,&#10;    deleteSelectedImages,&#10;    downloadSelectedImages,&#10;    updateQuery,&#10;    goToPage,&#10;    refresh,&#10;    toggleImageSelection,&#10;    selectAllImages,&#10;    clearSelection,&#10;    isImageSelected&#10;  }&#10;})&#10;" />
              <option name="updatedContent" value="import { defineStore } from 'pinia'&#10;import { ref, computed } from 'vue'&#10;import { imageAPI, tagAPI } from './api'&#10;import type { Image, QueryParams } from './types'&#10;&#10;export const useImageStore = defineStore('image', () =&gt; {&#10;  // 状态&#10;  const images = ref&lt;Image[]&gt;([])&#10;  const loading = ref(false)&#10;  const total = ref(0)&#10;  const totalPages = ref(0)&#10;  const currentPage = ref(1)&#10;  const allTags = ref&lt;string[]&gt;([])&#10;  const selectedImages = ref&lt;Set&lt;string&gt;&gt;(new Set())&#10;&#10;  // 查询参数&#10;  const queryParams = ref&lt;Partial&lt;QueryParams&gt;&gt;({&#10;    tags: [],&#10;    sort: 'random',&#10;    rating: 'all',&#10;    page: 1,&#10;    pageSize: 50,&#10;    seed: Math.floor(Math.random() * 1000000).toString() // 生成整数形式的随机种子&#10;  })&#10;&#10;  // 计算属性&#10;  const hasImages = computed(() =&gt; images.value.length &gt; 0)&#10;  const isEmpty = computed(() =&gt; !loading.value &amp;&amp; !hasImages.value)&#10;  const hasSelection = computed(() =&gt; selectedImages.value.size &gt; 0)&#10;&#10;  // 方法&#10;  const loadImages = async () =&gt; {&#10;    loading.value = true&#10;    try {&#10;      const data = await imageAPI.query(queryParams.value)&#10;      images.value = data.records&#10;      total.value = data.totalElements&#10;      totalPages.value = data.totalPages&#10;      currentPage.value = data.page&#10;    } catch (error) {&#10;      console.error('加载图片失败:', error)&#10;      images.value = []&#10;      total.value = 0&#10;    } finally {&#10;      loading.value = false&#10;    }&#10;  }&#10;&#10;  const loadTags = async (keyword?: string) =&gt; {&#10;    try {&#10;      allTags.value = await tagAPI.queryTags(keyword)&#10;    } catch (error) {&#10;      console.error('加载标签失败:', error)&#10;      allTags.value = []&#10;    }&#10;  }&#10;&#10;  const uploadImage = async (file: File) =&gt; {&#10;    try {&#10;      await imageAPI.upload(file)&#10;      // 上传成功后重新加载图片列表&#10;      await loadImages()&#10;    } catch (error) {&#10;      console.error('上传失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const deleteImage = async (hash: string) =&gt; {&#10;    try {&#10;      await imageAPI.delete(hash)&#10;      // 从本地列表中移除&#10;      const index = images.value.findIndex(img =&gt; img.hash === hash)&#10;      if (index &gt; -1) {&#10;        images.value.splice(index, 1)&#10;        total.value--&#10;      }&#10;      // 从选中列表中移除&#10;      selectedImages.value.delete(hash)&#10;    } catch (error) {&#10;      console.error('删除失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const deleteSelectedImages = async () =&gt; {&#10;    const hashes = Array.from(selectedImages.value)&#10;    try {&#10;      await Promise.all(hashes.map(hash =&gt; imageAPI.delete(hash)))&#10;      // 从本地列表中移除&#10;      images.value = images.value.filter(img =&gt; !selectedImages.value.has(img.hash))&#10;      total.value -= hashes.length&#10;      selectedImages.value.clear()&#10;    } catch (error) {&#10;      console.error('批量删除失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const downloadSelectedImages = async () =&gt; {&#10;    const hashes = Array.from(selectedImages.value)&#10;    if (hashes.length === 0) return&#10;&#10;    try {&#10;      if (hashes.length === 1) {&#10;        // 单个文件直接下载&#10;        const blob = await imageAPI.downloadImage(hashes[0])&#10;        const image = images.value.find(img =&gt; img.hash === hashes[0])&#10;        const url = URL.createObjectURL(blob)&#10;        const a = document.createElement('a')&#10;        a.href = url&#10;        a.download = image?.filename || 'image'&#10;        a.click()&#10;        URL.revokeObjectURL(url)&#10;      } else {&#10;        // 多个文件打包下载&#10;        const blob = await imageAPI.downloadZip(hashes)&#10;        const url = URL.createObjectURL(blob)&#10;        const a = document.createElement('a')&#10;        a.href = url&#10;        a.download = `images_${Date.now()}.zip`&#10;        a.click()&#10;        URL.revokeObjectURL(url)&#10;      }&#10;    } catch (error) {&#10;      console.error('下载失败:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  const updateQuery = (params: Partial&lt;QueryParams&gt;) =&gt; {&#10;    Object.assign(queryParams.value, params)&#10;    // 重置页码如果不是翻页操作&#10;    if (!params.page) {&#10;      queryParams.value.page = 1&#10;    }&#10;    loadImages()&#10;  }&#10;&#10;  const goToPage = (page: number) =&gt; {&#10;    queryParams.value.page = page&#10;    loadImages()&#10;  }&#10;&#10;  const refresh = () =&gt; {&#10;    queryParams.value.seed = Math.floor(Math.random() * 1000000).toString() // 修复refresh中的seed生成&#10;    queryParams.value.page = 1&#10;    selectedImages.value.clear()&#10;    loadImages()&#10;  }&#10;&#10;  const toggleImageSelection = (hash: string) =&gt; {&#10;    if (selectedImages.value.has(hash)) {&#10;      selectedImages.value.delete(hash)&#10;    } else {&#10;      selectedImages.value.add(hash)&#10;    }&#10;  }&#10;&#10;  const selectAllImages = () =&gt; {&#10;    images.value.forEach(img =&gt; selectedImages.value.add(img.hash))&#10;  }&#10;&#10;  const clearSelection = () =&gt; {&#10;    selectedImages.value.clear()&#10;  }&#10;&#10;  const isImageSelected = (hash: string) =&gt; {&#10;    return selectedImages.value.has(hash)&#10;  }&#10;&#10;  return {&#10;    // 状态&#10;    images,&#10;    loading,&#10;    total,&#10;    totalPages,&#10;    currentPage,&#10;    allTags,&#10;    selectedImages,&#10;    queryParams,&#10;&#10;    // 计算属性&#10;    hasImages,&#10;    isEmpty,&#10;    hasSelection,&#10;&#10;    // 方法&#10;    loadImages,&#10;    loadTags,&#10;    uploadImage,&#10;    deleteImage,&#10;    deleteSelectedImages,&#10;    downloadSelectedImages,&#10;    updateQuery,&#10;    goToPage,&#10;    refresh,&#10;    toggleImageSelection,&#10;    selectAllImages,&#10;    clearSelection,&#10;    isImageSelected&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/stores/image.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/stores/image.ts" />
              <option name="updatedContent" value="import { defineStore } from 'pinia'&#10;import { ref, computed } from 'vue'&#10;import type { Image, ImageQueryParams, PageResponse } from '../api'&#10;&#10;export const useImageStore = defineStore('image', () =&gt; {&#10;  // 状态&#10;  const images = ref&lt;Image[]&gt;([])&#10;  const loading = ref(false)&#10;  const error = ref&lt;string | null&gt;(null)&#10;  const totalElements = ref(0)&#10;  const totalPages = ref(0)&#10;  const currentPage = ref(1)&#10;  &#10;  // 查询参数&#10;  const params = ref&lt;ImageQueryParams&gt;({&#10;    page: 1,&#10;    size: 20,&#10;    sortBy: 'createdAt',&#10;    sortOrder: 'desc'&#10;  })&#10;&#10;  // 计算属性&#10;  const hasImages = computed(() =&gt; images.value.length &gt; 0)&#10;  const isEmpty = computed(() =&gt; !loading.value &amp;&amp; images.value.length === 0)&#10;&#10;  // 获取图片URL的方法&#10;  const getImageUrl = (hash: string) =&gt; {&#10;    return `/api/images/${hash}`&#10;  }&#10;&#10;  const getImageThumbnailUrl = (hash: string) =&gt; {&#10;    return `/api/images/${hash}/thumbnail`&#10;  }&#10;&#10;  // 查询图片&#10;  const query = async () =&gt; {&#10;    loading.value = true&#10;    error.value = null&#10;    &#10;    try {&#10;      // 这里应该调用实际的API&#10;      // const response = await imageService.getImages(params.value)&#10;      // 暂时使用模拟数据&#10;      await new Promise(resolve =&gt; setTimeout(resolve, 500))&#10;      &#10;      const mockResponse: PageResponse&lt;Image&gt; = {&#10;        content: [],&#10;        totalElements: 0,&#10;        totalPages: 0,&#10;        page: params.value.page,&#10;        size: params.value.size,&#10;        first: params.value.page === 1,&#10;        last: true&#10;      }&#10;      &#10;      images.value = mockResponse.content&#10;      totalElements.value = mockResponse.totalElements&#10;      totalPages.value = mockResponse.totalPages&#10;      currentPage.value = mockResponse.page&#10;    } catch (err) {&#10;      error.value = err instanceof Error ? err.message : '加载图片失败'&#10;    } finally {&#10;      loading.value = false&#10;    }&#10;  }&#10;&#10;  // 重置状态&#10;  const reset = () =&gt; {&#10;    images.value = []&#10;    loading.value = false&#10;    error.value = null&#10;    totalElements.value = 0&#10;    totalPages.value = 0&#10;    currentPage.value = 1&#10;    params.value = {&#10;      page: 1,&#10;      size: 20,&#10;      sortBy: 'createdAt',&#10;      sortOrder: 'desc'&#10;    }&#10;  }&#10;&#10;  return {&#10;    // 状态&#10;    images,&#10;    loading,&#10;    error,&#10;    totalElements,&#10;    totalPages,&#10;    currentPage,&#10;    params,&#10;    &#10;    // 计算属性&#10;    hasImages,&#10;    isEmpty,&#10;    &#10;    // 方法&#10;    getImageUrl,&#10;    getImageThumbnailUrl,&#10;    query,&#10;    reset&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/style.css" />
              <option name="updatedContent" value="/* 全局样式重置和基础样式 */&#10;* {&#10;  margin: 0;&#10;  padding: 0;&#10;  box-sizing: border-box;&#10;}&#10;&#10;body {&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;&#10;  background: #0a0a0a;&#10;  color: #e4e4e7;&#10;  line-height: 1.6;&#10;}&#10;&#10;#app {&#10;  min-height: 100vh;&#10;}&#10;&#10;/* 自定义滚动条 */&#10;::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;::-webkit-scrollbar-track {&#10;  background: #18181b;&#10;}&#10;&#10;::-webkit-scrollbar-thumb {&#10;  background: #3f3f46;&#10;  border-radius: 4px;&#10;}&#10;&#10;::-webkit-scrollbar-thumb:hover {&#10;  background: #52525b;&#10;}&#10;&#10;/* Element Plus 主题定制 */&#10;.el-header {&#10;  background: #18181b !important;&#10;  border-bottom: 1px solid #27272a;&#10;}&#10;&#10;.el-aside {&#10;  background: #18181b !important;&#10;  border-right: 1px solid #27272a;&#10;}&#10;&#10;.el-main {&#10;  background: #0a0a0a !important;&#10;  padding: 20px;&#10;}&#10;&#10;.el-card {&#10;  background: #18181b !important;&#10;  border-color: #27272a !important;&#10;}&#10;&#10;.el-input__inner,&#10;.el-input__wrapper {&#10;  background: #27272a !important;&#10;  border-color: #3f3f46 !important;&#10;  color: #e4e4e7 !important;&#10;}&#10;&#10;.el-button--primary {&#10;  background: #3b82f6 !important;&#10;  border-color: #3b82f6 !important;&#10;}&#10;&#10;.el-button--default {&#10;  background: #27272a !important;&#10;  border-color: #3f3f46 !important;&#10;  color: #e4e4e7 !important;&#10;}&#10;&#10;/* 图片网格样式 */&#10;.image-grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));&#10;  gap: 16px;&#10;  padding: 20px 0;&#10;}&#10;&#10;.image-card {&#10;  background: #18181b;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  transition: transform 0.2s, box-shadow 0.2s;&#10;  border: 1px solid #27272a;&#10;}&#10;&#10;.image-card:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;}&#10;&#10;.image-card img {&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;  cursor: pointer;&#10;}&#10;&#10;.image-info {&#10;  padding: 12px;&#10;}&#10;&#10;.image-title {&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  margin-bottom: 4px;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  white-space: nowrap;&#10;}&#10;&#10;.image-meta {&#10;  display: flex;&#10;  gap: 8px;&#10;  font-size: 12px;&#10;  color: #a1a1aa;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.image-tags {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 4px;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.tag {&#10;  background: #3f3f46;&#10;  color: #d4d4d8;&#10;  padding: 2px 8px;&#10;  border-radius: 12px;&#10;  font-size: 12px;&#10;}&#10;&#10;.image-actions {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;}&#10;&#10;/* 过滤面板样式 */&#10;.filter-panel {&#10;  padding: 20px;&#10;}&#10;&#10;.filter-section {&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.filter-title {&#10;  font-size: 14px;&#10;  font-weight: 600;&#10;  margin-bottom: 12px;&#10;  color: #e4e4e7;&#10;}&#10;&#10;/* 上传区域样式 */&#10;.upload-area {&#10;  border: 2px dashed #3f3f46;&#10;  border-radius: 8px;&#10;  padding: 40px 20px;&#10;  text-align: center;&#10;  transition: border-color 0.3s;&#10;  cursor: pointer;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.upload-area:hover,&#10;.upload-area.dragover {&#10;  border-color: #3b82f6;&#10;  background: rgba(59, 130, 246, 0.05);&#10;}&#10;&#10;.upload-icon {&#10;  font-size: 48px;&#10;  color: #71717a;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.upload-text {&#10;  color: #a1a1aa;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;/* 响应式设计 */&#10;@media (max-width: 768px) {&#10;  .image-grid {&#10;    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));&#10;    gap: 12px;&#10;  }&#10;  &#10;  .el-main {&#10;    padding: 12px;&#10;  }&#10;  &#10;  .filter-panel {&#10;    padding: 16px;&#10;  }&#10;}&#10;&#10;/* 加载状态 */&#10;.loading {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  height: 200px;&#10;  color: #71717a;&#10;}&#10;&#10;/* 空状态 */&#10;.empty-state {&#10;  text-align: center;&#10;  padding: 60px 20px;&#10;  color: #71717a;&#10;}&#10;&#10;.empty-icon {&#10;  font-size: 64px;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;/* 图片预览对话框 */&#10;.image-preview {&#10;  max-width: 90vw;&#10;  max-height: 90vh;&#10;}&#10;&#10;.preview-image {&#10;  width: 100%;&#10;  height: auto;&#10;  max-height: 80vh;&#10;  object-fit: contain;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/types.ts" />
              <option name="originalContent" value="// 图片数据类型&#10;export interface Image {&#10;  filename: string&#10;  mimetype: string&#10;  hash: string&#10;  size: number&#10;  width: number&#10;  height: number&#10;  rating: string&#10;  tags: string[]&#10;  uploadTime?: string&#10;}&#10;&#10;// 分页数据类型&#10;export interface Page&lt;T&gt; {&#10;  records: T[]&#10;  totalElements: number&#10;  totalPages: number&#10;  page: number&#10;  pageSize: number&#10;}&#10;&#10;// 查询参数类型&#10;export interface QueryParams {&#10;  tags: string[]&#10;  sort: string&#10;  rating: string&#10;  page: number&#10;  pageSize: number&#10;  seed: string&#10;}&#10;&#10;// 评级类型&#10;export type Rating = 'all' | 'general' | 'sensitive' | 'explicit'&#10;&#10;// 排序类型&#10;export type SortType = 'random' | 'size' | 'time'&#10;" />
              <option name="updatedContent" value="// 图片数据类型 (对应后端ImageResponse)&#13;&#10;export interface Image {&#13;&#10;  filename: string&#13;&#10;  mimetype: string&#13;&#10;  hash: string&#13;&#10;  size: number&#13;&#10;  width: number&#13;&#10;  height: number&#13;&#10;  rating: string&#13;&#10;  tags: string[]&#13;&#10;  uploadTime?: string&#13;&#10;}&#13;&#10;&#13;&#10;// 分页数据类型 (对应后端PageResult)&#13;&#10;export interface Page&lt;T&gt; {&#13;&#10;  records: T[]&#13;&#10;  totalElements: number&#13;&#10;  totalPages: number&#13;&#10;  page: number&#13;&#10;  pageSize: number&#13;&#10;}&#13;&#10;&#13;&#10;// 查询参数类型 (对应后端ImageQueryParams)&#13;&#10;export interface QueryParams {&#13;&#10;  tags: string[]&#13;&#10;  sort: string&#13;&#10;  rating: string&#13;&#10;  page: number&#13;&#10;  pageSize: number&#13;&#10;  seed: string&#13;&#10;}&#13;&#10;&#13;&#10;// 评级类型&#13;&#10;export type Rating = 'all' | 'general' | 'sensitive' | 'explicit'&#13;&#10;&#13;&#10;// 排序类型&#13;&#10;export type SortType = 'random' | 'size' | 'time'&#13;&#10;&#13;&#10;// 文件响应类型&#13;&#10;export interface FileResponse {&#13;&#10;  filename: string&#13;&#10;  mimeType: string&#13;&#10;  resource: Blob&#13;&#10;}&#13;&#10;&#13;&#10;// Tagger响应类型&#13;&#10;export interface TaggerResponse {&#13;&#10;  tags: string[]&#13;&#10;  rating: string&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/vue-shim.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/vue-shim.d.ts" />
              <option name="updatedContent" value="declare module '*.vue' {&#10;  import type { DefineComponent } from 'vue'&#10;  const component: DefineComponent&lt;{}, {}, any&gt;&#10;  export default component&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/vite.config.ts" />
              <option name="originalContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;// https://vitejs.dev/config/&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  resolve: {&#10;    alias: {&#10;      '@': '/src'&#10;    }&#10;  },&#10;  server: {&#10;    port: 3000,&#10;    open: true,&#10;    proxy: {&#10;      '/api': {&#10;        target: 'http://localhost:8080',&#10;        changeOrigin: true,&#10;        secure: false&#10;      }&#10;    }&#10;  },&#10;  build: {&#10;    outDir: 'dist',&#10;    sourcemap: false,&#10;    rollupOptions: {&#10;      output: {&#10;        manualChunks: {&#10;          vendor: ['vue', 'pinia'],&#10;          ui: ['element-plus']&#10;        }&#10;      }&#10;    }&#10;  }&#10;})&#10;" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;// https://vitejs.dev/config/&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  resolve: {&#10;    alias: {&#10;      '@': '/src'&#10;    }&#10;  },&#10;  server: {&#10;    port: 3000,&#10;    open: true,&#10;    proxy: {&#10;      // 代理所有后端API路径到8080端口&#10;      '/query': {&#10;        target: 'http://localhost:8080',&#10;        changeOrigin: true,&#10;        secure: false&#10;      },&#10;      '/image': {&#10;        target: 'http://localhost:8080',&#10;        changeOrigin: true,&#10;        secure: false&#10;      },&#10;      '/tag': {&#10;        target: 'http://localhost:8080',&#10;        changeOrigin: true,&#10;        secure: false&#10;      },&#10;      '/file': {&#10;        target: 'http://localhost:8080',&#10;        changeOrigin: true,&#10;        secure: false&#10;      }&#10;    }&#10;  },&#10;  build: {&#10;    outDir: 'dist',&#10;    sourcemap: false,&#10;    rollupOptions: {&#10;      output: {&#10;        manualChunks: {&#10;          vendor: ['vue', 'pinia'],&#10;          ui: ['element-plus']&#10;        }&#10;      }&#10;    }&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>